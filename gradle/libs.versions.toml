# Copyright (C) 2022 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

[versions]
# Docker
# When updating this version, make sure to keep it in sync with the worker Dockerfiles.
eclipseTemurin = "21.0.7_6-jdk-jammy@sha256:746ad7128069fdaa77df1f06a0463ad50f4ae787648cbbcc6d6ab0e702e6c97e"

# Gradle plugins
buildConfigPlugin = "5.6.8"
dependencyAnalysisPlugin = "3.0.3"
detektPlugin = "1.23.8"
gitSemverPlugin = "0.16.1"
jibPlugin = "3.4.5"
kotlinPlugin = "2.2.20"
kotlinxCoroutines = "1.10.2"
kotlinxDatetime = "0.6.2"
kotlinxSerialization = "1.9.0"
kspPlugin = "2.2.20-2.0.3"
mavenPublishPlugin = "0.34.0"

# Gradle dependencies
aedile = "3.0.1"
awsSdk = "1.5.38"
azureIdentity = "1.17.0"
azureMessagingServicebus = "7.17.14"
azureSecurityKeyvaultSecrets = "4.10.2"
azureStorageBlob = "12.31.2"
clikt = "5.0.3"
commonsText = "1.14.0"
exposed = "0.61.0"
flyway = "11.13.0"
hikari = "7.0.2"
jackson = "2.20.0"
jsonSchemaSerialization = "0.6.6"
jsonSchemaValidator = "1.5.9"
kaml = "0.96.0"
keycloakTestcontainerVersion = "3.8.0"
koin = "4.1.1"
konform = "0.11.1"
kotest = "6.0.3"
kotestAssertionsKotlinxDatetime = "1.1.0"
kotestAssertionsKtor = "2.0.0"
kotlinResult = "2.1.0"
ktorOpenApi = "5.2.0"
kubernetesClient = "23.0.0"
log4j = "2.25.1"
logback = "1.5.18"
micrometer = "1.15.4"
mockk = "1.14.5"
mordant = "3.0.2"
okio = "3.16.0"
ort = "61.3.0"
postgres = "42.7.7"
qpidJmsClient = "2.8.0"
rabbitMq = "5.26.0"
schemaKenerator = "2.3.0"
slf4j = "2.0.17"
testContainers = "1.21.3"
typesafeConfig = "1.4.5"
wiremock = "3.0.1"

[plugins]
buildConfig = { id = "com.github.gmazzo.buildconfig", version.ref = "buildConfigPlugin" }
gitSemver = { id = "com.github.jmongard.git-semver-plugin", version.ref = "gitSemverPlugin" }
jib = { id = "com.google.cloud.tools.jib", version.ref = "jibPlugin" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlinPlugin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "kspPlugin" }

[libraries]
# These are Maven coordinates for Gradle plugins, which is necessary to use them in precompiled plugin scripts.
plugin-dependencyAnalysis = { module = "com.autonomousapps:dependency-analysis-gradle-plugin", version.ref = "dependencyAnalysisPlugin" }
plugin-detekt = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detektPlugin" }
plugin-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlinPlugin" }
plugin-mavenPublish = { module = "com.vanniktech:gradle-maven-publish-plugin", version.ref = "mavenPublishPlugin" }

aedile = { module = "com.sksamuel.aedile:aedile-core", version.ref = "aedile" }
azureIdentity = { module = "com.azure:azure-identity", version.ref = "azureIdentity" }
azureMessagingServicebus = { module = "com.azure:azure-messaging-servicebus", version.ref = "azureMessagingServicebus" }
azureSecurityKeyvaultSecrets = { module = "com.azure:azure-security-keyvault-secrets", version.ref = "azureSecurityKeyvaultSecrets" }
azureStorageBlob = { module = "com.azure:azure-storage-blob", version.ref = "azureStorageBlob" }
clikt = { module = "com.github.ajalt.clikt:clikt", version.ref = "clikt" }
commonsText = { module = "org.apache.commons:commons-text", version.ref = "commonsText" }
exposedCore = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposedDao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposedJdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
exposedJson = { module = "org.jetbrains.exposed:exposed-json", version.ref = "exposed" }
exposedKotlinDatetime = { module = "org.jetbrains.exposed:exposed-kotlin-datetime", version.ref = "exposed" }
flywayCore = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flywayPostgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
hikari = { module = "com.zaxxer:HikariCP", version.ref = "hikari" }
jacksonModuleKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jsonSchemaSerialization = { module = "com.github.Ricky12Awesome:json-schema-serialization", version.ref = "jsonSchemaSerialization" }
jsonSchemaValidator = { module = "com.networknt:json-schema-validator", version.ref = "jsonSchemaValidator" }
kaml = { module = "com.charleskorn.kaml:kaml", version.ref = "kaml" }
koinCore = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koinKtor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
koinTest = { module = "io.insert-koin:koin-test", version.ref = "koin" }
konform = { module = "io.konform:konform", version.ref = "konform" }
kotestAssertionsCore = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotestAssertionsKotlinxDatetime = { module = "io.kotest.extensions:kotest-assertions-kotlinx-datetime", version.ref = "kotestAssertionsKotlinxDatetime" }
kotestAssertionsKtor = { module = "io.kotest.extensions:kotest-assertions-ktor", version.ref = "kotestAssertionsKtor" }
kotestAssertionsTable = { module = "io.kotest:kotest-assertions-table", version.ref = "kotest" }
kotestExtensions = { module = "io.kotest:kotest-extensions", version.ref = "kotest" }
kotestExtensionsTestcontainers = { module = "io.kotest:kotest-extensions-testcontainers", version.ref = "kotest" }
kotestFrameworkEngine = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotestRunnerJunit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotlinResult = { module = "com.michael-bull.kotlin-result:kotlin-result", version.ref = "kotlinResult" }
kotlinxCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
kotlinxCoroutinesSlf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinxCoroutines" }
kotlinxDatetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
kotlinxSerializationJson = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }
ktorOpenApi = { module = "io.github.smiley4:ktor-openapi", version.ref = "ktorOpenApi" }
ktorSwaggerUi = { module = "io.github.smiley4:ktor-swagger-ui", version.ref = "ktorOpenApi" }
kubernetesClient = { module = "io.kubernetes:client-java", version.ref = "kubernetesClient" }
kubernetesClientExtended = { module = "io.kubernetes:client-java-extended", version.ref = "kubernetesClient" }
log4jToSlf4j = { module = "org.apache.logging.log4j:log4j-to-slf4j", version.ref = "log4j" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
micrometerRegistryGraphite = { module = "io.micrometer:micrometer-registry-graphite", version.ref = "micrometer" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mordantCoroutines = { module =  "com.github.ajalt.mordant:mordant-coroutines", version.ref = "mordant" }
okio = { module = "com.squareup.okio:okio", version.ref = "okio" }
postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
qpidJmsClient = { module = "org.apache.qpid:qpid-jms-client", version.ref = "qpidJmsClient" }
rabbitMqAmqpClient = { module = "com.rabbitmq:amqp-client", version.ref = "rabbitMq" }
s3 = { module = "aws.sdk.kotlin:s3", version.ref = "awsSdk" }
schemaKeneratorCore = { module = "io.github.smiley4:schema-kenerator-core", version.ref = "schemaKenerator" }
schemaKeneratorJsonschema = { module = "io.github.smiley4:schema-kenerator-jsonschema", version.ref = "schemaKenerator" }
schemaKeneratorReflection = { module = "io.github.smiley4:schema-kenerator-reflection", version.ref = "schemaKenerator" }
schemaKeneratorSwagger = { module = "io.github.smiley4:schema-kenerator-swagger", version.ref = "schemaKenerator" }
slf4j = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
sqs = { module = "aws.sdk.kotlin:sqs", version.ref = "awsSdk" }
testContainers = { module = "org.testcontainers:testcontainers", version.ref = "testContainers" }
testContainersKeycloak = { module = "com.github.dasniko:testcontainers-keycloak", version.ref = "keycloakTestcontainerVersion" }
testContainersLocalStack = { module = "org.testcontainers:localstack", version.ref = "testContainers" }
testContainersPostgresql = { module = "org.testcontainers:postgresql", version.ref = "testContainers" }
testContainersRabbitMq = { module = "org.testcontainers:rabbitmq", version.ref = "testContainers" }
testContainersVault = { module = "org.testcontainers:vault", version.ref = "testContainers" }
typesafeConfig = { module = "com.typesafe:config", version.ref = "typesafeConfig" }
wiremockStandalone = { module = "com.github.tomakehurst:wiremock-standalone", version.ref = "wiremock" }

[bundles]
flyway = ["flywayCore", "flywayPostgresql"]
schemaKenerator = ["schemaKeneratorCore", "schemaKeneratorJsonschema", "schemaKeneratorReflection", "schemaKeneratorSwagger"]
