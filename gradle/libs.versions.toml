# Copyright (C) 2022 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

[versions]
# Docker
# When updating this version make sure to keep it in sync with the worker Dockerfiles.
eclipseTemurin = "17.0.11_9-jdk-jammy@sha256:1e8288a2706582b01e889a372465b91b17eb674fda5facb2f67f30a3cd93c448"

# Gradle plugins
dependencyAnalysisPlugin = "1.33.0"
detektPlugin = "1.23.6"
gitSemverPlugin = "0.12.10"
jibPlugin = "3.4.3"
kotlinPlugin = "2.0.10"
kotlinxCoroutines = "1.8.1"
kotlinxDatetime = "0.6.0"
kotlinxSerialization = "1.7.1"
mavenPublishPlugin = "0.29.0"
rabbitMq = "5.21.0"
versionsPlugin = "0.51.0"

# Gradle dependencies
awsSdk = "1.3.8"
exposed = "0.52.0"
flyway = "10.17.0"
hikari = "5.1.0"
jackson = "2.17.2"
jsonSchemaSerialization = "0.6.6"
kaml = "0.61.0"
keycloakTestcontainerVersion = "3.4.0"
koin = "3.5.6"
koinKtor = "3.5.6"
koinTest = "3.5.6"
konform = "0.6.1"
kotest = "5.9.1"
kotestAssertionsKotlinxDatetime = "1.1.0"
kotestAssertionsKtor = "2.0.0"
kotestExtensionTestContainers = "2.0.2"
ktor = "2.3.12"
ktorSwaggerUi = "3.2.0"
kubernetesClient = "18.0.1"
log4j = "2.23.1"
logback = "1.5.6"
micrometer = "1.13.2"
mockk = "1.13.12"
ort = "27.0.0"
postgres = "42.7.3"
qpidJmsClient = "2.5.0"
schemaKenerator = "1.1.0"
slf4j = "2.0.16"
testContainers = "1.20.1"
typesafeConfig = "1.4.3"
wiremock = "3.0.1"

[plugins]
dependencyAnalysis = { id = "com.autonomousapps.dependency-analysis", version.ref = "dependencyAnalysisPlugin" }
gitSemver = { id = "com.github.jmongard.git-semver-plugin", version.ref = "gitSemverPlugin" }
jib = { id = "com.google.cloud.tools.jib", version.ref = "jibPlugin" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlinPlugin" }
mavenPublish = { id = "com.vanniktech.maven.publish", version.ref = "mavenPublishPlugin" }
versions = { id = "com.github.ben-manes.versions", version.ref = "versionsPlugin" }

[libraries]
# These are Maven coordinates for Gradle plugins, which is necessary to use them in precompiled plugin scripts.
plugin-detekt = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detektPlugin" }
plugin-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlinPlugin" }

exposedCore = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposedDao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposedJdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
exposedJson = { module = "org.jetbrains.exposed:exposed-json", version.ref = "exposed" }
exposedKotlinDatetime = { module = "org.jetbrains.exposed:exposed-kotlin-datetime", version.ref = "exposed" }
flywayCore = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flywayPostgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
hikari = { module = "com.zaxxer:HikariCP", version.ref = "hikari" }
jacksonModuleKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jsonSchemaSerialization = { module = "com.github.Ricky12Awesome:json-schema-serialization", version.ref = "jsonSchemaSerialization" }
kaml = { module = "com.charleskorn.kaml:kaml", version.ref = "kaml" }
koinCore = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koinKtor = { module = "io.insert-koin:koin-ktor", version.ref = "koinKtor" }
koinTest = { module = "io.insert-koin:koin-test", version.ref = "koinTest" }
konform = { module = "io.konform:konform", version.ref = "konform" }
kotestAssertionsCore = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotestAssertionsKotlinxDatetime = { module = "io.kotest.extensions:kotest-assertions-kotlinx-datetime", version.ref = "kotestAssertionsKotlinxDatetime" }
kotestAssertionsKtor = { module = "io.kotest.extensions:kotest-assertions-ktor", version.ref = "kotestAssertionsKtor" }
kotestExtensionsTestContainer = { module = "io.kotest.extensions:kotest-extensions-testcontainers", version.ref = "kotestExtensionTestContainers" }
kotestFrameworkApi = { module = "io.kotest:kotest-framework-api", version.ref = "kotest" }
kotestRunnerJunit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotlinxCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
kotlinxDatetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
kotlinxSerializationJson = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }
ktorClientAuth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktorClientContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktorClientCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorClientOkHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktorHttp = { module = "io.ktor:ktor-http", version.ref = "ktor" }
ktorKotlinxSerialization = { module = "io.ktor:ktor-serialization-kotlinx-json-jvm", version.ref = "ktor" }
ktorServerAuth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktorServerAuthJwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktor" }
ktorServerCallLogging = { module = "io.ktor:ktor-server-call-logging-jvm", version.ref = "ktor" }
ktorServerCommon = { module = "io.ktor:ktor-server-host-common-jvm", version.ref = "ktor" }
ktorServerContentNegotiation = { module = "io.ktor:ktor-server-content-negotiation-jvm", version.ref = "ktor" }
ktorServerCore = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktorServerCors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktorServerDefaultHeaders = { module = "io.ktor:ktor-server-default-headers-jvm", version.ref = "ktor" }
ktorServerMetricsMicrometer = { module = "io.ktor:ktor-server-metrics-micrometer", version.ref = "ktor" }
ktorServerNetty = { module = "io.ktor:ktor-server-netty-jvm", version.ref = "ktor" }
ktorServerStatusPages = { module = "io.ktor:ktor-server-status-pages-jvm", version.ref = "ktor" }
ktorServerTestHost = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktorServerTestsJvm = { module = "io.ktor:ktor-server-tests-jvm", version.ref = "ktor" }
ktorSwaggerUi = { module = "io.github.smiley4:ktor-swagger-ui", version.ref = "ktorSwaggerUi" }
ktorValidation = { module = "io.ktor:ktor-server-request-validation", version.ref = "ktor" }
kubernetesClient = { module = "io.kubernetes:client-java", version.ref = "kubernetesClient" }
kubernetesClientExtended = { module = "io.kubernetes:client-java-extended", version.ref = "kubernetesClient" }
log4jToSlf4j = { module = "org.apache.logging.log4j:log4j-to-slf4j", version.ref = "log4j" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
micrometerRegistryGraphite = { module = "io.micrometer:micrometer-registry-graphite", version.ref = "micrometer" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
ortAdvisor = { module = "org.ossreviewtoolkit:advisor", version.ref = "ort" }
ortAdvisors = { module = "org.ossreviewtoolkit.plugins:advisors", version.ref = "ort" }
ortAnalyzer = { module = "org.ossreviewtoolkit:analyzer", version.ref = "ort" }
ortCommonUtils = { module = "org.ossreviewtoolkit.utils:common-utils", version.ref = "ort" }
ortDownloader = { module = "org.ossreviewtoolkit:downloader", version.ref = "ort" }
ortEvaluator = { module = "org.ossreviewtoolkit:evaluator", version.ref = "ort" }
ortModel = { module = "org.ossreviewtoolkit:model", version.ref = "ort" }
ortNotifier = { module = "org.ossreviewtoolkit:notifier", version.ref = "ort" }
ortPackageConfigurationProviders = { module = "org.ossreviewtoolkit.plugins:package-configuration-providers", version.ref = "ort" }
ortPackageCurationProviders = { module = "org.ossreviewtoolkit.plugins:package-curation-providers", version.ref = "ort" }
ortPackageManagers = { module = "org.ossreviewtoolkit.plugins:package-managers", version.ref = "ort" }
ortReporter = { module = "org.ossreviewtoolkit:reporter", version.ref = "ort" }
ortReporters = { module = "org.ossreviewtoolkit.plugins:reporters", version.ref = "ort" }
ortScanner = { module = "org.ossreviewtoolkit:scanner", version.ref = "ort" }
ortScanners = { module = "org.ossreviewtoolkit.plugins:scanners", version.ref = "ort" }
ortScriptingUtils = { module = "org.ossreviewtoolkit.utils:scripting-utils", version.ref = "ort" }
ortTestUtils = { module = "org.ossreviewtoolkit.utils:test-utils", version.ref = "ort" }
ortUtils = { module = "org.ossreviewtoolkit.utils:ort-utils", version.ref = "ort" }
ortVersionControlSystems = { module = "org.ossreviewtoolkit.plugins:version-control-systems", version.ref = "ort" }
ortVersionControlSystemGit = { module = "org.ossreviewtoolkit.plugins.versioncontrolsystems:git-version-control-system", version.ref = "ort" }
postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
qpidJmsClient = { module = "org.apache.qpid:qpid-jms-client", version.ref = "qpidJmsClient" }
rabbitMqAmqpClient = { module = "com.rabbitmq:amqp-client", version.ref = "rabbitMq" }
s3 = { module = "aws.sdk.kotlin:s3", version.ref = "awsSdk" }
schemaKeneratorCore = { module = "io.github.smiley4:schema-kenerator-core", version.ref = "schemaKenerator" }
schemaKeneratorJsonschema = { module = "io.github.smiley4:schema-kenerator-jsonschema", version.ref = "schemaKenerator" }
schemaKeneratorReflection = { module = "io.github.smiley4:schema-kenerator-reflection", version.ref = "schemaKenerator" }
schemaKeneratorSwagger = { module = "io.github.smiley4:schema-kenerator-swagger", version.ref = "schemaKenerator" }
slf4j = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
sqs = { module = "aws.sdk.kotlin:sqs", version.ref = "awsSdk" }
testContainers = { module = "org.testcontainers:testcontainers", version.ref = "testContainers" }
testContainersKeycloak = { module = "com.github.dasniko:testcontainers-keycloak", version.ref = "keycloakTestcontainerVersion" }
testContainersLocalStack = { module = "org.testcontainers:localstack", version.ref = "testContainers" }
testContainersPostgresql = { module = "org.testcontainers:postgresql", version.ref = "testContainers" }
testContainersRabbitMq = { module = "org.testcontainers:rabbitmq", version.ref = "testContainers" }
testContainersVault = { module = "org.testcontainers:vault", version.ref = "testContainers" }
typesafeConfig = { module = "com.typesafe:config", version.ref = "typesafeConfig" }
wiremockStandalone = { module = "com.github.tomakehurst:wiremock-standalone", version.ref = "wiremock" }

[bundles]
flyway = ["flywayCore", "flywayPostgresql"]
schemaKenerator = ["schemaKeneratorCore", "schemaKeneratorJsonschema", "schemaKeneratorReflection", "schemaKeneratorSwagger"]
