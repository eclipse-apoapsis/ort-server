name: Docker Build

on:
  merge_group:
    types: [ checks_requested ]
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+-RC[0-9]+"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IS_PR: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}

jobs:
  build:
    name: Build ${{ matrix.docker.jibImage || matrix.docker.image }} Docker Image
    runs-on: ubuntu-24.04
    services:
      registry:
        image: registry:3
        ports:
          - 5000:5000
    permissions:
      packages: write
    strategy:
      matrix:
        # Define the Docker images to build. The job first builds an image using Docker which is used for the ui and for
        # worker base images. Then the job builds an image using Jib. Both steps are optional, e.g., not all Jib builds
        # need a base image, and the ui build does not need a Jib build.
        #
        # If the image is built with Docker:
        # preparationTask (optional): Gradle task to run before building the image.
        # image: Name of the image, used for the Docker image name.
        # context: Path to the Docker context directory.
        # dockerfile: Path of the Dockerfile to use, relative to context.
        #
        # If the image is built with Jib:
        # jibImage: Name of the image built by Jib.
        # task: Gradle task to build the image.
        #
        # Optional properties:
        # freeDiskSpace: Whether to free disk space before building the image.
        # skipWorkerBaseImage: Whether to skip building the worker base image.
        docker:
        - jibImage: core
          task: :core:jibDockerBuild
        - jibImage: orchestrator
          task: :orchestrator:jibDockerBuild
        - jibImage: maintenance-tasks
          task: :tasks:jibDockerBuild
        - jibImage: advisor-worker
          task: :workers:advisor:jibDockerBuild
        - image: analyzer-worker-base-image
          context: workers/analyzer/docker
          dockerfile: Analyzer.Dockerfile
          jibImage: analyzer-worker
          task: :workers:analyzer:jibDockerBuild
          freeDiskSpace: true
        - jibImage: config-worker
          task: :workers:config:jibDockerBuild
        - jibImage: evaluator-worker
          task: :workers:evaluator:jibDockerBuild
        - jibImage: notifier-worker
          task: :workers:notifier:jibDockerBuild
        - image: reporter-worker-base-image
          context: workers/reporter/docker
          dockerfile: Reporter.Dockerfile
          jibImage: reporter-worker
          task: :workers:reporter:jibDockerBuild
        - image: scanner-worker-base-image
          context: workers/scanner/docker
          dockerfile: Scanner.Dockerfile
          jibImage: scanner-worker
          task: :workers:scanner:jibDockerBuild
        - preparationTask: :core:generateOpenApiSpec
          image: ui
          context: ui
          dockerfile: docker/UI.Dockerfile

    steps:
    - name: Checkout Repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Free Disk Space
      if: ${{ matrix.docker.freeDiskSpace }}
      uses: ./.github/actions/free-disk-space

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        driver-opts: network=host

    - name: Login to GitHub Container Registry
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@4d9f0ba0025fe599b4ebab900eb7f3a1d93ef4c2 # v5.0.0

    - name: Get ORT-Server Version
      run: |
        ORT_SERVER_VERSION=$(./gradlew -q printVersion)
        echo "ORT_SERVER_VERSION=${ORT_SERVER_VERSION}" >> $GITHUB_ENV

    - name: Run Preparation Task ${{ matrix.docker.preparationTask }}
      if: ${{ matrix.docker.preparationTask != '' }}
      run: ./gradlew ${{ matrix.docker.preparationTask }}

    - name: Extract Docker Metadata for ${{ matrix.docker.image }} Image
      if: ${{ matrix.docker.dockerfile != '' }}
      id: meta-base
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/ort-server-${{ matrix.docker.image }}
        tags: |
          type=raw,value=${{ env.ORT_SERVER_VERSION }}
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{ is_default_branch }}

    - name: Set cache-to
      run: |
        # Only write to the registry cache if the workflow is not running for a PR.
        echo "CACHE_TO=$([[ ${{ env.IS_PR }} == 'false' ]] && echo 'type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/ort-server-${{ matrix.docker.image }}:cache,mode=max' || echo '')" >> $GITHUB_ENV
        # Load the image to the Docker daemon if it is required as a base image for the Jib build.
        echo "LOAD_IMAGE=$([[ '${{ matrix.docker.task }}' != '' ]] && echo 'true' || echo 'false')" >> $GITHUB_ENV
        # Push the image to the registry if it is not a PR and no Jib build is configured.
        echo "PUSH_IMAGE=$([[ ${{ env.IS_PR }} == 'false' ]] && echo 'true' || echo 'false')" >> $GITHUB_ENV

    - name: Build worker base image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      with:
        context: docker
        file: docker/Base.Dockerfile
        tags: localhost:5000/ort-server-base-image:${{ env.ORT_SERVER_VERSION }}
        labels: ${{ steps.meta-base.outputs.labels }}
        push: true

    - name: Build ${{ matrix.docker.image }} Image
      if: ${{ matrix.docker.dockerfile != '' }}
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ matrix.docker.context }}
        file: ${{ matrix.docker.context }}/${{ matrix.docker.dockerfile }}
        build-contexts: |
          ort-server-base-image:latest=docker-image://localhost:5000/ort-server-base-image:latest
        push: ${{ env.PUSH_IMAGE }}
        load: ${{ env.LOAD_IMAGE }}
        tags: ${{ steps.meta-base.outputs.tags }}
        labels: ${{ steps.meta-base.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/ort-server-${{ matrix.docker.image }}:cache
        cache-to: ${{ env.CACHE_TO }}
        build-args: |
          BASE_REGISTRY=localhost:5000/
          BASE_IMAGE_TAG=${{ env.ORT_SERVER_VERSION }}

    - name: Extract Docker Metadata for ${{ matrix.docker.jibImage }} Image
      if: ${{ matrix.docker.task != '' }}
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        tags: |
          type=raw,value=${{ env.ORT_SERVER_VERSION }}
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{ is_default_branch }}

    - name: Prepare Jib Cache Directories
      if: ${{ matrix.docker.task != '' }}
      run: |
        sudo mkdir -p /mnt/jib-app-cache /mnt/jib-base-cache /mnt/tmp
        sudo chown $USER /mnt/jib-app-cache /mnt/jib-base-cache /mnt/tmp

    - name: Determine Jib base image
      id: jib-base-image
      if: ${{ matrix.docker.task != '' }}
      run: |
        if [[ -n "${{ matrix.docker.dockerfile }}" ]]; then
          baseImagePrefix="docker://${{ env.REGISTRY }}/${{ github.repository_owner }}"
        else
          baseImagePrefix="localhost:5000"
        fi
        baseImageTag="${{ env.ORT_SERVER_VERSION }}"
        echo "baseImagePrefix=$baseImagePrefix" >> $GITHUB_OUTPUT
        echo "baseImageTag=$baseImageTag" >> $GITHUB_OUTPUT

    - name: Build ${{ matrix.docker.jibImage }} Image
      if: ${{ matrix.docker.task != '' }}
      run: |
        ./gradlew \
          -PdockerBaseImagePrefix=${{ steps.jib-base-image.outputs.baseImagePrefix }}/ \
          -PdockerBaseImageTag=${{ steps.jib-base-image.outputs.baseImageTag }} \
          -PdockerImagePrefix=${{ env.REGISTRY }}/${{ github.repository_owner }}/ \
          -PdockerImageTag=${{ env.ORT_SERVER_VERSION }} \
          ${{ matrix.docker.task }} \
          -Djib.applicationCache=/mnt/jib-app-cache \
          -Djib.baseImageCache=/mnt/jib-base-cache \
          -Djib.allowInsecureRegistries=true \
          -Djava.io.tmpdir=/mnt/tmp \
          -Djib.console=plain \
          -Djib.container.labels="$(echo "${{ steps.meta.outputs.labels }}" | tr '\n' ',' | sed 's/,$//')" \
          -Djib.to.tags="$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ',' | sed 's/,$//')"
        if [ "${{ env.IS_PR }}" = "false" ]; then
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/ort-server-${{ matrix.docker.jibImage }} --all-tags
        fi
