# Copyright (C) 2022 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ort_server
    ports:
    # Use port 5433 on the host to avoid a conflict with a running postgres instance on the host.
    - "5433:5432"
    volumes:
    - db:/var/lib/postgresql/data
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "postgres"

  rabbitmq:
    # Setting the hostname is necessary for persistence.
    # See https://www.futurefundamentals.com/set-rabbitmq-with-data-persistent-with-docker-compose/.
    hostname: ort-server-rabbitmq
    image: rabbitmq:3.13.6
    restart: unless-stopped
    # See https://www.rabbitmq.com/monitoring.html#health-checks
    healthcheck:
      test: [ 'CMD-SHELL', 'rabbitmq-diagnostics check_running' ]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - type: bind
        source: ./scripts/docker/rabbitmq/
        target: /etc/rabbitmq/
    deploy:
      resources:
        limits:
          cpus: '1'
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "rabbitmq"

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    restart: unless-stopped
    entrypoint: /opt/keycloak_init/init-keycloak.sh
    command:
    - "start-dev"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'java /opt/keycloak_init/HealthCheck.java']
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 90s
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_URL: "jdbc:postgresql://postgres:5432/ort_server"
      KC_HEALTH_ENABLED: "true"
    ports:
    - "8081:8080"
    volumes:
    - type: bind
      source: ./scripts/docker/keycloak/
      target: /opt/keycloak_init/
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "keycloak"

  graphite:
    image: graphiteapp/graphite-statsd:1.1.10-5
    restart: unless-stopped
    ports:
      # Carbon Plain Text
      - "2003-2004:2003-2004"
      # Carbon Relay
      - "2013-2014:2013-2014"
      # Carbon Aggregator
      - "2023-2024:2023-2024"
      # Carbon Statsd UDP
      - "8125:8125/udp"
      # Carbon Statsd TCP
      - "8126:8126"
      # Graphite Webapp
      - "8888:8080"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z 127.0.0.1 2003" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "graphite"

  core:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-core:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      graphite:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 http://localhost:8080/api/v1/liveness" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${ORT_SERVER_CORE_PORT:-8080}:8080"
    environment:
      PORT: 8080
      UI_HOST: "localhost:5173"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ort_server
      DB_SCHEMA: ort_server
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      JWT_URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
      ORCHESTRATOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME: orchestrator_queue
      ORCHESTRATOR_SENDER_TRANSPORT_USERNAME: admin
      ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD: admin
      SECRETS_PROVIDER_NAME: fileBased
      FILE_BASED_PATH: "/mnt/secrets-provider/secrets.store"
      GRAPHITE_HOST: "graphite"
      GRAPHITE_PORT: 2003
      GRAPHITE_PROTOCOL: PLAINTEXT
      CORE_SECRET_PROVIDER: secret-file
      CORE_SECRET_FILES: /mnt/secrets.properties
    volumes:
      - type: bind
        source: ./scripts/compose/secrets.properties
        target: /mnt/secrets.properties
      - type: bind
        source: ./scripts/compose/secrets-provider
        target: /mnt/secrets-provider
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "core"

  orchestrator:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-orchestrator:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_URL: "jdbc:postgresql://postgres:5432"
      DB_HOST: "postgres"
      DB_NAME: ort_server
      DB_SCHEMA: ort_server
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      ORCHESTRATOR_RECEIVER_TRANSPORT_TYPE: rabbitMQ
      ORCHESTRATOR_RECEIVER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ORCHESTRATOR_RECEIVER_TRANSPORT_QUEUE_NAME: orchestrator_queue
      ORCHESTRATOR_RECEIVER_TRANSPORT_USERNAME: admin
      ORCHESTRATOR_RECEIVER_TRANSPORT_PASSWORD: admin
      ADVISOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      ADVISOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ADVISOR_SENDER_TRANSPORT_QUEUE_NAME: advisor_queue
      ADVISOR_SENDER_TRANSPORT_USERNAME: admin
      ADVISOR_SENDER_TRANSPORT_PASSWORD: admin
      ANALYZER_SENDER_TRANSPORT_TYPE: rabbitMQ
      ANALYZER_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ANALYZER_SENDER_TRANSPORT_QUEUE_NAME: analyzer_queue
      ANALYZER_SENDER_TRANSPORT_USERNAME: admin
      ANALYZER_SENDER_TRANSPORT_PASSWORD: admin
      CONFIG_SENDER_TRANSPORT_TYPE: rabbitMQ
      CONFIG_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      CONFIG_SENDER_TRANSPORT_QUEUE_NAME: config_queue
      CONFIG_SENDER_TRANSPORT_USERNAME: admin
      CONFIG_SENDER_TRANSPORT_PASSWORD: admin
      EVALUATOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      EVALUATOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      EVALUATOR_SENDER_TRANSPORT_QUEUE_NAME: evaluator_queue
      EVALUATOR_SENDER_TRANSPORT_USERNAME: admin
      EVALUATOR_SENDER_TRANSPORT_PASSWORD: admin
      REPORTER_SENDER_TRANSPORT_TYPE: rabbitMQ
      REPORTER_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      REPORTER_SENDER_TRANSPORT_QUEUE_NAME: reporter_queue
      REPORTER_SENDER_TRANSPORT_USERNAME: admin
      REPORTER_SENDER_TRANSPORT_PASSWORD: admin
      SCANNER_SENDER_TRANSPORT_TYPE: rabbitMQ
      SCANNER_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      SCANNER_SENDER_TRANSPORT_QUEUE_NAME: scanner_queue
      SCANNER_SENDER_TRANSPORT_USERNAME: admin
      SCANNER_SENDER_TRANSPORT_PASSWORD: admin
      ORCHESTRATOR_SECRET_PROVIDER: secret-file
      ORCHESTRATOR_SECRET_FILES: /mnt/secrets.properties
    volumes:
      - type: bind
        source: ./scripts/compose/secrets.properties
        target: /mnt/secrets.properties
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "orchestrator"

  advisor-worker:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-advisor-worker:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_URL: "jdbc:postgresql://postgres"
      DB_HOST: "postgres"
      DB_NAME: ort_server
      DB_SCHEMA: ort_server
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      ORCHESTRATOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME: orchestrator_queue
      ORCHESTRATOR_SENDER_TRANSPORT_USERNAME: admin
      ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD: admin
      ADVISOR_CONFIG_FILE_PROVIDER: local-config
      ADVISOR_CONFIG_LOCAL_CONFIG_DIR: /mnt/config
      ADVISOR_RECEIVER_TRANSPORT_TYPE: rabbitMQ
      ADVISOR_RECEIVER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ADVISOR_RECEIVER_TRANSPORT_QUEUE_NAME: advisor_queue
      ADVISOR_RECEIVER_TRANSPORT_USERNAME: admin
      ADVISOR_RECEIVER_TRANSPORT_PASSWORD: admin
      ADVISOR_SECRET_PROVIDER: secret-file
      ADVISOR_SECRET_FILES: /mnt/secrets.properties
    volumes:
    - type: bind
      source: ./scripts/compose/config
      target: /mnt/config
    - type: bind
      source: ./scripts/compose/secrets.properties
      target: /mnt/secrets.properties
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "advisor-worker"

  analyzer-worker:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-analyzer-worker:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_URL: "jdbc:postgresql://postgres"
      DB_HOST: "postgres"
      DB_NAME: ort_server
      DB_SCHEMA: ort_server
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      ORCHESTRATOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME: orchestrator_queue
      ORCHESTRATOR_SENDER_TRANSPORT_USERNAME: admin
      ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD: admin
      ANALYZER_CONFIG_FILE_PROVIDER: local-config
      ANALYZER_CONFIG_LOCAL_CONFIG_DIR: /mnt/config
      ANALYZER_RECEIVER_TRANSPORT_TYPE: rabbitMQ
      ANALYZER_RECEIVER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ANALYZER_RECEIVER_TRANSPORT_QUEUE_NAME: analyzer_queue
      ANALYZER_RECEIVER_TRANSPORT_USERNAME: admin
      ANALYZER_RECEIVER_TRANSPORT_PASSWORD: admin
      ANALYZER_SECRET_PROVIDER: secret-file
      ANALYZER_SECRET_FILES: /mnt/secrets.properties
      SECRETS_PROVIDER_NAME: fileBased
      FILE_BASED_PATH: "/mnt/secrets-provider/secrets.store"
    volumes:
    - type: bind
      source: ./scripts/compose/config
      target: /mnt/config
    - type: bind
      source: ./scripts/compose/secrets.properties
      target: /mnt/secrets.properties
    - type: bind
      source: ./scripts/compose/secrets-provider
      target: /mnt/secrets-provider
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "analyzer-worker"

  config-worker:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-config-worker:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_URL: "jdbc:postgresql://postgres"
      DB_HOST: "postgres"
      DB_NAME: ort_server
      DB_SCHEMA: ort_server
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      ORCHESTRATOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME: orchestrator_queue
      ORCHESTRATOR_SENDER_TRANSPORT_USERNAME: admin
      ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD: admin
      CONFIG_CONFIG_FILE_PROVIDER: local-config
      CONFIG_CONFIG_LOCAL_CONFIG_DIR: /mnt/config
      CONFIG_RECEIVER_TRANSPORT_TYPE: rabbitMQ
      CONFIG_RECEIVER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      CONFIG_RECEIVER_TRANSPORT_QUEUE_NAME: config_queue
      CONFIG_RECEIVER_TRANSPORT_USERNAME: admin
      CONFIG_RECEIVER_TRANSPORT_PASSWORD: admin
      CONFIG_SECRET_PROVIDER: secret-file
      CONFIG_SECRET_FILES: /mnt/secrets.properties
    volumes:
    - type: bind
      source: ./scripts/compose/config
      target: /mnt/config
    - type: bind
      source: ./scripts/compose/secrets.properties
      target: /mnt/secrets.properties
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "config-worker"

  evaluator-worker:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-evaluator-worker:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_URL: "jdbc:postgresql://postgres"
      DB_HOST: "postgres"
      DB_NAME: ort_server
      DB_SCHEMA: ort_server
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      ORCHESTRATOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME: orchestrator_queue
      ORCHESTRATOR_SENDER_TRANSPORT_USERNAME: admin
      ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD: admin
      EVALUATOR_CONFIG_FILE_PROVIDER: local-config
      EVALUATOR_CONFIG_LOCAL_CONFIG_DIR: /mnt/config
      EVALUATOR_RECEIVER_TRANSPORT_TYPE: rabbitMQ
      EVALUATOR_RECEIVER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      EVALUATOR_RECEIVER_TRANSPORT_QUEUE_NAME: evaluator_queue
      EVALUATOR_RECEIVER_TRANSPORT_USERNAME: admin
      EVALUATOR_RECEIVER_TRANSPORT_PASSWORD: admin
      EVALUATOR_SECRET_PROVIDER: secret-file
      EVALUATOR_SECRET_FILES: /mnt/secrets.properties
    volumes:
    - type: bind
      source: ./scripts/compose/config
      target: /mnt/config
    - type: bind
      source: ./scripts/compose/secrets.properties
      target: /mnt/secrets.properties
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "evaluator-worker"

  reporter-worker:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-reporter-worker:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_URL: "jdbc:postgresql://postgres"
      DB_HOST: "postgres"
      DB_NAME: ort_server
      DB_SCHEMA: ort_server
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      ORCHESTRATOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME: orchestrator_queue
      ORCHESTRATOR_SENDER_TRANSPORT_USERNAME: admin
      ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD: admin
      REPORTER_CONFIG_FILE_PROVIDER: local-config
      REPORTER_CONFIG_LOCAL_CONFIG_DIR: /mnt/config
      REPORTER_RECEIVER_TRANSPORT_TYPE: rabbitMQ
      REPORTER_RECEIVER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      REPORTER_RECEIVER_TRANSPORT_QUEUE_NAME: reporter_queue
      REPORTER_RECEIVER_TRANSPORT_USERNAME: admin
      REPORTER_RECEIVER_TRANSPORT_PASSWORD: admin
      REPORTER_SECRET_PROVIDER: secret-file
      REPORTER_SECRET_FILES: /mnt/secrets.properties
      SECRETS_PROVIDER_NAME: fileBased
      FILE_BASED_PATH: "/mnt/secrets-provider/secrets.store"
    volumes:
    - type: bind
      source: ./scripts/compose/config
      target: /mnt/config
    - type: bind
      source: ./scripts/compose/secrets.properties
      target: /mnt/secrets.properties
    - type: bind
      source: ./scripts/compose/secrets-provider
      target: /mnt/secrets-provider
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "reporter-worker"

  scanner-worker:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-scanner-worker:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_URL: "jdbc:postgresql://postgres"
      DB_HOST: "postgres"
      DB_NAME: ort_server
      DB_SCHEMA: ort_server
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      ORCHESTRATOR_SENDER_TRANSPORT_TYPE: rabbitMQ
      ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME: orchestrator_queue
      ORCHESTRATOR_SENDER_TRANSPORT_USERNAME: admin
      ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD: admin
      SCANNER_CONFIG_FILE_PROVIDER: local-config
      SCANNER_CONFIG_LOCAL_CONFIG_DIR: /mnt/config
      SCANNER_RECEIVER_TRANSPORT_TYPE: rabbitMQ
      SCANNER_RECEIVER_TRANSPORT_SERVER_URI: "amqp://rabbitmq:5672"
      SCANNER_RECEIVER_TRANSPORT_QUEUE_NAME: scanner_queue
      SCANNER_RECEIVER_TRANSPORT_USERNAME: admin
      SCANNER_RECEIVER_TRANSPORT_PASSWORD: admin
      SCANNER_SECRET_PROVIDER: secret-file
      SCANNER_SECRET_FILES: /mnt/secrets.properties
      SECRETS_PROVIDER_NAME: fileBased
      FILE_BASED_PATH: "/mnt/secrets-provider/secrets.store"
    volumes:
    - type: bind
      source: ./scripts/compose/config
      target: /mnt/config
    - type: bind
      source: ./scripts/compose/secrets.properties
      target: /mnt/secrets.properties
    - type: bind
      source: ./scripts/compose/secrets-provider
      target: /mnt/secrets-provider
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "scanner-worker"

  ui:
    image: ${ORT_SERVER_IMAGE_PREFIX-ghcr.io/eclipse-apoapsis/}ort-server-ui:${ORT_SERVER_IMAGE_TAG:-main}
    depends_on:
      core:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -O /dev/null http://localhost || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8082:8080"
    environment:
      UI_API_URL: "http://localhost:${ORT_SERVER_CORE_PORT:-8080}"
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "ui"

  logstash:
    image: grafana/logstash-output-loki
    ports:
      - "12201:12201/udp"
    volumes:
      - ./scripts/compose/logstash/pipelines.yaml:/usr/share/logstash/config/pipelines.yml
      - ./scripts/compose/logstash/loki.conf:/usr/share/logstash/pipeline/loki.conf
      - ./scripts/compose/logstash/logstash.yaml:/usr/share/logstash/config/logstash.yml
    depends_on:
      - loki
    command: logstash -f /usr/share/logstash/pipeline/ --config.reload.automatic

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3200:3000"
    restart: unless-stopped
    volumes:
      - ./scripts/compose/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./scripts/compose/grafana/provisioning:/etc/grafana/provisioning
      - grafana:/var/lib/grafana
    depends_on:
      - loki
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "grafana"
  
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki:/loki
    logging:
      driver: gelf
      options:
        # This is relative to the host, not the container.
        gelf-address: "udp://127.0.0.1:12201"
        tag: "loki"

volumes:
  db:
    driver: local
  grafana:
    driver: local
  loki:
    driver: local
