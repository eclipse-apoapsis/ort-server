/*
 * Copyright (C) 2024 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.services

import io.kotest.core.spec.style.WordSpec
import io.kotest.matchers.collections.beEmpty
import io.kotest.matchers.collections.containExactlyInAnyOrder
import io.kotest.matchers.collections.shouldContainExactlyInAnyOrder
import io.kotest.matchers.collections.shouldHaveSize
import io.kotest.matchers.should
import io.kotest.matchers.shouldBe

import kotlinx.datetime.Clock

import org.eclipse.apoapsis.ortserver.dao.test.DatabaseTestExtension
import org.eclipse.apoapsis.ortserver.dao.test.Fixtures
import org.eclipse.apoapsis.ortserver.dao.utils.toDatabasePrecision
import org.eclipse.apoapsis.ortserver.model.AdvisorJobConfiguration
import org.eclipse.apoapsis.ortserver.model.JobConfigurations
import org.eclipse.apoapsis.ortserver.model.OrtRun
import org.eclipse.apoapsis.ortserver.model.PluginConfiguration
import org.eclipse.apoapsis.ortserver.model.VulnerabilityRating
import org.eclipse.apoapsis.ortserver.model.runs.Environment
import org.eclipse.apoapsis.ortserver.model.runs.Identifier
import org.eclipse.apoapsis.ortserver.model.runs.advisor.AdvisorConfiguration
import org.eclipse.apoapsis.ortserver.model.runs.advisor.AdvisorResult
import org.eclipse.apoapsis.ortserver.model.runs.advisor.Vulnerability
import org.eclipse.apoapsis.ortserver.model.runs.advisor.VulnerabilityReference
import org.eclipse.apoapsis.ortserver.model.util.ListQueryParameters
import org.eclipse.apoapsis.ortserver.model.util.OrderDirection
import org.eclipse.apoapsis.ortserver.model.util.OrderField

import org.jetbrains.exposed.sql.Database

@Suppress("LargeClass")
class VulnerabilityServiceTest : WordSpec() {
    private val dbExtension = extension(DatabaseTestExtension())

    private lateinit var db: Database
    private lateinit var fixtures: Fixtures

    init {
        beforeEach {
            db = dbExtension.db
            fixtures = dbExtension.fixtures
        }

        "listForOrtRunId" should {
            "return the vulnerabilities for the given ORT run ID" {
                val service = VulnerabilityService(db)

                val vulnerabilities = createVulnerabilities(
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                        listOf("CVE-2021-45046"),
                        listOf(10.0)
                    ),
                    Triple(
                        Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6"),
                        listOf("CVE-2018-14721"),
                        listOf(4.2)
                    )
                )

                val advisorResult = createAdvisorResults(vulnerabilities)
                val ortRun = createVulnerabilityEntries(advisorResult)

                val results = service.listForOrtRunId(ortRun.id).data

                results shouldHaveSize 2

                with(results[0]) {
                    with(vulnerability) {
                        externalId shouldBe "CVE-2021-45046"
                        summary shouldBe "A vulnerability"
                        description shouldBe "A description"
                        references shouldHaveSize 1
                        references.first().severity shouldBe "10.0"
                    }

                    with(identifier) {
                        type shouldBe "Maven"
                        namespace shouldBe "org.apache.logging.log4j"
                        name shouldBe "log4j-core"
                        version shouldBe "2.14.0"
                    }
                }

                with(results[1]) {
                    with(vulnerability) {
                        externalId shouldBe "CVE-2018-14721"
                        summary shouldBe "A vulnerability"
                        description shouldBe "A description"
                        references shouldHaveSize 1
                        references.first().severity shouldBe "4.2"
                    }

                    with(identifier) {
                        type shouldBe "Maven"
                        namespace shouldBe "com.fasterxml.jackson.core"
                        name shouldBe "jackson-databind"
                        version shouldBe "2.9.6"
                    }
                }
            }

            "return multiple vulnerabilities and references for a package" {
                val service = VulnerabilityService(db)

                val vulnerabilities = createVulnerabilities(
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                        listOf("CVE-2021-45046", "CVE-2024-31573"),
                        listOf(10.0, 9.0)
                    )
                )

                val advisorResult = createAdvisorResults(vulnerabilities)
                val ortRun = createVulnerabilityEntries(advisorResult)

                val results = service.listForOrtRunId(ortRun.id)

                results.data shouldHaveSize 2
                results.totalCount shouldBe 2

                with(results.data) {
                    with(this[0]) {
                        with(vulnerability) {
                            externalId shouldBe "CVE-2021-45046"
                            summary shouldBe "A vulnerability"
                            description shouldBe "A description"
                            references shouldHaveSize 2
                            references[0].severity shouldBe "10.0"
                            references[1].severity shouldBe "9.0"
                        }

                        with(identifier) {
                            type shouldBe "Maven"
                            namespace shouldBe "org.apache.logging.log4j"
                            name shouldBe "log4j-core"
                            version shouldBe "2.14.0"
                        }
                    }

                    with(this[1]) {
                        with(vulnerability) {
                            externalId shouldBe "CVE-2024-31573"
                            summary shouldBe "A vulnerability"
                            description shouldBe "A description"
                            references shouldHaveSize 2
                            references[0].severity shouldBe "10.0"
                            references[1].severity shouldBe "9.0"
                        }
                    }
                }
            }

            "apply the parameters to the vulnerability result, not to the references" {
                val service = VulnerabilityService(db)

                val vulnerabilities = createVulnerabilities(
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                        listOf("CVE-2021-45046", "CVE-2024-31573"),
                        listOf(10.0, 9.0)
                    ),
                    Triple(
                        Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6"),
                        listOf("CVE-2018-14721", "CVE-2018-14722", "CVE-2018-14723"),
                        listOf(4.2, 1.2, 3.4)
                    )
                )

                val advisorResult = createAdvisorResults(vulnerabilities)
                val ortRun = createVulnerabilityEntries(advisorResult)

                val result = service.listForOrtRunId(
                    ortRun.id,
                    ListQueryParameters(listOf(OrderField("externalId", OrderDirection.ASCENDING)), limit = 1)
                )

                result.data shouldHaveSize 1
                result.totalCount shouldBe 5

                with(result.data.first()) {
                    vulnerability.externalId shouldBe "CVE-2018-14721"
                    vulnerability.references shouldHaveSize 3
                }
            }

            "return an empty list if an ORT run has no vulnerable packages" {
                val service = VulnerabilityService(db)

                val ortRun = createVulnerabilityEntries(emptyMap())

                val results = service.listForOrtRunId(ortRun.id).data

                results should beEmpty()
            }

            "return the overall rating for vulnerabilities" {
                val service = VulnerabilityService(db)

                val runId = fixtures.createOrtRun().id

                val references1 = listOf(
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "MEDIUM",
                        score = 4.2f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    ),
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "LOW",
                        score = 1.2f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    )
                )

                val references2 = listOf(
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "HIGH",
                        score = 8.9f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    ),
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "CRITICAL",
                        score = 10.0f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    )
                )

                val vulnerabilities = mapOf(
                    Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6") to
                            listOf(
                                Vulnerability(
                                    externalId = "CVE-2018-14721",
                                    summary = "A vulnerability",
                                    description = "A description",
                                    references = references1
                                )
                            ),
                    Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0") to
                            listOf(
                                Vulnerability(
                                    externalId = "CVE-2022-14345",
                                    summary = "A vulnerability",
                                    description = "A description",
                                    references = references2
                                )
                            )
                )

                val advJobId = fixtures.createAdvisorJob(
                    ortRunId = runId,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJobId,
                    createAdvisorResults(vulnerabilities)
                )

                val results = service.listForOrtRunId(runId)

                results.data.size shouldBe 2

                with(results.data.first()) {
                    vulnerability.externalId shouldBe "CVE-2018-14721"
                    vulnerability.references shouldContainExactlyInAnyOrder references1
                    rating shouldBe VulnerabilityRating.MEDIUM
                }

                with(results.data.last()) {
                    vulnerability.externalId shouldBe "CVE-2022-14345"
                    vulnerability.references shouldContainExactlyInAnyOrder references2
                    rating shouldBe VulnerabilityRating.CRITICAL
                }
            }
        }

        "countForOrtRunId" should {
            "return count of vulnerabilities found in an ORT run" {
                val service = VulnerabilityService(db)

                val vulnerabilities = createVulnerabilities(
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                        listOf("CVE-2018-14721", "CVE-2018-14722", "CVE-2021-45046", "CVE-2024-31573"),
                        listOf(4.2, 1.2, 10.0, 9.0)
                    )
                )

                val advisorResult = createAdvisorResults(vulnerabilities)
                val ortRun = createVulnerabilityEntries(advisorResult)

                service.countForOrtRunIds(ortRun.id) shouldBe 4
            }

            "return count of unique vulnerabilities found in ORT runs" {
                val service = VulnerabilityService(db)

                val repositoryId = fixtures.createRepository().id

                val vulnerabilities = createVulnerabilities(
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                        listOf("CVE-2018-14721", "CVE-2018-14722", "CVE-2021-45046", "CVE-2024-31573"),
                        listOf(4.2, 1.2, 10.0, 9.0)
                    ),
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-api", "2.14.0"),
                        listOf("CVE-2018-14721"),
                        listOf(4.2, 1.2, 10.0, 9.0)
                    )
                )

                val advisorResult = createAdvisorResults(vulnerabilities)
                val ortRun1Id = createVulnerabilityEntries(advisorResult, repositoryId).id
                val ortRun2Id = createVulnerabilityEntries(advisorResult, repositoryId).id

                service.countForOrtRunIds(ortRun1Id, ortRun2Id) shouldBe 5
            }
        }

        "listForOrtRuns" should {
            "only accumulate data from specified runs" {
                val service = VulnerabilityService(db)

                val repo1Id = fixtures.createRepository().id
                val repo2Id = fixtures.createRepository(url = "https://example.com/repo2.git").id
                val repo3Id = fixtures.createRepository(url = "https://example.com/repo3.git").id
                val run1Id = fixtures.createOrtRun(repo1Id).id
                val run2Id = fixtures.createOrtRun(repo2Id).id
                val run3Id = fixtures.createOrtRun(repo3Id).id

                val advisorResults = createAdvisorResults(
                    createVulnerabilities(
                        Triple(
                            Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                            listOf("CVE-2018-14721", "CVE-2018-14722", "CVE-2021-45046", "CVE-2024-31573"),
                            listOf(4.2, 1.2, 10.0, 9.0)
                        )
                    )
                )

                val advJob1Id = fixtures.createAdvisorJob(
                    ortRunId = run1Id,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJob1Id,
                    advisorResults
                )

                val advJob2Id = fixtures.createAdvisorJob(
                    ortRunId = run2Id,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJob2Id,
                    advisorResults
                )

                val advJob3Id = fixtures.createAdvisorJob(
                    ortRunId = run3Id,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJob3Id,
                    advisorResults
                )

                val results = service.listForOrtRuns(listOf(run1Id, run3Id))

                results.totalCount shouldBe 4

                with(results.data) {
                    forEach {
                        it.repositoriesCount shouldBe 2
                        it.ortRunIds shouldBe listOf(run1Id, run3Id)
                    }
                }
            }

            "return overall ratings for vulnerabilities and allow sorting by rating" {
                val service = VulnerabilityService(db)

                val repoId = fixtures.createRepository().id
                val runId = fixtures.createOrtRun(repoId).id

                val references1 = listOf(
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "MEDIUM",
                        score = 4.2f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    ),
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "LOW",
                        score = 1.2f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    ),
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "CRITICAL",
                        score = 10.0f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    ),
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "HIGH",
                        score = 8.9f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    )
                )

                val references2 = listOf(
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "MEDIUM",
                        score = 4.2f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    ),
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "LOW",
                        score = 1.2f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    ),
                    VulnerabilityReference(
                        url = "https://example.com",
                        scoringSystem = "CVSS",
                        severity = "LOW",
                        score = 3.4f,
                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                    )
                )

                val vulnerabilities = mapOf(
                    Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6") to
                            listOf(
                                Vulnerability(
                                    externalId = "CVE-2018-14721",
                                    summary = "A vulnerability",
                                    description = "A description",
                                    references = references1
                                )
                            ),
                    Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0") to
                    listOf(
                        Vulnerability(
                            externalId = "CVE-2018-14721",
                            summary = "A vulnerability",
                            description = "A description",
                            references = references2
                        )
                    )
                )

                val advJobId = fixtures.createAdvisorJob(
                    ortRunId = runId,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJobId,
                    createAdvisorResults(vulnerabilities)
                )

                val results = service.listForOrtRuns(
                    listOf(runId),
                    ListQueryParameters(listOf(OrderField("rating", OrderDirection.DESCENDING)))
                )

                results.totalCount shouldBe 2

                with(results.data) {
                    with(first()) {
                        vulnerability.references should containExactlyInAnyOrder(references1)
                        rating shouldBe VulnerabilityRating.CRITICAL
                    }

                    with(last()) {
                        vulnerability.references should containExactlyInAnyOrder(references2)
                        rating shouldBe VulnerabilityRating.MEDIUM
                    }
                }
            }

            "allow sorting by repositories count and external id" {
                val service = VulnerabilityService(db)

                val repo1Id = fixtures.createRepository().id
                val repo2Id = fixtures.createRepository(url = "https://example.com/repo2.git").id
                val repo3Id = fixtures.createRepository(url = "https://example.com/repo3.git").id

                val identifier1 = Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6")
                val severities = listOf(4.2, 1.2, 3.4)

                val run1Id = fixtures.createOrtRun(repo1Id).id
                val run2Id = fixtures.createOrtRun(repo2Id).id
                val run3Id = fixtures.createOrtRun(repo3Id).id

                val advJob1Id = fixtures.createAdvisorJob(
                    ortRunId = run1Id,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJob1Id,
                    createAdvisorResults(
                        createVulnerabilities(
                            Triple(
                                identifier1,
                                listOf("CVE-2018-14721", "CVE-2022-22965", "CVE-2019-22967"),
                                severities
                            )
                        )
                    )
                )

                val advJob2Id = fixtures.createAdvisorJob(
                    ortRunId = run2Id,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJob2Id,
                    createAdvisorResults(
                        createVulnerabilities(
                            Triple(
                                identifier1,
                                listOf("CVE-2018-14721", "CVE-2022-22966"),
                                severities
                            )
                        )
                    )
                )

                val advJob3Id = fixtures.createAdvisorJob(
                    ortRunId = run3Id,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJob3Id,
                    createAdvisorResults(
                        createVulnerabilities(
                            Triple(
                                identifier1,
                                listOf("CVE-2018-14721", "CVE-2022-22965", "CVE-2022-22966"),
                                severities
                            )
                        )
                    )
                )

                val results = service.listForOrtRuns(
                    listOf(run1Id, run2Id, run3Id),
                    ListQueryParameters(
                        listOf(
                            OrderField("repositoriesCount", OrderDirection.DESCENDING),
                            OrderField("externalId", OrderDirection.DESCENDING)
                        )
                    )
                )

                results.totalCount shouldBe 4

                with(results.data[0]) {
                    repositoriesCount shouldBe 3
                    vulnerability.externalId shouldBe "CVE-2018-14721"
                }

                with(results.data[1]) {
                    repositoriesCount shouldBe 2
                    vulnerability.externalId shouldBe "CVE-2022-22966"
                }

                with(results.data[2]) {
                    repositoriesCount shouldBe 2
                    vulnerability.externalId shouldBe "CVE-2022-22965"
                }

                with(results.data[3]) {
                    repositoriesCount shouldBe 1
                    vulnerability.externalId shouldBe "CVE-2019-22967"
                }
            }

            "allow sorting by identifier" {
                val service = VulnerabilityService(db)

                val repoId = fixtures.createRepository().id
                val runId = fixtures.createOrtRun(repoId).id

                val externalIds = listOf("CVE-2022-22965")
                val severities = listOf(4.2, 1.2, 10.0, 8.9)

                val advJobId = fixtures.createAdvisorJob(
                    ortRunId = runId,
                    configuration = AdvisorJobConfiguration(config = advisorConfig())
                ).id
                fixtures.createAdvisorRun(
                    advJobId,
                    createAdvisorResults(
                        createVulnerabilities(
                            Triple(
                                Identifier("NPM", "", "which", "2.0.2"),
                                externalIds,
                                severities
                            ),
                            Triple(
                                Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6"),
                                externalIds,
                                severities
                            ),
                            Triple(
                                Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                                externalIds,
                                severities
                            ),
                            Triple(
                                Identifier("Maven", "com.fasterxml.jackson.core", "jackson-annotations", "2.17.1"),
                                externalIds,
                                severities
                            ),
                            Triple(
                                Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.5"),
                                externalIds,
                                severities
                            ),
                        )
                    )
                )

                val results = service.listForOrtRuns(
                    listOf(runId),
                    ListQueryParameters(
                        listOf(
                            OrderField("identifier", OrderDirection.ASCENDING)
                        )
                    )
                )

                results.totalCount shouldBe 5

                results.data[0].identifier shouldBe
                        Identifier("Maven", "com.fasterxml.jackson.core", "jackson-annotations", "2.17.1")
                results.data[1].identifier shouldBe
                        Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6")
                results.data[2].identifier shouldBe
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0")
                results.data[3].identifier shouldBe Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.5")
                results.data[4].identifier shouldBe Identifier("NPM", "", "which", "2.0.2")
            }
        }

        "countByRatingForOrtRunIds" should {
            "return the counts per rating for vulnerabilities found in ORT runs" {
                val service = VulnerabilityService(db)

                val repositoryId = fixtures.createRepository().id

                val identifier1 = Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0")
                val identifier2 = Identifier("Maven", "org.apache.logging.log4j", "log4j-api", "2.14.0")

                val commonVulnerability = identifier1 to
                        listOf(
                            Vulnerability(
                                externalId = "CVE-2022-2345",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "LOW",
                                        score = 1.1f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                        )
                )

                val advisorResult1 = createAdvisorResults(
                    mapOf(
                        commonVulnerability,
                        identifier2 to listOf(
                            Vulnerability(
                                externalId = "CVE-2020-5678",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "MEDIUM",
                                        score = 4.5f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                            ),
                            Vulnerability(
                                externalId = "CVE-2020-5678",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "HIGH",
                                        score = 8.5f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                            )
                        )
                    )
                )

                val advisorResult2 = createAdvisorResults(
                    mapOf(
                        commonVulnerability,
                        identifier2 to listOf(
                            Vulnerability(
                                externalId = "CVE-2022-1234",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "random",
                                        score = 4.4f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    ),
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "MEDIUM",
                                        score = 4.3f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                            ),
                            Vulnerability(
                                externalId = "CVE-2019-4567",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "CRITICAL",
                                        score = 9.5f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                            ),
                            Vulnerability(
                                externalId = "CVE-2024-1234",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "Track",
                                        score = null,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                            )
                        )
                    )
                )

                val ortRun1Id = createVulnerabilityEntries(advisorResult1, repositoryId).id
                val ortRun2Id = createVulnerabilityEntries(advisorResult2, repositoryId).id

                val ratingsToCounts = service.countByRatingForOrtRunIds(ortRun1Id, ortRun2Id)

                ratingsToCounts.map.size shouldBe VulnerabilityRating.entries.size
                ratingsToCounts.map.keys shouldContainExactlyInAnyOrder VulnerabilityRating.entries
                ratingsToCounts.getCount(VulnerabilityRating.CRITICAL) shouldBe 1
                ratingsToCounts.getCount(VulnerabilityRating.HIGH) shouldBe 1
                ratingsToCounts.getCount(VulnerabilityRating.MEDIUM) shouldBe 2
                ratingsToCounts.getCount(VulnerabilityRating.LOW) shouldBe 1
                ratingsToCounts.getCount(VulnerabilityRating.NONE) shouldBe 1
            }

            "return counts by rating that sum up to the count returned by countForOrtRunIds" {
                val service = VulnerabilityService(db)

                val repositoryId = fixtures.createRepository().id

                val identifier1 = Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0")
                val identifier2 = Identifier("Maven", "org.apache.logging.log4j", "log4j-api", "2.14.0")

                val commonVulnerability = identifier1 to
                        listOf(
                            Vulnerability(
                                externalId = "CVE-2022-2345",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "LOW",
                                        score = 1.1f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                            )
                        )

                val advisorResult1 = createAdvisorResults(
                    mapOf(
                        commonVulnerability,
                        identifier2 to listOf(
                            Vulnerability(
                                externalId = "CVE-2020-5678",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "MEDIUM",
                                        score = 4.5f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                            )
                        )
                    )
                )

                val advisorResult2 = createAdvisorResults(
                    mapOf(
                        commonVulnerability,
                        identifier1 to listOf(
                            Vulnerability(
                                externalId = "CVE-2019-1234",
                                summary = "A vulnerability",
                                description = "A description",
                                references = listOf(
                                    VulnerabilityReference(
                                        url = "https://example.com",
                                        scoringSystem = "CVSS",
                                        severity = "HIGH",
                                        score = 4.5f,
                                        vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    )
                                )
                            )
                        )
                    )
                )

                val ortRun1Id = createVulnerabilityEntries(advisorResult1, repositoryId).id
                val ortRun2Id = createVulnerabilityEntries(advisorResult2, repositoryId).id

                val ratingsToCounts = service.countByRatingForOrtRunIds(ortRun1Id, ortRun2Id)
                val count = service.countForOrtRunIds(ortRun1Id, ortRun2Id)

                ratingsToCounts.map.values.sum() shouldBe count
            }

            "include counts of 0 for ratings that are not found in vulnerabilities" {
                val service = VulnerabilityService(db)

                val repositoryId = fixtures.createRepository().id
                val ortRunId = fixtures.createOrtRun(repositoryId).id

                val ratingsToCounts = service.countByRatingForOrtRunIds(ortRunId)

                ratingsToCounts.map.keys shouldContainExactlyInAnyOrder VulnerabilityRating.entries
                ratingsToCounts.map.values.sum() shouldBe 0
            }
        }
    }

    /**
     * Create an ORT run with an advisor result containing vulnerabilities in the database.
     */
    private fun createVulnerabilityEntries(
        advisorResults: Map<Identifier, List<AdvisorResult>>,
        repositoryId: Long = fixtures.createRepository().id
    ): OrtRun {
        val ortRun = fixtures.createOrtRun(
            repositoryId = repositoryId,
            revision = "revision",
            jobConfigurations = JobConfigurations()
        )

        val advisorJob = fixtures.createAdvisorJob(
            ortRunId = ortRun.id,
            configuration = AdvisorJobConfiguration(
                config = mapOf(
                    "VulnerableCode" to PluginConfiguration(
                        options = mapOf("serverUrl" to "https://public.vulnerablecode.io"),
                        secrets = mapOf("apiKey" to "key")
                    )
                )
            )
        )

        fixtures.advisorRunRepository.create(
            advisorJobId = advisorJob.id,
            startTime = Clock.System.now().toDatabasePrecision(),
            endTime = Clock.System.now().toDatabasePrecision(),
            environment = Environment(
                ortVersion = "1.0",
                javaVersion = "11.0.16",
                os = "Linux",
                processors = 8,
                maxMemory = 8321499136,
                variables = emptyMap(),
                toolVersions = emptyMap()
            ),
            config = AdvisorConfiguration(
                config = mapOf(
                    "VulnerableCode" to PluginConfiguration(
                        options = mapOf("serverUrl" to "https://public.vulnerablecode.io"),
                        secrets = mapOf("apiKey" to "key")
                    )
                )
            ),
            results = advisorResults,
        )

        return ortRun
    }

    /**
     * Create a simple vulnerability using the identifier, externalIds, and severities.
     */
    private fun createVulnerabilities(vararg vulnerabilities: Triple<Identifier, List<String>, List<Double>>) =
        vulnerabilities.associate { (identifier, externalIds, severities) ->
            identifier to externalIds.map { externalId ->
                Vulnerability(
                    externalId = externalId,
                    summary = "A vulnerability",
                    description = "A description",
                    references = severities.map { severity ->
                        VulnerabilityReference(
                            url = "https://example.com",
                            scoringSystem = "CVSS",
                            severity = severity.toString(),
                            score = severity.toFloat(),
                            vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                        )
                    }
                )
            }
        }

    private fun createAdvisorResults(vulnerabilities: Map<Identifier, List<Vulnerability>>) =
        vulnerabilities.mapValues { (_, vulnerabilities) ->
            listOf(
                AdvisorResult(
                    advisorName = "advisor",
                    capabilities = listOf("vulnerabilities"),
                    startTime = Clock.System.now().toDatabasePrecision(),
                    endTime = Clock.System.now().toDatabasePrecision(),
                    issues = emptyList(),
                    defects = emptyList(),
                    vulnerabilities = vulnerabilities
                )
            )
        }

    private fun advisorConfig() = mapOf(
        "VulnerableCode" to PluginConfiguration(
            options = mapOf("serverUrl" to "https://public.vulnerablecode.io"),
            secrets = mapOf("apiKey" to "key")
        )
    )
}
