/*
 * Copyright (C) 2024 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.services

import io.kotest.core.spec.style.WordSpec
import io.kotest.matchers.collections.beEmpty
import io.kotest.matchers.collections.shouldHaveSize
import io.kotest.matchers.should
import io.kotest.matchers.shouldBe

import kotlinx.datetime.Clock

import org.eclipse.apoapsis.ortserver.dao.test.DatabaseTestExtension
import org.eclipse.apoapsis.ortserver.dao.test.Fixtures
import org.eclipse.apoapsis.ortserver.dao.utils.toDatabasePrecision
import org.eclipse.apoapsis.ortserver.model.AdvisorJobConfiguration
import org.eclipse.apoapsis.ortserver.model.JobConfigurations
import org.eclipse.apoapsis.ortserver.model.OrtRun
import org.eclipse.apoapsis.ortserver.model.PluginConfiguration
import org.eclipse.apoapsis.ortserver.model.runs.Environment
import org.eclipse.apoapsis.ortserver.model.runs.Identifier
import org.eclipse.apoapsis.ortserver.model.runs.advisor.AdvisorConfiguration
import org.eclipse.apoapsis.ortserver.model.runs.advisor.AdvisorResult
import org.eclipse.apoapsis.ortserver.model.runs.advisor.Vulnerability
import org.eclipse.apoapsis.ortserver.model.runs.advisor.VulnerabilityReference
import org.eclipse.apoapsis.ortserver.model.util.ListQueryParameters
import org.eclipse.apoapsis.ortserver.model.util.OrderDirection
import org.eclipse.apoapsis.ortserver.model.util.OrderField

import org.jetbrains.exposed.sql.Database

class VulnerabilityServiceTest : WordSpec() {
    private val dbExtension = extension(DatabaseTestExtension())

    private lateinit var db: Database
    private lateinit var fixtures: Fixtures

    init {
        beforeEach {
            db = dbExtension.db
            fixtures = dbExtension.fixtures
        }

        "listForOrtRunId" should {
            "return the vulnerabilities for the given ORT run ID" {
                val service = VulnerabilityService(db)

                val vulnerabilities = createVulnerabilities(
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                        listOf("CVE-2021-45046"),
                        listOf(10.0)
                    ),
                    Triple(
                        Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6"),
                        listOf("CVE-2018-14721"),
                        listOf(4.2)
                    )
                )

                val advisorResult = createAdvisorResults(vulnerabilities)
                val ortRun = createVulnerabilityEntries(advisorResult)

                val results = service.listForOrtRunId(ortRun.id).data

                results shouldHaveSize 2

                with(results[0]) {
                    with(vulnerability) {
                        externalId shouldBe "CVE-2021-45046"
                        summary shouldBe "A vulnerability"
                        description shouldBe "A description"
                        references shouldHaveSize 1
                        references.first().severity shouldBe "10.0"
                    }

                    with(identifier) {
                        type shouldBe "Maven"
                        namespace shouldBe "org.apache.logging.log4j"
                        name shouldBe "log4j-core"
                        version shouldBe "2.14.0"
                    }
                }

                with(results[1]) {
                    with(vulnerability) {
                        externalId shouldBe "CVE-2018-14721"
                        summary shouldBe "A vulnerability"
                        description shouldBe "A description"
                        references shouldHaveSize 1
                        references.first().severity shouldBe "4.2"
                    }

                    with(identifier) {
                        type shouldBe "Maven"
                        namespace shouldBe "com.fasterxml.jackson.core"
                        name shouldBe "jackson-databind"
                        version shouldBe "2.9.6"
                    }
                }
            }

            "return multiple vulnerabilities and references for a package" {
                val service = VulnerabilityService(db)

                val vulnerabilities = createVulnerabilities(
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                        listOf("CVE-2021-45046", "CVE-2024-31573"),
                        listOf(10.0, 9.0)
                    )
                )

                val advisorResult = createAdvisorResults(vulnerabilities)
                val ortRun = createVulnerabilityEntries(advisorResult)

                val results = service.listForOrtRunId(ortRun.id)

                results.data shouldHaveSize 2
                results.totalCount shouldBe 2

                with(results.data) {
                    with(this[0]) {
                        with(vulnerability) {
                            externalId shouldBe "CVE-2021-45046"
                            summary shouldBe "A vulnerability"
                            description shouldBe "A description"
                            references shouldHaveSize 2
                            references[0].severity shouldBe "10.0"
                            references[1].severity shouldBe "9.0"
                        }

                        with(identifier) {
                            type shouldBe "Maven"
                            namespace shouldBe "org.apache.logging.log4j"
                            name shouldBe "log4j-core"
                            version shouldBe "2.14.0"
                        }
                    }

                    with(this[1]) {
                        with(vulnerability) {
                            externalId shouldBe "CVE-2024-31573"
                            summary shouldBe "A vulnerability"
                            description shouldBe "A description"
                            references shouldHaveSize 2
                            references[0].severity shouldBe "10.0"
                            references[1].severity shouldBe "9.0"
                        }
                    }
                }
            }

            "apply the parameters to the vulnerability result, not to the references" {
                val service = VulnerabilityService(db)

                val vulnerabilities = createVulnerabilities(
                    Triple(
                        Identifier("Maven", "org.apache.logging.log4j", "log4j-core", "2.14.0"),
                        listOf("CVE-2021-45046", "CVE-2024-31573"),
                        listOf(10.0, 9.0)
                    ),
                    Triple(
                        Identifier("Maven", "com.fasterxml.jackson.core", "jackson-databind", "2.9.6"),
                        listOf("CVE-2018-14721", "CVE-2018-14722", "CVE-2018-14723"),
                        listOf(4.2, 1.2, 3.4)
                    )
                )

                val advisorResult = createAdvisorResults(vulnerabilities)
                val ortRun = createVulnerabilityEntries(advisorResult)

                val result = service.listForOrtRunId(
                    ortRun.id,
                    ListQueryParameters(listOf(OrderField("external_id", OrderDirection.ASCENDING)), limit = 1)
                )

                result.data shouldHaveSize 1
                result.totalCount shouldBe 5

                with(result.data.first()) {
                    vulnerability.externalId shouldBe "CVE-2018-14721"
                    vulnerability.references shouldHaveSize 3
                }
            }

            "return an empty list if an ORT run has no vulnerable packages" {
                val service = VulnerabilityService(db)

                val ortRun = createVulnerabilityEntries(emptyMap())

                val results = service.listForOrtRunId(ortRun.id).data

                results should beEmpty()
            }
        }
    }

    /**
     * Create an ORT run with an advisor result containing vulnerabilities in the database.
     */
    private fun createVulnerabilityEntries(advisorResults: Map<Identifier, List<AdvisorResult>>): OrtRun {
        val repository = fixtures.createRepository()

        val ortRun = fixtures.createOrtRun(
            repositoryId = repository.id,
            revision = "revision",
            jobConfigurations = JobConfigurations()
        )

        val advisorJob = fixtures.createAdvisorJob(
            ortRunId = ortRun.id,
            configuration = AdvisorJobConfiguration(
                config = mapOf(
                    "VulnerableCode" to PluginConfiguration(
                        options = mapOf("serverUrl" to "https://public.vulnerablecode.io"),
                        secrets = mapOf("apiKey" to "key")
                    )
                )
            )
        )

        fixtures.advisorRunRepository.create(
            advisorJobId = advisorJob.id,
            startTime = Clock.System.now().toDatabasePrecision(),
            endTime = Clock.System.now().toDatabasePrecision(),
            environment = Environment(
                ortVersion = "1.0",
                javaVersion = "11.0.16",
                os = "Linux",
                processors = 8,
                maxMemory = 8321499136,
                variables = emptyMap(),
                toolVersions = emptyMap()
            ),
            config = AdvisorConfiguration(
                config = mapOf(
                    "VulnerableCode" to PluginConfiguration(
                        options = mapOf("serverUrl" to "https://public.vulnerablecode.io"),
                        secrets = mapOf("apiKey" to "key")
                    )
                )
            ),
            results = advisorResults,
        )

        return ortRun
    }

    /**
     * Create a simple vulnerability using the identifier, externalIds, and severities.
     */
    private fun createVulnerabilities(vararg vulnerabilities: Triple<Identifier, List<String>, List<Double>>) =
        vulnerabilities.associate { (identifier, externalIds, severities) ->
            identifier to externalIds.map { externalId ->
                Vulnerability(
                    externalId = externalId,
                    summary = "A vulnerability",
                    description = "A description",
                    references = severities.map { severity ->
                        VulnerabilityReference(
                            url = "https://example.com",
                            scoringSystem = "CVSS",
                            severity = severity.toString(),
                            score = severity.toFloat(),
                            vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                        )
                    }
                )
            }
        }

    private fun createAdvisorResults(vulnerabilities: Map<Identifier, List<Vulnerability>>) =
        vulnerabilities.mapValues { (_, vulnerabilities) ->
            listOf(
                AdvisorResult(
                    advisorName = "advisor",
                    capabilities = listOf("vulnerabilities"),
                    startTime = Clock.System.now().toDatabasePrecision(),
                    endTime = Clock.System.now().toDatabasePrecision(),
                    issues = emptyList(),
                    defects = emptyList(),
                    vulnerabilities = vulnerabilities
                )
            )
        }
}
