/*
 * Copyright (C) 2025 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.services.config

import org.eclipse.apoapsis.ortserver.model.ReportNameMapping
import org.eclipse.apoapsis.ortserver.model.ReporterAsset

/**
 * A data class defining a report that is supported by an ORT Server instance. An instance specifies the concrete
 * reporter plugin to generate this report. It also allows declaring assets that must be obtained before starting the
 * report generation.
 */
data class ReportDefinition(
    /**
     * The ID of the reporter plugin that generates this report.
     */
    val pluginId: String,

    /**
     * A list with [ReporterAsset]s pointing to files that must be downloaded before the generation of this report is
     * started.
     */
    val assetFiles: List<ReporterAsset> = emptyList(),

    /**
     * A list with [ReporterAsset]s pointing to directories that must be downloaded before the generation of this
     * report is started. This is analogous to [assetFiles], but all the files contained in the specified directory are
     * downloaded.
     */
    val assetDirectories: List<ReporterAsset> = emptyList(),

    /**
     * An optional name mapping for this report type. This can be used to override the default names of the files
     * generated by this report.
     */
    val nameMapping: ReportNameMapping? = null
)

/**
 * A data class that represents the configuration of the Reporter worker.
 *
 * An instance of this class is part of the [AdminConfig]. It defines the reports users can request from this ORT
 * Server instance, together with some other configuration options required during report generation.
 *
 * When it comes to report generation, ORT Server follows a slightly different approach than ORT. ORT's reporter
 * plugins are rather technical and focus on the concrete output format. For instance, in order to generate a
 * disclosure document in PDF format, one has to select the PDF reporter plugin and specify a template for the
 * disclosure report. ORT Server in contrast allows defining a "PDF disclosure document" report, which under the hood
 * maps to the PDF reporter plugin. This is the purpose of the [ReportDefinition] objects managed by this class.
 */
data class ReporterConfig(
    /**
     * A [Map] containing the definitions of all reports supported by this ORT Server instance. The keys are the logic
     * names under which the reports can be accessed.
     */
    private val reportDefinitions: Map<String, ReportDefinition>,

    /**
     * The path to the how-to-fix Kotlin script which is resolved from the configuration source. This Kotlin script
     * will be used to instantiate an instance of HowToFixTextProvider, which injects how-to-fix texts for ORT issues.
     */
    val howToFixTextProviderFile: String,

    /**
     * An optional path to a configuration directory containing custom license texts. If defined, all files from this
     * directory are downloaded and made available via a `DefaultLicenseTextProvider` instance.
     */
    val customLicenseTextDir: String? = null
) {
    /**
     * A [Map] with the existing report definitions using lowercase names as keys. This is used to simplify
     * case-insensitive lookups of report definitions by name.
     */
    private val lowercaseReportDefinitions = reportDefinitions.mapKeys { it.key.lowercase() }

    /** A set with the names of all existing report definitions. */
    val reportDefinitionNames: Set<String>
        get() = reportDefinitions.keys

    /**
     * Return the [ReportDefinition] for the report with the given [name] or *null* if no such report is defined. The
     * names of report definitions are case-insensitive.
     */
    fun getReportDefinition(name: String): ReportDefinition? =
        lowercaseReportDefinitions[name.lowercase()]
}
