/*
 * Copyright (C) 2023 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.workers.common.env

import java.io.PrintWriter

import org.eclipse.apoapsis.ortserver.workers.common.env.ConfigFileBuilder.Companion.printProxySettingsFromSystemProperties
import org.eclipse.apoapsis.ortserver.workers.common.env.definition.MavenDefinition

/**
 * A specialized generator class for Maven's _settings.xml_ configuration file.
 *
 * In the context of ORT Server, only the part of _settings.xml_ is relevant which defines servers and their
 * credentials.
 *
 * See https://maven.apache.org/settings.html.
 */
class MavenSettingsGenerator : EnvironmentConfigGenerator<MavenDefinition> {
    companion object {
        /** The name of the file that is generated by this generator. */
        private const val TARGET_NAME = ".m2/settings.xml"

        /** The schema location for Maven's settings.xml. */
        private const val SCHEMA = "\"http://maven.apache.org/SETTINGS/1.1.0 " +
                "http://maven.apache.org/xsd/settings-1.1.0.xsd\""

        /**
         * Print XML content with an opening and closing [tag] and the given [content].
         */
        private fun PrintWriter.printTag(tag: String, content: String) {
            println("<$tag>$content</$tag>".prependIndent(INDENT_12_SPACES))
        }

        private fun PrintWriter.printSingleProxy(
            host: String, port: String, protocol: String, nonProxyHosts: String?
        ) {
            println("<proxy>".prependIndent(INDENT_8_SPACES))
            printTag("id", "$protocol-proxy")
            printTag("active", "true")
            printTag("protocol", protocol)
            printTag("host", host)
            printTag("port", port)
            nonProxyHosts?.let { printTag("nonProxyHosts", it) }

            println("</proxy>".prependIndent(INDENT_8_SPACES))
        }
    }

    override val environmentDefinitionType: Class<MavenDefinition> = MavenDefinition::class.java

    override suspend fun generate(builder: ConfigFileBuilder, definitions: Collection<MavenDefinition>) {
        builder.buildInUserHome(TARGET_NAME) {
            println("<settings xsi:schemaLocation=$SCHEMA>")
            println("<servers>".prependIndent(INDENT_4_SPACES))

            definitions.forEach { definition ->
                println("<server>".prependIndent(INDENT_8_SPACES))
                printTag("id", definition.id)
                printTag("username", builder.secretRef(definition.service.usernameSecret))
                printTag("password", builder.secretRef(definition.service.passwordSecret))
                println("</server>".prependIndent(INDENT_8_SPACES))
            }

            println("</servers>".prependIndent(INDENT_4_SPACES))

            // Having the choice to get the proxy settings either from environment variables like HTTP_PROXY or
            // from Java system like http.proxyHost, prefer the latter, because everything is already
            // in the right format required for the <proxy> section.
            printProxySettingsFromSystemProperties { proxyConfig ->
                println("<proxies>".prependIndent(INDENT_4_SPACES))
                proxyConfig.httpProxy?.let {
                    printSingleProxy(it.host, it.port, "http", proxyConfig.nonProxyHosts)
                }
                proxyConfig.httpsProxy?.let {
                    printSingleProxy(it.host, it.port, "https", proxyConfig.nonProxyHosts)
                }
                println("</proxies>".prependIndent(INDENT_4_SPACES))
            }

            println("</settings>")
        }
    }
}
