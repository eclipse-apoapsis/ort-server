/*
 * Copyright (C) 2025 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.workers.common.env

import java.io.PrintWriter

import org.eclipse.apoapsis.ortserver.config.Path
import org.eclipse.apoapsis.ortserver.workers.common.env.definition.GradleDefinition

/**
 * A specialized generator class to generate the content of the _init.gradle.kts_ file.
 *
 * See https://docs.gradle.org/current/userguide/init_scripts.html.
 */
class GradleInitGenerator : EnvironmentConfigGenerator<GradleDefinition> {
    companion object {
        /** The name of the file that is generated by this generator. */
        private const val TARGET_NAME = ".gradle/init.gradle.kts"

        private fun PrintWriter.printClosure(name: String, indentLevel: Int, body: PrintWriter.() -> Unit) {
            printlnIndent("$name {", indentLevel)
            body()
            printlnIndent("}", indentLevel)
        }

        private fun PrintWriter.printRepository(repo: GradleRepositoryEntry, indentLevel: Int) {
            printClosure("maven", indentLevel) {
                printlnIndent("url = uri(\"${repo.url}\")", indentLevel + 1)
                repo.username?.let { username ->
                    repo.password?.let { password ->
                        printClosure("credentials", indentLevel + 1) {
                            printlnIndent("username = \"$username\"", indentLevel + 2)
                            printlnIndent("password = \"$password\"", indentLevel + 2)
                        }
                    }
                }
            }
        }

        private fun PrintWriter.printlnIndent(line: String, indentLevel: Int) {
            println(line.prependIndent(INDENT_4_SPACES.repeat(indentLevel)))
        }
    }

    override val environmentDefinitionType: Class<GradleDefinition> = GradleDefinition::class.java

    override suspend fun generate(builder: ConfigFileBuilder, definitions: Collection<GradleDefinition>) {
        builder.buildInUserHome(TARGET_NAME) {
            val repositories = buildList {
                builder.adminConfig.mavenCentralMirror?.let { mirror ->
                    val isOverridden = definitions.any { it.service.url == mirror.url }
                    if (!isOverridden) {
                        add(
                            GradleRepositoryEntry(
                                mirror.url,
                                mirror.usernameSecret?.let { builder.infraSecretResolverFun(Path(it)) },
                                mirror.passwordSecret?.let { builder.infraSecretResolverFun(Path(it)) }
                            )
                        )
                    }
                }

                addAll(
                    definitions.map { definition ->
                        GradleRepositoryEntry(
                            definition.service.url,
                            builder.secretRef(definition.service.usernameSecret),
                            builder.secretRef(definition.service.passwordSecret)
                        )
                    }
                )
            }

            if (repositories.isNotEmpty()) {
                printClosure("allprojects", 0) {
                    printClosure("repositories", 1) {
                        repositories.forEach { repo -> printRepository(repo, 2) }
                    }

                    println()

                    printClosure("buildscript", 1) {
                        printClosure("repositories", 2) {
                            repositories.forEach { repo -> printRepository(repo, 3) }
                        }
                    }
                }

                println()

                printClosure("settingsEvaluated", 0) {
                    printClosure("settings.pluginManagement", 1) {
                        printClosure("repositories", 2) {
                            repositories.forEach { repo -> printRepository(repo, 3) }
                            printlnIndent("gradlePluginPortal()", 3)
                        }
                    }

                    println()

                    printClosure("settings.dependencyResolutionManagement", 1) {
                        printClosure("repositories", 2) {
                            repositories.forEach { repo -> printRepository(repo, 3) }
                        }
                    }
                }
            }
        }
    }
}

/**
 * A data class representing a Gradle repository entry.
 */
private data class GradleRepositoryEntry(
    val url: String,
    val username: String?,
    val password: String?,
)
