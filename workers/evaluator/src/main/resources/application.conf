# Copyright (C) 2023 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

configManager {
  secretProvider = ${?EVALUATOR_SECRET_PROVIDER}
  configSecretFileList = ${?EVALUATOR_SECRET_FILES}
  allowSecretsFromConfig = ${?ALLOW_SECRETS_FROM_CONFIG}

  fileProvider = ${?EVALUATOR_CONFIG_FILE_PROVIDER}
  gitHubRepositoryOwner = ${?EVALUATOR_CONFIG_GITHUB_REPOSITORY_OWNER}
  gitHubRepositoryName = ${?EVALUATOR_CONFIG_GITHUB_REPOSITORY_NAME}
}

ort {
  environmentAllowedNames = ${?ORT_ENVIRONMENT_ALLOWED_NAMES}
  environmentDenySubstrings = ${?ORT_ENVIRONMENT_DENY_SUBSTRINGS}
}

database {
  host = "localhost"
  host = ${?DB_HOST}
  port = 5432
  port = ${?DB_PORT}
  name = "ort"
  name = ${?DB_NAME}
  schema = "ort_server"
  schema = ${?DB_SCHEMA}
  username = "postgres"
  username = ${?DB_USERNAME}
  password = "postgres"
  password = ${?DB_PASSWORD}
  connectionTimeout = 30000
  connectionTimeout = ${?DB_CONNECTION_TIMEOUT}
  idleTimeout = 600000
  idleTimeout = ${?DB_IDLE_TIMEOUT}
  keepaliveTime = 0
  keepaliveTime = ${?DB_KEEPALIVE_TIME}
  maxLifetime = 1800000
  maxLifetime = ${?DB_MAX_LIFETIME}
  maximumPoolSize = 5
  maximumPoolSize = ${?DB_MAXIMUM_POOL_SIZE}
  minimumIdle = 5
  minimumIdle = ${?DB_MINIMUM_IDLE}
  sslMode = "verify-full"
  sslMode = ${?DB_SSL_MODE}
  sslCert = ${?DB_SSL_CERT}
  sslKey = ${?DB_SSL_KEY}
  sslRootCert = ${?DB_SSL_ROOT_CERT}
}

evaluator {
  receiver {
  type = "kubernetes"
  type = ${?EVALUATOR_RECEIVER_TRANSPORT_TYPE}
  serverUri = "amqp://localhost:61616"
  serverUri = ${?EVALUATOR_RECEIVER_TRANSPORT_SERVER_URI}
  queueName = "evaluator_queue"
  queueName = ${?EVALUATOR_RECEIVER_TRANSPORT_QUEUE_NAME}
  username = "username"
  username = ${?EVALUATOR_RECEIVER_TRANSPORT_USERNAME}
  password = "password"
  password = ${?EVALUATOR_RECEIVER_TRANSPORT_PASSWORD}
  }
}

orchestrator {
  sender {
  type = "activeMQ"
  type = ${?ORCHESTRATOR_SENDER_TRANSPORT_TYPE}
  serverUri = "amqp://localhost:61616"
  serverUri = ${?ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI}
  queueName = "orchestrator_queue"
  queueName = ${?ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME}
  username = "username"
  username = ${?ORCHESTRATOR_SENDER_TRANSPORT_USERNAME}
  password = "password"
  password = ${?ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD}
  }
}

fileArchiveStorage {
  name = "database"
  name = ${?FILE_ARCHIVE_STORAGE_NAME}
  namespace = "fileArchives"
  namespace = ${?FILE_ARCHIVE_STORAGE_NAMESPACE}
  inMemoryLimit = 1048576
  inMemoryLimit = ${?FILE_ARCHIVE_STORAGE_IN_MEMORY_LIMIT}
  s3AccessKey = ${?FILE_ARCHIVE_STORAGE_ACCESS_KEY}
  s3SecretKey = ${?FILE_ARCHIVE_STORAGE_SECRET_KEY}
  s3Region = ${?FILE_ARCHIVE_STORAGE_REGION}
  s3BucketName = ${?FILE_ARCHIVE_STORAGE_BUCKET_NAME}
  s3EndpointUrl = ${?FILE_ARCHIVE_STORAGE_ENDPOINT_URL}
}
