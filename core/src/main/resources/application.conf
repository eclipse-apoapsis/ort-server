# Copyright (C) 2022 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

configManager {
  secretProvider = ${?CORE_SECRET_PROVIDER}
  configSecretFileList = ${?CORE_SECRET_FILES}
  allowSecretsFromConfig = ${?ALLOW_SECRETS_FROM_CONFIG}
}

ktor {
  deployment {
    publicScheme = "http"
    publicScheme = ${?PUBLIC_SCHEME}
    publicFqdn = "localhost"
    publicFqdn = ${?PUBLIC_FQDN}
    publicPort = 8080
    publicPort = ${?PUBLIC_PORT}
    port = 8080
    port = ${?PORT}
    watch = [ classes ]
  }

  cors {
    allowedHosts = "localhost:5173,localhost:8082"
    allowedHosts = ${?UI_HOSTS}
  }

  application {
    modules = [ org.eclipse.apoapsis.ortserver.core.ApplicationKt.module ]
  }
}

jwt {
  issuer = "http://localhost:8081/realms/master"
  issuer = ${?JWT_ISSUER}
  jwksUri = "http://localhost:8081/realms/master/protocol/openid-connect/certs"
  jwksUri = ${?JWT_URI}
  audience = "ort-server"
  audience = ${?JWT_AUDIENCE}
  realm = "master"
  realm = ${?JWT_REALM}
  roleCacheLifetimeSeconds = 60
  roleCacheLifetimeSeconds = ${?JWT_ROLE_CACHE_LIFETIME}
}

keycloak {
  accessTokenUrl = "http://keycloak:8080/realms/master/protocol/openid-connect/token"
  accessTokenUrl = ${?KEYCLOAK_ACCESS_TOKEN_URL}
  apiUrl = "http://keycloak:8080/admin/realms/master"
  apiUrl = ${?KEYCLOAK_API_URL}
  clientId = "ort-server"
  clientId = ${?KEYCLOAK_CLIENT_ID}
  apiUser = "admin"
  apiUser = ${?KEYCLOAK_API_USER}
  apiSecret = "admin"
  apiSecret = ${?KEYCLOAK_API_SECRET}
  subjectClientId = "ort-server"
  subjectClientId = ${?KEYCLOAK_SUBJECT_CLIENT_ID}
  groupPrefix = ""
  groupPrefix = ${?KEYCLOAK_GROUP_PREFIX}
}

orchestrator {
  sender {
    type = "activeMQ"
    type = ${?ORCHESTRATOR_SENDER_TRANSPORT_TYPE}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI}
    namespace = "namespace"
    namespace = ${?ORCHESTRATOR_SENDER_TRANSPORT_NAMESPACE}
    queueName = "orchestrator_queue"
    queueName = ${?ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?ORCHESTRATOR_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD}
  }
}

fileListStorage {
  name = "database"
  name = ${?FILE_LIST_STORAGE_NAME}
  namespace = "fileLists"
  namespace = ${?FILE_LIST_STORAGE_NAMESPACE}
  inMemoryLimit = 1048576
  inMemoryLimit = ${?FILE_LIST_STORAGE_IN_MEMORY_LIMIT}
  azureBlobContainerName = ${?FILE_LIST_STORAGE_CONTAINER_NAME}
  azureBlobEndpointUrl = ${?FILE_LIST_STORAGE_ENDPOINT_URL}
  azureBlobStorageAccountName = ${?FILE_LIST_STORAGE_STORAGE_ACCOUNT_NAME}
  s3AccessKey = ${?FILE_LIST_STORAGE_ACCESS_KEY}
  s3SecretKey = ${?FILE_LIST_STORAGE_SECRET_KEY}
  s3Region = ${?FILE_LIST_STORAGE_REGION}
  s3BucketName = ${?FILE_LIST_STORAGE_BUCKET_NAME}
  s3EndpointUrl = ${?FILE_LIST_STORAGE_ENDPOINT_URL}
}

reportStorage {
  name = "database"
  name = ${?REPORT_STORAGE_NAME}
  namespace = "reports"
  namespace = ${?REPORT_STORAGE_NAMESPACE}
  inMemoryLimit = 1048576
  inMemoryLimit = ${?REPORT_STORAGE_IN_MEMORY_LIMIT}
  azureBlobContainerName = ${?REPORT_STORAGE_CONTAINER_NAME}
  azureBlobEndpointUrl = ${?REPORT_STORAGE_ENDPOINT_URL}
  azureBlobStorageAccountName = ${?REPORT_STORAGE_STORAGE_ACCOUNT_NAME}
  s3AccessKey = ${?REPORT_STORAGE_ACCESS_KEY}
  s3SecretKey = ${?REPORT_STORAGE_SECRET_KEY}
  s3Region = ${?REPORT_STORAGE_REGION}
  s3BucketName = ${?REPORT_STORAGE_BUCKET_NAME}
  s3EndpointUrl = ${?REPORT_STORAGE_ENDPOINT_URL}
}

logFileService {
  name = "loki"
  name = ${?LOG_FILE_PROVIDER_NAME}
  lokiServerUrl = ${?LOKI_SERVER_URL}
  lokiNamespace = ${?LOKI_NAMESPACE}
  lokiQueryLimit = ${?LOKI_QUERY_LIMIT}
  lokiUsername = ${?LOKI_USERNAME}
  lokiPassword = ${?LOKI_PASSWORD}
  lokiTenantId = ${?LOKI_TENANT_ID}
  lokiTimeoutSec = ${?LOKI_TIMEOUT_SEC}
}

micrometer {
  graphite {
    host = "localhost"
    host = ${?GRAPHITE_HOST}
    port = 2003
    port = ${?GRAPHITE_PORT}
    protocol = "PLAINTEXT"
    protocol = ${?GRAPHITE_PROTOCOL}
    step = "1m"
    step = ${?GRAPHITE_STEP}
    tagsAsPrefix = "ort-server-core"
    tagsAsPrefix = ${?GRAPHITE_PREFIX}
  }
}
