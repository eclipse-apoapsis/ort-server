{{- if and .Values.ort_server.artemis.enabled .Values.rabbitmq.enabled }}
{{- fail "ActiveMQ Artemis and Artemis cannot be enabled at the same time."}}
{{- end }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orchestrator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ort-server
  name: api-client
rules:
  - apiGroups: ["batch", "extensions"]
    resources: ["jobs"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-client
  namespace: ort-server
subjects:
  - kind: ServiceAccount
    name: orchestrator
    namespace: ort-server
roleRef:
  kind: Role
  name: api-client
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    ort-server.service: {{ .Release.Name }}-orchestrator
  name: {{ .Release.Name }}-orchestrator
spec:
  replicas: 1
  selector:
    matchLabels:
      ort-server.service: {{ .Release.Name }}-orchestrator
  serviceName: {{ .Release.Name }}-orchestrator
  template:
    metadata:
      labels:
        ort-server.service: {{ .Release.Name }}-orchestrator
    spec:
      serviceAccountName: orchestrator
      initContainers:
        # Here a `nslookup` should be used with the domains of the sub-services created by the chart:
        # ort-server-postgresql-0.ort-server-postgresql-hl.ort-server.svc.cluster.local and
        # ort-server-artemis-0.ort-server-artemis.ort-server.svc.cluster.local. Unfortunately, it seems
        # a reverse dns configuration is missing. Hence, we use 'netcat' instead to find if the required services are
        # running.
        - name: init-postgres
          image: busybox:latest
          command: [ 'sh', '-c', 'until nc -zvw10 {{ .Release.Name }}-postgresql-hl {{ .Values.keycloak.postgresql.primary.service.ports.postgresql }}; do echo waiting for postgres; sleep 2; done' ]
        {{- if .Values.ort_server.artemis.enabled }}
        - name: init-artemis
          image: busybox:latest
          command: [ 'sh', '-c', 'until nc -zvw10 {{ .Release.Name }}-artemis {{ .Values.ort_server.artemis.openWirePort }}; do echo waiting for artemis; sleep 2; done' ]
        {{- end }}
        {{- if .Values.rabbitmq.enabled }}
        - name: init-rabbitmq
          image: busybox:latest
          command: [ 'sh', '-c', 'until nc -zvw10 {{ .Release.Name }}-rabbitmq-headless {{ .Values.rabbitmq.service.ports.amqp }}; do echo waiting for rabbitmq; sleep 2; done' ]
        {{- end }}
      containers:
        - env:
            - name: DB_HOST
              value: "{{ .Release.Name }}-postgresql-hl"
            - name: DB_PORT
              value: "{{ .Values.keycloak.postgresql.primary.service.ports.postgresql }}"
            - name: DB_NAME
              value: "{{ .Values.ort_server.postgres.databaseSchema }}"
            - name: DB_SCHEMA
              value: "{{ .Values.ort_server.postgres.databaseSchema }}"
            - name: DB_USERNAME
              value: postgres
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: postgres-password
            - name: DB_SSL_MODE
              value: disable
            {{- if .Values.ort_server.artemis.enabled }}
            - name: ORCHESTRATOR_SENDER_TRANSPORT_TYPE
              value: "activeMQ"
            - name: ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI
              value: "amqp://{{ .Release.Name }}-artemis:{{ .Values.ort_server.artemis.openWirePort }}"
            - name: ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME
              value: {{ .Values.ort_server.orchestrator.queueName }}
            - name: ORCHESTRATOR_RECEIVER_TRANSPORT_TYPE
              value: "activeMQ"
            - name: ORCHESTRATOR_RECEIVER_TRANSPORT_SERVER_URI
              value: "amqp://{{ .Release.Name }}-artemis:{{ .Values.ort_server.artemis.openWirePort }}"
            - name: ORCHESTRATOR_RECEIVER_TRANSPORT_QUEUE_NAME
              value: {{ .Values.ort_server.orchestrator.queueName }}
            {{- end }}
            {{- if .Values.rabbitmq.enabled }}
            - name: ORCHESTRATOR_SENDER_TRANSPORT_TYPE
              value: "rabbitMQ"
            - name: ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI
              value: "amqp://{{ .Release.Name }}-rabbitmq-headless:{{ .Values.rabbitmq.service.ports.amqp }}"
            - name: ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME
              value: {{ .Values.ort_server.orchestrator.queueName }}
            - name: ORCHESTRATOR_SENDER_TRANSPORT_USERNAME
              value: {{ .Values.rabbitmq.auth.username }}
            - name: ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD
              value: {{ .Values.rabbitmq.auth.password }}
            - name: ORCHESTRATOR_RECEIVER_TRANSPORT_TYPE
              value: "rabbitMQ"
            - name: ORCHESTRATOR_RECEIVER_TRANSPORT_SERVER_URI
              value: "amqp://{{ .Release.Name }}-rabbitmq-headless:{{ .Values.rabbitmq.service.ports.amqp }}"
            - name: ORCHESTRATOR_RECEIVER_TRANSPORT_QUEUE_NAME
              value: {{ .Values.ort_server.orchestrator.queueName }}
            - name: ORCHESTRATOR_RECEIVER_TRANSPORT_USERNAME
              value: {{ .Values.rabbitmq.auth.username }}
            - name: ORCHESTRATOR_RECEIVER_TRANSPORT_PASSWORD
              value: {{ .Values.rabbitmq.auth.password }}
            - name: ORCHESTRATOR_SECRET_PROVIDER
              value: "secret-file"
            - name: ORCHESTRATOR_SECRET_FILES
              value: "/mnt/secrets/secrets.properties"
            {{- end }}
          image: ort-server-orchestrator
          imagePullPolicy: Never
          # TODO: Add liveness probe.
          name: orchestrator
      {{- if .Values.rabbitmq.enabled }}
          volumeMounts:
            - mountPath: "/mnt/secrets"
              name: orchestrator-vol
      volumes:
        - name: orchestrator-vol
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-orchestrator-pvc
      {{- end }}
      restartPolicy: Always
