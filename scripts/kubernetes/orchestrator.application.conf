# Copyright (C) 2022 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

configManager {
  secretProvider = secret-file
  configSecretFileList = "/app/resources/secrets.properties"
  allowSecretsFromConfig = true
}

database {
  host = "postgresql"
  port = 5432
  name = "ort"
  schema = "ort_server"
  username = "postgres"
  password = "postgres"
  connectionTimeout = 30000
  idleTimeout = 600000
  keepaliveTime = 0
  maxLifetime = 1800000
  maximumPoolSize = 5
  minimumIdle = 5
  sslMode = "disable"
}

orchestrator {
  receiver {
    type = "rabbitMQ"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "orchestrator_queue"
  }
}

# For some reason these are not part of the orchestrator.receiver block.
rabbitMqUser=admin
rabbitMqPassword=admin

config {
  sender {
    type = "kubernetes"
    namespace = "ort-server"
    imageName = ${?CONFIG_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = "IfNotPresent"
    enableDebugLogging = false
    mountSecrets = "ort-secrets->/mnt/secrets ort-config-worker-config->/app/resources/application.conf|application.conf ort-config-secret->/mnt/config"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "analyzer_queue"
  }
}

analyzer {
  sender {
    type = "kubernetes"
    namespace = "ort-server"
    imageName = ${?ANALYZER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = "IfNotPresent"
    enableDebugLogging = false
    mountSecrets = "ort-secrets->/mnt/secrets"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "analyzer_queue"
  }
}

advisor {
  sender {
    type = "kubernetes"
    namespace = "ort-server"
    imageName = ${?ADVISOR_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = "IfNotPresent"
    enableDebugLogging = false
    mountSecrets = "ort-secrets->/mnt/secrets"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "advisor_queue"
  }
}

scanner {
  sender {
    type = "kubernetes"
    namespace = "ort-server"
    imageName = ${?SCANNER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = "IfNotPresent"
    enableDebugLogging = false
    mountSecrets = "ort-secrets->/mnt/secrets"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "scanner_queue"
  }
}

evaluator {
  sender {
    type = "kubernetes"
    namespace = "ort-server"
    imageName = ${?EVALUATOR_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = "IfNotPresent"
    enableDebugLogging = false
    mountSecrets = "ort-secrets->/mnt/secrets"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "evaluator_queue"
  }
}

reporter {
  sender {
    type = "kubernetes"
    namespace = "ort-server"
    imageName = ${?REPORTER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = "IfNotPresent"
    enableDebugLogging = false
    mountSecrets = "ort-secrets->/mnt/secrets"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "reporter_queue"
  }
}

notifier {
  sender {
    type = "kubernetes"
    namespace = "ort-server"
    imageName = ${?NOTIFIER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = "IfNotPresent"
    enableDebugLogging = false
    mountSecrets = "ort-secrets->/mnt/secrets"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "notifier_queue"
  }
}
