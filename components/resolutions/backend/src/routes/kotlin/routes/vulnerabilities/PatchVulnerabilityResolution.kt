/*
 * Copyright (C) 2025 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.components.resolutions.routes.vulnerabilities

import io.github.smiley4.ktoropenapi.patch

import io.ktor.http.HttpStatusCode
import io.ktor.server.auth.principal
import io.ktor.server.request.receive
import io.ktor.server.response.respond
import io.ktor.server.routing.Route

import kotlinx.datetime.Instant

import org.eclipse.apoapsis.ortserver.components.authorization.keycloak.AuthorizationException
import org.eclipse.apoapsis.ortserver.components.authorization.keycloak.OrtPrincipal
import org.eclipse.apoapsis.ortserver.components.authorization.keycloak.getFullName
import org.eclipse.apoapsis.ortserver.components.authorization.keycloak.getUserId
import org.eclipse.apoapsis.ortserver.components.authorization.keycloak.getUsername
import org.eclipse.apoapsis.ortserver.components.authorization.keycloak.permissions.RepositoryPermission
import org.eclipse.apoapsis.ortserver.components.authorization.keycloak.requirePermission
import org.eclipse.apoapsis.ortserver.components.resolutions.PatchVulnerabilityResolution
import org.eclipse.apoapsis.ortserver.components.resolutions.VulnerabilityResolutionDefinitionService
import org.eclipse.apoapsis.ortserver.model.UserDisplayName as ModelUserDisplayName
import org.eclipse.apoapsis.ortserver.shared.apimappings.mapToApi
import org.eclipse.apoapsis.ortserver.shared.apimappings.mapToModel
import org.eclipse.apoapsis.ortserver.shared.apimodel.ChangeEvent
import org.eclipse.apoapsis.ortserver.shared.apimodel.ChangeEventAction
import org.eclipse.apoapsis.ortserver.shared.apimodel.UserDisplayName
import org.eclipse.apoapsis.ortserver.shared.apimodel.VulnerabilityResolutionDefinition
import org.eclipse.apoapsis.ortserver.shared.apimodel.VulnerabilityResolutionReason
import org.eclipse.apoapsis.ortserver.shared.apimodel.asPresent
import org.eclipse.apoapsis.ortserver.shared.ktorutils.jsonBody
import org.eclipse.apoapsis.ortserver.shared.ktorutils.requireIdParameter
import org.eclipse.apoapsis.ortserver.shared.ktorutils.respondError

internal fun Route.patchVulnerabilityResolution(
    vulnerabilityResolutionDefinitionService: VulnerabilityResolutionDefinitionService
) = patch("/resolutions/vulnerabilities/{id}", {
    operationId = "patchVulnerabilityResolution"
    summary = "Update a vulnerability resolution"
    tags = listOf("Resolutions")

    request {
        pathParameter<Long>("id") {
            description = "The ID of the vulnerability resolution definition"
        }

        jsonBody<PatchVulnerabilityResolution> {
            description = "Set the values that should be updated."
            example("Update Vulnerability Resolution") {
                value = PatchVulnerabilityResolution(
                    idMatchers = listOf("CVE-2020-15250", "GHSA-269g-pwp5-87pp").asPresent(),
                    reason = VulnerabilityResolutionReason.WILL_NOT_FIX_VULNERABILITY.asPresent(),
                    comment = "Updated comment.".asPresent()
                )
            }
        }
    }

    response {
        HttpStatusCode.OK to {
            description = "Success"

            jsonBody<VulnerabilityResolutionDefinition> {
                example("Update Vulnerability Resolution") {
                    value = VulnerabilityResolutionDefinition(
                        id = 1,
                        idMatchers = listOf("CVE-2020-15250", "GHSA-269g-pwp5-87pp"),
                        reason = VulnerabilityResolutionReason.WILL_NOT_FIX_VULNERABILITY,
                        comment = "Updated comment.",
                        archived = false,
                        changes = listOf(
                            ChangeEvent(
                                user = UserDisplayName(username = "User"),
                                occurredAt = Instant.parse("2024-01-01T00:00:00Z"),
                                action = ChangeEventAction.CREATE
                            ),
                            ChangeEvent(
                                user = UserDisplayName(username = "User"),
                                occurredAt = Instant.parse("2024-01-02T00:00:00Z"),
                                action = ChangeEventAction.UPDATE
                            )
                        )
                    )
                }
            }
        }

        HttpStatusCode.BadRequest to {
            description = "The requested vulnerability resolution is archived."
        }
    }
}) {
    val id = call.requireIdParameter("id")

    val definition = vulnerabilityResolutionDefinitionService.getById(id) ?: throw AuthorizationException()

    requirePermission(RepositoryPermission.WRITE.roleName(definition.hierarchyId.value))

    if (definition.archived) {
        call.respondError(HttpStatusCode.Conflict, "The requested vulnerability resolution is archived.")
        return@patch
    }

    val updateResolution = call.receive<PatchVulnerabilityResolution>()

    // Extract the user information from the principal.
    val userDisplayName = call.principal<OrtPrincipal>()?.let { principal ->
        ModelUserDisplayName(principal.getUserId(), principal.getUsername(), principal.getFullName())
    }

    if (userDisplayName == null) {
        call.respondError(HttpStatusCode.InternalServerError, "Unable to resolve user display name from token.")
        return@patch
    }

    val updatedDefinition = vulnerabilityResolutionDefinitionService.update(
        id,
        userDisplayName,
        updateResolution.idMatchers.mapToModel(),
        updateResolution.reason.mapToModel { it.mapToModel() },
        updateResolution.comment.mapToModel()
    ).mapToApi()

    call.respond(HttpStatusCode.OK, updatedDefinition)
}
