/*
 * Copyright (C) 2025 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.components.resolutions.routes.vulnerabilities

import io.kotest.assertions.ktor.client.shouldHaveStatus
import io.kotest.matchers.collections.shouldHaveSize
import io.kotest.matchers.shouldBe

import io.ktor.client.call.body
import io.ktor.client.request.delete
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.http.HttpStatusCode

import org.eclipse.apoapsis.ortserver.components.resolutions.PostVulnerabilityResolution
import org.eclipse.apoapsis.ortserver.components.resolutions.ResolutionsIntegrationTest
import org.eclipse.apoapsis.ortserver.dao.test.Fixtures
import org.eclipse.apoapsis.ortserver.shared.apimodel.ChangeEventAction
import org.eclipse.apoapsis.ortserver.shared.apimodel.UserDisplayName
import org.eclipse.apoapsis.ortserver.shared.apimodel.VulnerabilityResolutionDefinition
import org.eclipse.apoapsis.ortserver.shared.apimodel.VulnerabilityResolutionReason

class DeleteVulnerabilityResolutionIntegrationTest : ResolutionsIntegrationTest({
    var runId = 0L

    lateinit var fixtures: Fixtures

    beforeEach {
        fixtures = dbExtension.fixtures
        runId = fixtures.ortRun.id
    }

    "DeleteVulnerabilityResolution" should {
        "archive the definition" {
            resolutionsTestApplication { client ->
                val createResponse = client.post("/resolutions/vulnerabilities") {
                    setBody(
                        PostVulnerabilityResolution(
                            runId,
                            listOf("CVE-2020-15250"),
                            VulnerabilityResolutionReason.INEFFECTIVE_VULNERABILITY,
                            "Comment."
                        )
                    )
                }

                val definitionId = (createResponse.body<VulnerabilityResolutionDefinition>()).id

                val deleteResponse = client.delete("/resolutions/vulnerabilities/$definitionId")

                with(deleteResponse.body<VulnerabilityResolutionDefinition>()) {
                    idMatchers shouldBe listOf("CVE-2020-15250")
                    reason shouldBe VulnerabilityResolutionReason.INEFFECTIVE_VULNERABILITY
                    comment shouldBe "Comment."
                    archived shouldBe true
                    changes shouldHaveSize 2
                    changes.first().user shouldBe UserDisplayName("test", "Test User")
                    changes.first().action shouldBe ChangeEventAction.CREATE
                    changes.last().user shouldBe UserDisplayName("test", "Test User")
                    changes.last().action shouldBe ChangeEventAction.ARCHIVE
                }
            }
        }

        "respond with 'No content' if the definition was already archived" {
            resolutionsTestApplication { client ->
                val createResponse = client.post("/resolutions/vulnerabilities") {
                    setBody(
                        PostVulnerabilityResolution(
                            runId,
                            listOf("CVE-2020-15250"),
                            VulnerabilityResolutionReason.INEFFECTIVE_VULNERABILITY,
                            "Comment."
                        )
                    )
                }

                val definitionId = (createResponse.body<VulnerabilityResolutionDefinition>()).id

                client.delete("/resolutions/vulnerabilities/$definitionId")

                val deleteResponse = client.delete("/resolutions/vulnerabilities/$definitionId")

                deleteResponse shouldHaveStatus HttpStatusCode.NoContent
            }
        }
    }
})
