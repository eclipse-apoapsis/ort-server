# Copyright (C) 2022 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

configManager {
  secretProvider = ${?ORCHESTRATOR_SECRET_PROVIDER}
  configSecretFileList = ${?ORCHESTRATOR_SECRET_FILES}
  allowSecretsFromConfig = ${?ALLOW_SECRETS_FROM_CONFIG}
}

database {
  host = "localhost"
  host = ${?DB_HOST}
  port = 5432
  port = ${?DB_PORT}
  name = "ort"
  name = ${?DB_NAME}
  schema = "ort_server"
  schema = ${?DB_SCHEMA}
  username = "postgres"
  username = ${?DB_USERNAME}
  password = "postgres"
  password = ${?DB_PASSWORD}
  connectionTimeout = 30000
  connectionTimeout = ${?DB_CONNECTION_TIMEOUT}
  idleTimeout = 600000
  idleTimeout = ${?DB_IDLE_TIMEOUT}
  keepaliveTime = 0
  keepaliveTime = ${?DB_KEEPALIVE_TIME}
  maxLifetime = 1800000
  maxLifetime = ${?DB_MAX_LIFETIME}
  maximumPoolSize = 5
  maximumPoolSize = ${?DB_MAXIMUM_POOL_SIZE}
  minimumIdle = 5
  minimumIdle = ${?DB_MINIMUM_IDLE}
  sslMode = "verify-full"
  sslMode = ${?DB_SSL_MODE}
  sslCert = ${?DB_SSL_CERT}
  sslKey = ${?DB_SSL_KEY}
  sslRootCert = ${?DB_SSL_ROOT_CERT}
  initSqlStatement = ${?DB_INIT_SQL_STATEMENT}
}

orchestrator {
  receiver {
    type = "activeMQ"
    type = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_TYPE}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_SERVER_URI}
    queueName = "orchestrator_queue"
    queueName = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_PASSWORD}
  }
}

config {
  sender {
    type = "kubernetes"
    type = ${?CONFIG_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?CONFIG_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-config-worker"
    imageName = ${?CONFIG_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?CONFIG_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?CONFIG_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?CONFIG_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?CONFIG_SENDER_TRANSPORT_BACKOFF_LIMIT}
    cpuRequest = ${?CONFIG_SENDER_TRANSPORT_CPU_REQUEST}
    cpuLimit = ${?CONFIG_SENDER_TRANSPORT_CPU_LIMIT}
    memoryRequest = ${?CONFIG_SENDER_TRANSPORT_MEMORY_REQUEST}
    memoryLimit = ${?CONFIG_SENDER_TRANSPORT_MEMORY_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?CONFIG_COMMANDS}
    args = ${?CONFIG_ARGS}
    mountSecrets = ${?CONFIG_MOUNT_SECRETS}
    mountPvcs = ${?CONFIG_MOUNT_PVCS}
    annotationVariables = ${?CONFIG_ANNOTATIONS}
    serviceAccount = ${?CONFIG_SERVICE_ACCOUNT}
    userId = ${?CONFIG_USER_ID}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?CONFIG_SENDER_TRANSPORT_SERVER_URI}
    queueName = "analyzer_queue"
    queueName = ${?CONFIG_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?CONFIG_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?CONFIG_SENDER_TRANSPORT_PASSWORD}
  }
}

analyzer {
  sender {
    type = "kubernetes"
    type = ${?ANALYZER_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?ANALYZER_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-analyzer-worker"
    imageName = ${?ANALYZER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?ANALYZER_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?ANALYZER_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?ANALYZER_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?ANALYZER_SENDER_TRANSPORT_BACKOFF_LIMIT}
    cpuRequest = ${?ANALYZER_SENDER_TRANSPORT_CPU_REQUEST}
    cpuLimit = ${?ANALYZER_SENDER_TRANSPORT_CPU_LIMIT}
    memoryRequest = ${?ANALYZER_SENDER_TRANSPORT_MEMORY_REQUEST}
    memoryLimit = ${?ANALYZER_SENDER_TRANSPORT_MEMORY_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?ANALYZER_COMMANDS}
    args = ${?ANALYZER_ARGS}
    mountSecrets = ${?ANALYZER_MOUNT_SECRETS}
    mountPvcs = ${?ANALYZER_MOUNT_PVCS}
    annotationVariables = ${?ANALYZER_ANNOTATIONS}
    serviceAccount = ${?ANALYZER_SERVICE_ACCOUNT}
    userId = ${?ANALYZER_USER_ID}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?ANALYZER_SENDER_TRANSPORT_SERVER_URI}
    queueName = "analyzer_queue"
    queueName = ${?ANALYZER_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?ANALYZER_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?ANALYZER_SENDER_TRANSPORT_PASSWORD}
  }
}

advisor {
  sender {
    type = "kubernetes"
    type = ${?ADVISOR_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?ADVISOR_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-advisor-worker"
    imageName = ${?ADVISOR_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?ADVISOR_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?ADVISOR_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?ADVISOR_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?ADVISOR_SENDER_TRANSPORT_BACKOFF_LIMIT}
    cpuRequest = ${?ADVISOR_SENDER_TRANSPORT_CPU_REQUEST}
    cpuLimit = ${?ADVISOR_SENDER_TRANSPORT_CPU_LIMIT}
    memoryRequest = ${?ADVISOR_SENDER_TRANSPORT_MEMORY_REQUEST}
    memoryLimit = ${?ADVISOR_SENDER_TRANSPORT_MEMORY_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?ADVISOR_COMMANDS}
    args = ${?ADVISOR_ARGS}
    mountSecrets = ${?ADVISOR_MOUNT_SECRETS}
    mountPvcs = ${?ADVISOR_MOUNT_PVCS}
    annotationVariables = ${?ADVISOR_ANNOTATIONS}
    serviceAccount = ${?ADVISOR_SERVICE_ACCOUNT}
    userId = ${?ADVISOR_USER_ID}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?ADVISOR_SENDER_TRANSPORT_SERVER_URI}
    queueName = "advisor_queue"
    queueName = ${?ADVISOR_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?ADVISOR_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?ADVISOR_SENDER_TRANSPORT_PASSWORD}
  }
}

scanner {
  sender {
    type = "kubernetes"
    type = ${?SCANNER_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?SCANNER_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-scanner-worker"
    imageName = ${?SCANNER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?SCANNER_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?SCANNER_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?SCANNER_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?SCANNER_SENDER_TRANSPORT_BACKOFF_LIMIT}
    cpuRequest = ${?SCANNEr_SENDER_TRANSPORT_CPU_REQUEST}
    cpuLimit = ${?SCANNER_SENDER_TRANSPORT_CPU_LIMIT}
    memoryRequest = ${?SCANNER_SENDER_TRANSPORT_MEMORY_REQUEST}
    memoryLimit = ${?SCANNER_SENDER_TRANSPORT_MEMORY_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?SCANNER_COMMANDS}
    args = ${?SCANNER_ARGS}
    mountSecrets = ${?SCANNER_MOUNT_SECRETS}
    mountPvcs = ${?SCANNER_MOUNT_PVCS}
    annotationVariables = ${?SCANNER_ANNOTATIONS}
    serviceAccount = ${?SCANNER_SERVICE_ACCOUNT}
    userId = ${?SCANNER_USER_ID}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?SCANNER_SENDER_TRANSPORT_SERVER_URI}
    queueName = "scanner_queue"
    queueName = ${?SCANNER_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?SCANNER_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?SCANNER_SENDER_TRANSPORT_PASSWORD}
  }
}

evaluator {
  sender {
    type = "kubernetes"
    type = ${?EVALUATOR_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?EVALUATOR_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-evaluator-worker"
    imageName = ${?EVALUATOR_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?EVALUATOR_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?EVALUATOR_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?EVALUATOR_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?EVALUATOR_SENDER_TRANSPORT_BACKOFF_LIMIT}
    cpuRequest = ${?EVALUATOR_SENDER_TRANSPORT_CPU_REQUEST}
    cpuLimit = ${?EVALUATOR_SENDER_TRANSPORT_CPU_LIMIT}
    memoryRequest = ${?EVALUATOR_SENDER_TRANSPORT_MEMORY_REQUEST}
    memoryLimit = ${?EVALUATOR_SENDER_TRANSPORT_MEMORY_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?EVALUATOR_COMMANDS}
    args = ${?EVALUATOR_ARGS}
    mountSecrets = ${?EVALUATOR_MOUNT_SECRETS}
    mountPvcs = ${?EVALUATOR_MOUNT_PVCS}
    annotationVariables = ${?EVALUATOR_ANNOTATIONS}
    serviceAccount = ${?EVALUATOR_SERVICE_ACCOUNT}
    userId = ${?EVALUATOR_USER_ID}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?EVALUATOR_SENDER_TRANSPORT_SERVER_URI}
    queueName = "evaluator_queue"
    queueName = ${?EVALUATOR_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?EVALUATOR_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?EVALUATOR_SENDER_TRANSPORT_PASSWORD}
  }
}

reporter {
  sender {
    type = "kubernetes"
    type = ${?REPORTER_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?REPORTER_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-reporter-worker"
    imageName = ${?REPORTER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?REPORTER_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?REPORTER_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?REPORTER_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?REPORTER_SENDER_TRANSPORT_BACKOFF_LIMIT}
    cpuRequest = ${?REPORTER_SENDER_TRANSPORT_CPU_REQUEST}
    cpuLimit = ${?REPORTER_SENDER_TRANSPORT_CPU_LIMIT}
    memoryRequest = ${?REPORTER_SENDER_TRANSPORT_MEMORY_REQUEST}
    memoryLimit = ${?REPORTER_SENDER_TRANSPORT_MEMORY_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?REPORTER_COMMANDS}
    args = ${?REPORTER_ARGS}
    mountSecrets = ${?REPORTER_MOUNT_SECRETS}
    mountPvcs = ${?REPORTER_MOUNT_PVCS}
    annotationVariables = ${?REPORTER_ANNOTATIONS}
    serviceAccount = ${?REPORTER_SERVICE_ACCOUNT}
    userId = ${?REPORTER_USER_ID}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?REPORTER_SENDER_TRANSPORT_SERVER_URI}
    queueName = "reporter_queue"
    queueName = ${?REPORTER_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?REPORTER_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?REPORTER_SENDER_TRANSPORT_PASSWORD}
  }
}

notifier {
  sender {
    type = "kubernetes"
    type = ${?NOTIFIER_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?NOTIFIER_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-notifier-worker"
    imageName = ${?NOTIFIER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?NOTIFIER_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?NOTIFIER_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?NOTIFIER_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?NOTIFIER_SENDER_TRANSPORT_BACKOFF_LIMIT}
    cpuRequest = ${?NOTIFIER_SENDER_TRANSPORT_CPU_REQUEST}
    cpuLimit = ${?NOTIFIER_SENDER_TRANSPORT_CPU_LIMIT}
    memoryRequest = ${?NOTIFIER_SENDER_TRANSPORT_MEMORY_REQUEST}
    memoryLimit = ${?NOTIFIER_SENDER_TRANSPORT_MEMORY_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?NOTIFIER_COMMANDS}
    args = ${?NOTIFIER_ARGS}
    mountSecrets = ${?NOTIFIER_MOUNT_SECRETS}
    mountPvcs = ${?NOTIFIER_MOUNT_PVCS}
    annotationVariables = ${?NOTIFIER_ANNOTATIONS}
    serviceAccount = ${?NOTIFIER_SERVICE_ACCOUNT}
    userId = ${?NOTIFIER_USER_ID}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?NOTIFIER_SENDER_TRANSPORT_SERVER_URI}
    queueName = "notifier_queue"
    queueName = ${?NOTIFIER_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?NOTIFIER_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?NOTIFIER_SENDER_TRANSPORT_PASSWORD}
  }
}
