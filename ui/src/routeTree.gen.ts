/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout/route'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutCreateOrganizationImport } from './routes/_layout/create-organization'
import { Route as LayoutOrganizationsOrgIdRouteImport } from './routes/_layout/organizations/$orgId.route'
import { Route as LayoutOrganizationsOrgIdIndexImport } from './routes/_layout/organizations/$orgId.index'
import { Route as LayoutOrganizationsOrgIdEditImport } from './routes/_layout/organizations/$orgId.edit'
import { Route as LayoutOrganizationsOrgIdCreateProductImport } from './routes/_layout/organizations/$orgId.create-product'
import { Route as LayoutOrganizationsOrgIdProductsProductIdRouteImport } from './routes/_layout/organizations/$orgId.products.$productId.route'
import { Route as LayoutOrganizationsOrgIdProductsProductIdIndexImport } from './routes/_layout/organizations/$orgId.products.$productId.index'
import { Route as LayoutOrganizationsOrgIdProductsProductIdEditImport } from './routes/_layout/organizations/$orgId.products.$productId.edit'
import { Route as LayoutOrganizationsOrgIdProductsProductIdCreateRepositoryImport } from './routes/_layout/organizations/$orgId.products.$productId.create-repository'
import { Route as LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteImport } from './routes/_layout/organizations/$orgId.products.$productId.repositories.$repoId.route'
import { Route as LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdIndexImport } from './routes/_layout/organizations/$orgId.products.$productId.repositories.$repoId.index'
import { Route as LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdEditImport } from './routes/_layout/organizations/$orgId.products.$productId.repositories.$repoId.edit'
import { Route as LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdCreateRunImport } from './routes/_layout/organizations/$orgId.products.$productId.repositories.$repoId.create-run'
import { Route as LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdRouteImport } from './routes/_layout/organizations/$orgId.products.$productId.repositories.$repoId.runs.$runId.route'
import { Route as LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdIndexImport } from './routes/_layout/organizations/$orgId.products.$productId.repositories.$repoId.runs.$runId.index'

// Create/Update Routes

const LayoutRouteRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutCreateOrganizationRoute = LayoutCreateOrganizationImport.update({
  path: '/create-organization',
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutOrganizationsOrgIdRouteRoute =
  LayoutOrganizationsOrgIdRouteImport.update({
    path: '/organizations/$orgId',
    getParentRoute: () => LayoutRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdIndexRoute =
  LayoutOrganizationsOrgIdIndexImport.update({
    path: '/',
    getParentRoute: () => LayoutOrganizationsOrgIdRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdEditRoute =
  LayoutOrganizationsOrgIdEditImport.update({
    path: '/edit',
    getParentRoute: () => LayoutOrganizationsOrgIdRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdCreateProductRoute =
  LayoutOrganizationsOrgIdCreateProductImport.update({
    path: '/create-product',
    getParentRoute: () => LayoutOrganizationsOrgIdRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdProductsProductIdRouteRoute =
  LayoutOrganizationsOrgIdProductsProductIdRouteImport.update({
    path: '/products/$productId',
    getParentRoute: () => LayoutOrganizationsOrgIdRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdProductsProductIdIndexRoute =
  LayoutOrganizationsOrgIdProductsProductIdIndexImport.update({
    path: '/',
    getParentRoute: () => LayoutOrganizationsOrgIdProductsProductIdRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdProductsProductIdEditRoute =
  LayoutOrganizationsOrgIdProductsProductIdEditImport.update({
    path: '/edit',
    getParentRoute: () => LayoutOrganizationsOrgIdProductsProductIdRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdProductsProductIdCreateRepositoryRoute =
  LayoutOrganizationsOrgIdProductsProductIdCreateRepositoryImport.update({
    path: '/create-repository',
    getParentRoute: () => LayoutOrganizationsOrgIdProductsProductIdRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteRoute =
  LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteImport.update(
    {
      path: '/repositories/$repoId',
      getParentRoute: () => LayoutOrganizationsOrgIdProductsProductIdRouteRoute,
    } as any,
  )

const LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdIndexRoute =
  LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdIndexImport.update(
    {
      path: '/',
      getParentRoute: () =>
        LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteRoute,
    } as any,
  )

const LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdEditRoute =
  LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdEditImport.update({
    path: '/edit',
    getParentRoute: () =>
      LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteRoute,
  } as any)

const LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdCreateRunRoute =
  LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdCreateRunImport.update(
    {
      path: '/create-run',
      getParentRoute: () =>
        LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteRoute,
    } as any,
  )

const LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdRouteRoute =
  LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdRouteImport.update(
    {
      path: '/runs/$runId',
      getParentRoute: () =>
        LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteRoute,
    } as any,
  )

const LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdIndexRoute =
  LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdIndexImport.update(
    {
      path: '/',
      getParentRoute: () =>
        LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdRouteRoute,
    } as any,
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_layout/create-organization': {
      preLoaderRoute: typeof LayoutCreateOrganizationImport
      parentRoute: typeof LayoutRouteImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutRouteImport
    }
    '/_layout/organizations/$orgId': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdRouteImport
      parentRoute: typeof LayoutRouteImport
    }
    '/_layout/organizations/$orgId/create-product': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdCreateProductImport
      parentRoute: typeof LayoutOrganizationsOrgIdRouteImport
    }
    '/_layout/organizations/$orgId/edit': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdEditImport
      parentRoute: typeof LayoutOrganizationsOrgIdRouteImport
    }
    '/_layout/organizations/$orgId/': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdIndexImport
      parentRoute: typeof LayoutOrganizationsOrgIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRouteImport
      parentRoute: typeof LayoutOrganizationsOrgIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/create-repository': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdCreateRepositoryImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/edit': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdEditImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdIndexImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/repositories/$repoId': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/repositories/$repoId/create-run': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdCreateRunImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/repositories/$repoId/edit': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdEditImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/repositories/$repoId/': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdIndexImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/repositories/$repoId/runs/$runId': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdRouteImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteImport
    }
    '/_layout/organizations/$orgId/products/$productId/repositories/$repoId/runs/$runId/': {
      preLoaderRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdIndexImport
      parentRoute: typeof LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRouteRoute.addChildren([
    LayoutCreateOrganizationRoute,
    LayoutIndexRoute,
    LayoutOrganizationsOrgIdRouteRoute.addChildren([
      LayoutOrganizationsOrgIdCreateProductRoute,
      LayoutOrganizationsOrgIdEditRoute,
      LayoutOrganizationsOrgIdIndexRoute,
      LayoutOrganizationsOrgIdProductsProductIdRouteRoute.addChildren([
        LayoutOrganizationsOrgIdProductsProductIdCreateRepositoryRoute,
        LayoutOrganizationsOrgIdProductsProductIdEditRoute,
        LayoutOrganizationsOrgIdProductsProductIdIndexRoute,
        LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRouteRoute.addChildren(
          [
            LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdCreateRunRoute,
            LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdEditRoute,
            LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdIndexRoute,
            LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdRouteRoute.addChildren(
              [
                LayoutOrganizationsOrgIdProductsProductIdRepositoriesRepoIdRunsRunIdIndexRoute,
              ],
            ),
          ],
        ),
      ]),
    ]),
  ]),
])

/* prettier-ignore-end */
