// This file is auto-generated by @hey-api/openapi-ts

export const $Liveness = {
  required: ['message'],
  type: 'object',
  properties: {
    message: {
      type: 'string',
    },
  },
} as const;

export const $org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Organization_ =
  {
    required: ['data', 'options'],
    type: 'object',
    properties: {
      data: {
        type: 'array',
        items: {
          required: ['id', 'name'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            name: {
              type: 'string',
            },
            description: {
              type: 'string',
              nullable: true,
            },
          },
        },
      },
      options: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            nullable: true,
          },
          offset: {
            type: 'number',
            nullable: true,
          },
          sortProperties: {
            type: 'array',
            nullable: true,
            items: {
              required: ['direction', 'name'],
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                },
                direction: {
                  type: 'string',
                  enum: ['ASCENDING', 'DESCENDING'],
                },
              },
            },
          },
        },
      },
    },
  } as const;

export const $CreateOrganization = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $Organization = {
  required: ['id', 'name'],
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $UpdateOrganization = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Product_ =
  {
    required: ['data', 'options'],
    type: 'object',
    properties: {
      data: {
        type: 'array',
        items: {
          required: ['id', 'name'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            name: {
              type: 'string',
            },
            description: {
              type: 'string',
              nullable: true,
            },
          },
        },
      },
      options: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            nullable: true,
          },
          offset: {
            type: 'number',
            nullable: true,
          },
          sortProperties: {
            type: 'array',
            nullable: true,
            items: {
              required: ['direction', 'name'],
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                },
                direction: {
                  type: 'string',
                  enum: ['ASCENDING', 'DESCENDING'],
                },
              },
            },
          },
        },
      },
    },
  } as const;

export const $CreateProduct = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $Product = {
  required: ['id', 'name'],
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_ =
  {
    required: ['data', 'options'],
    type: 'object',
    properties: {
      data: {
        type: 'array',
        items: {
          required: ['description', 'name'],
          type: 'object',
          properties: {
            name: {
              type: 'string',
            },
            description: {
              type: 'string',
              nullable: true,
            },
          },
        },
      },
      options: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            nullable: true,
          },
          offset: {
            type: 'number',
            nullable: true,
          },
          sortProperties: {
            type: 'array',
            nullable: true,
            items: {
              required: ['direction', 'name'],
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                },
                direction: {
                  type: 'string',
                  enum: ['ASCENDING', 'DESCENDING'],
                },
              },
            },
          },
        },
      },
    },
  } as const;

export const $Secret = {
  required: ['description', 'name'],
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $UpdateSecret = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    value: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
  },
} as const;

export const $CreateSecret = {
  required: ['description', 'name', 'value'],
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    value: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_InfrastructureService_ =
  {
    required: ['data', 'options'],
    type: 'object',
    properties: {
      data: {
        type: 'array',
        items: {
          required: ['name', 'passwordSecretRef', 'url', 'usernameSecretRef'],
          type: 'object',
          properties: {
            name: {
              type: 'string',
            },
            url: {
              type: 'string',
            },
            description: {
              type: 'string',
              nullable: true,
            },
            usernameSecretRef: {
              type: 'string',
            },
            passwordSecretRef: {
              type: 'string',
            },
            excludeFromNetrc: {
              type: 'boolean',
            },
          },
        },
      },
      options: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            nullable: true,
          },
          offset: {
            type: 'number',
            nullable: true,
          },
          sortProperties: {
            type: 'array',
            nullable: true,
            items: {
              required: ['direction', 'name'],
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                },
                direction: {
                  type: 'string',
                  enum: ['ASCENDING', 'DESCENDING'],
                },
              },
            },
          },
        },
      },
    },
  } as const;

export const $CreateInfrastructureService = {
  required: ['name', 'passwordSecretRef', 'url', 'usernameSecretRef'],
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    usernameSecretRef: {
      type: 'string',
    },
    passwordSecretRef: {
      type: 'string',
    },
    excludeFromNetrc: {
      type: 'boolean',
    },
  },
} as const;

export const $InfrastructureService = {
  required: ['name', 'passwordSecretRef', 'url', 'usernameSecretRef'],
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    usernameSecretRef: {
      type: 'string',
    },
    passwordSecretRef: {
      type: 'string',
    },
    excludeFromNetrc: {
      type: 'boolean',
    },
  },
} as const;

export const $UpdateInfrastructureService = {
  type: 'object',
  properties: {
    url: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    usernameSecretRef: {
      type: 'string',
    },
    passwordSecretRef: {
      type: 'string',
    },
    excludeFromNetrc: {
      type: 'boolean',
    },
  },
} as const;

export const $UpdateProduct = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Repository_ =
  {
    required: ['data', 'options'],
    type: 'object',
    properties: {
      data: {
        type: 'array',
        items: {
          required: ['id', 'type', 'url'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            type: {
              type: 'string',
              enum: ['GIT', 'GIT_REPO', 'MERCURIAL', 'SUBVERSION', 'CVS'],
            },
            url: {
              type: 'string',
            },
          },
        },
      },
      options: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            nullable: true,
          },
          offset: {
            type: 'number',
            nullable: true,
          },
          sortProperties: {
            type: 'array',
            nullable: true,
            items: {
              required: ['direction', 'name'],
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                },
                direction: {
                  type: 'string',
                  enum: ['ASCENDING', 'DESCENDING'],
                },
              },
            },
          },
        },
      },
    },
  } as const;

export const $CreateRepository = {
  required: ['type', 'url'],
  type: 'object',
  properties: {
    type: {
      type: 'string',
      enum: ['GIT', 'GIT_REPO', 'MERCURIAL', 'SUBVERSION', 'CVS'],
    },
    url: {
      type: 'string',
    },
  },
} as const;

export const $Repository = {
  required: ['id', 'type', 'url'],
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    type: {
      type: 'string',
      enum: ['GIT', 'GIT_REPO', 'MERCURIAL', 'SUBVERSION', 'CVS'],
    },
    url: {
      type: 'string',
    },
  },
} as const;

export const $UpdateRepository = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      enum: ['GIT', 'GIT_REPO', 'MERCURIAL', 'SUBVERSION', 'CVS'],
    },
    url: {
      type: 'string',
    },
  },
} as const;

export const $org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_OrtRunSummary_ =
  {
    required: ['data', 'options'],
    type: 'object',
    properties: {
      data: {
        type: 'array',
        items: {
          required: [
            'createdAt',
            'id',
            'index',
            'jobs',
            'labels',
            'repositoryId',
            'revision',
            'status',
          ],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            index: {
              type: 'number',
            },
            repositoryId: {
              type: 'number',
            },
            revision: {
              type: 'string',
            },
            path: {
              type: 'string',
              nullable: true,
            },
            createdAt: {
              type: 'string',
            },
            finishedAt: {
              type: 'string',
              nullable: true,
            },
            jobs: {
              type: 'object',
              properties: {
                analyzer: {
                  required: ['createdAt', 'id', 'status'],
                  type: 'object',
                  properties: {
                    id: {
                      type: 'number',
                    },
                    createdAt: {
                      type: 'string',
                    },
                    startedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    finishedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    status: {
                      type: 'string',
                      enum: [
                        'CREATED',
                        'SCHEDULED',
                        'RUNNING',
                        'FAILED',
                        'FINISHED',
                      ],
                    },
                  },
                  nullable: true,
                },
                advisor: {
                  required: ['createdAt', 'id', 'status'],
                  type: 'object',
                  properties: {
                    id: {
                      type: 'number',
                    },
                    createdAt: {
                      type: 'string',
                    },
                    startedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    finishedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    status: {
                      type: 'string',
                      enum: [
                        'CREATED',
                        'SCHEDULED',
                        'RUNNING',
                        'FAILED',
                        'FINISHED',
                      ],
                    },
                  },
                  nullable: true,
                },
                scanner: {
                  required: ['createdAt', 'id', 'status'],
                  type: 'object',
                  properties: {
                    id: {
                      type: 'number',
                    },
                    createdAt: {
                      type: 'string',
                    },
                    startedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    finishedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    status: {
                      type: 'string',
                      enum: [
                        'CREATED',
                        'SCHEDULED',
                        'RUNNING',
                        'FAILED',
                        'FINISHED',
                      ],
                    },
                  },
                  nullable: true,
                },
                evaluator: {
                  required: ['createdAt', 'id', 'status'],
                  type: 'object',
                  properties: {
                    id: {
                      type: 'number',
                    },
                    createdAt: {
                      type: 'string',
                    },
                    startedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    finishedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    status: {
                      type: 'string',
                      enum: [
                        'CREATED',
                        'SCHEDULED',
                        'RUNNING',
                        'FAILED',
                        'FINISHED',
                      ],
                    },
                  },
                  nullable: true,
                },
                reporter: {
                  required: ['createdAt', 'id', 'status'],
                  type: 'object',
                  properties: {
                    id: {
                      type: 'number',
                    },
                    createdAt: {
                      type: 'string',
                    },
                    startedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    finishedAt: {
                      type: 'string',
                      nullable: true,
                    },
                    status: {
                      type: 'string',
                      enum: [
                        'CREATED',
                        'SCHEDULED',
                        'RUNNING',
                        'FAILED',
                        'FINISHED',
                      ],
                    },
                  },
                  nullable: true,
                },
              },
            },
            status: {
              type: 'string',
              enum: ['CREATED', 'ACTIVE', 'FINISHED', 'FAILED'],
            },
            labels: {
              type: 'object',
              additionalProperties: {
                type: 'string',
              },
            },
            jobConfigContext: {
              type: 'string',
              nullable: true,
            },
            resolvedJobConfigContext: {
              type: 'string',
              nullable: true,
            },
          },
        },
      },
      options: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            nullable: true,
          },
          offset: {
            type: 'number',
            nullable: true,
          },
          sortProperties: {
            type: 'array',
            nullable: true,
            items: {
              required: ['direction', 'name'],
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                },
                direction: {
                  type: 'string',
                  enum: ['ASCENDING', 'DESCENDING'],
                },
              },
            },
          },
        },
      },
    },
  } as const;

export const $CreateOrtRun = {
  required: ['jobConfigs', 'revision'],
  type: 'object',
  properties: {
    revision: {
      type: 'string',
    },
    path: {
      type: 'string',
      nullable: true,
    },
    jobConfigs: {
      type: 'object',
      properties: {
        analyzer: {
          type: 'object',
          properties: {
            allowDynamicVersions: {
              type: 'boolean',
            },
            disabledPackageManagers: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            enabledPackageManagers: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            environmentConfig: {
              required: ['infrastructureServices'],
              type: 'object',
              properties: {
                infrastructureServices: {
                  type: 'array',
                  items: {
                    required: [
                      'name',
                      'passwordSecretRef',
                      'url',
                      'usernameSecretRef',
                    ],
                    type: 'object',
                    properties: {
                      name: {
                        type: 'string',
                      },
                      url: {
                        type: 'string',
                      },
                      description: {
                        type: 'string',
                        nullable: true,
                      },
                      usernameSecretRef: {
                        type: 'string',
                      },
                      passwordSecretRef: {
                        type: 'string',
                      },
                      excludeFromNetrc: {
                        type: 'boolean',
                      },
                    },
                  },
                },
                environmentDefinitions: {
                  type: 'object',
                  additionalProperties: {
                    type: 'array',
                    items: {
                      type: 'object',
                      additionalProperties: {
                        type: 'string',
                      },
                    },
                  },
                },
                environmentVariables: {
                  type: 'array',
                  items: {
                    required: ['name', 'secretName'],
                    type: 'object',
                    properties: {
                      name: {
                        type: 'string',
                      },
                      secretName: {
                        type: 'string',
                      },
                    },
                  },
                },
                strict: {
                  type: 'boolean',
                },
              },
              nullable: true,
            },
            packageCurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            packageManagerOptions: {
              type: 'object',
              additionalProperties: {
                type: 'object',
                properties: {
                  mustRunAfter: {
                    type: 'array',
                    nullable: true,
                    items: {
                      type: 'string',
                    },
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                    nullable: true,
                  },
                },
              },
              nullable: true,
            },
            repositoryConfigPath: {
              type: 'string',
              nullable: true,
            },
            skipExcluded: {
              type: 'boolean',
              nullable: true,
            },
          },
        },
        advisor: {
          type: 'object',
          properties: {
            advisors: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            skipExcluded: {
              type: 'boolean',
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        scanner: {
          type: 'object',
          properties: {
            createMissingArchives: {
              type: 'boolean',
              nullable: true,
            },
            detectedLicenseMappings: {
              type: 'object',
              additionalProperties: {
                type: 'string',
              },
              nullable: true,
            },
            ignorePatterns: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            projectScanners: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            scanners: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            skipConcluded: {
              type: 'boolean',
              nullable: true,
            },
            skipExcluded: {
              type: 'boolean',
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        evaluator: {
          type: 'object',
          properties: {
            copyrightGarbageFile: {
              type: 'string',
              nullable: true,
            },
            licenseClassificationsFile: {
              type: 'string',
              nullable: true,
            },
            packageConfigurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            ruleSet: {
              type: 'string',
              nullable: true,
            },
          },
          nullable: true,
        },
        reporter: {
          type: 'object',
          properties: {
            copyrightGarbageFile: {
              type: 'string',
              nullable: true,
            },
            formats: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            licenseClassificationsFile: {
              type: 'string',
              nullable: true,
            },
            packageConfigurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            customLicenseTextDir: {
              type: 'string',
              nullable: true,
            },
            assetFiles: {
              type: 'array',
              items: {
                required: ['sourcePath'],
                type: 'object',
                properties: {
                  sourcePath: {
                    type: 'string',
                  },
                  targetFolder: {
                    type: 'string',
                    nullable: true,
                  },
                  targetName: {
                    type: 'string',
                    nullable: true,
                  },
                },
              },
            },
            assetDirectories: {
              type: 'array',
              items: {
                required: ['sourcePath'],
                type: 'object',
                properties: {
                  sourcePath: {
                    type: 'string',
                  },
                  targetFolder: {
                    type: 'string',
                    nullable: true,
                  },
                  targetName: {
                    type: 'string',
                    nullable: true,
                  },
                },
              },
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
            nameMappings: {
              type: 'object',
              additionalProperties: {
                required: ['namePrefix'],
                type: 'object',
                properties: {
                  namePrefix: {
                    type: 'string',
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        notifier: {
          type: 'object',
          properties: {
            notifierRules: {
              type: 'string',
              nullable: true,
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            mail: {
              type: 'object',
              properties: {
                recipientAddresses: {
                  type: 'array',
                  nullable: true,
                  items: {
                    type: 'string',
                  },
                },
                mailServerConfiguration: {
                  required: [
                    'fromAddress',
                    'hostName',
                    'password',
                    'port',
                    'useSsl',
                    'username',
                  ],
                  type: 'object',
                  properties: {
                    hostName: {
                      type: 'string',
                    },
                    port: {
                      type: 'number',
                    },
                    username: {
                      type: 'string',
                    },
                    password: {
                      type: 'string',
                    },
                    useSsl: {
                      type: 'boolean',
                    },
                    fromAddress: {
                      type: 'string',
                    },
                  },
                  nullable: true,
                },
              },
              nullable: true,
            },
            jira: {
              type: 'object',
              properties: {
                jiraRestClientConfiguration: {
                  required: ['password', 'serverUrl', 'username'],
                  type: 'object',
                  properties: {
                    serverUrl: {
                      type: 'string',
                    },
                    username: {
                      type: 'string',
                    },
                    password: {
                      type: 'string',
                    },
                  },
                  nullable: true,
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        parameters: {
          type: 'object',
          additionalProperties: {
            type: 'string',
          },
        },
      },
    },
    labels: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      nullable: true,
    },
    jobConfigContext: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $OrtRun = {
  required: [
    'createdAt',
    'id',
    'index',
    'issues',
    'jobConfigs',
    'jobs',
    'labels',
    'repositoryId',
    'revision',
    'status',
  ],
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    index: {
      type: 'number',
    },
    repositoryId: {
      type: 'number',
    },
    revision: {
      type: 'string',
    },
    path: {
      type: 'string',
      nullable: true,
    },
    createdAt: {
      type: 'string',
    },
    finishedAt: {
      type: 'string',
      nullable: true,
    },
    jobConfigs: {
      type: 'object',
      properties: {
        analyzer: {
          type: 'object',
          properties: {
            allowDynamicVersions: {
              type: 'boolean',
            },
            disabledPackageManagers: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            enabledPackageManagers: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            environmentConfig: {
              required: ['infrastructureServices'],
              type: 'object',
              properties: {
                infrastructureServices: {
                  type: 'array',
                  items: {
                    required: [
                      'name',
                      'passwordSecretRef',
                      'url',
                      'usernameSecretRef',
                    ],
                    type: 'object',
                    properties: {
                      name: {
                        type: 'string',
                      },
                      url: {
                        type: 'string',
                      },
                      description: {
                        type: 'string',
                        nullable: true,
                      },
                      usernameSecretRef: {
                        type: 'string',
                      },
                      passwordSecretRef: {
                        type: 'string',
                      },
                      excludeFromNetrc: {
                        type: 'boolean',
                      },
                    },
                  },
                },
                environmentDefinitions: {
                  type: 'object',
                  additionalProperties: {
                    type: 'array',
                    items: {
                      type: 'object',
                      additionalProperties: {
                        type: 'string',
                      },
                    },
                  },
                },
                environmentVariables: {
                  type: 'array',
                  items: {
                    required: ['name', 'secretName'],
                    type: 'object',
                    properties: {
                      name: {
                        type: 'string',
                      },
                      secretName: {
                        type: 'string',
                      },
                    },
                  },
                },
                strict: {
                  type: 'boolean',
                },
              },
              nullable: true,
            },
            packageCurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            packageManagerOptions: {
              type: 'object',
              additionalProperties: {
                type: 'object',
                properties: {
                  mustRunAfter: {
                    type: 'array',
                    nullable: true,
                    items: {
                      type: 'string',
                    },
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                    nullable: true,
                  },
                },
              },
              nullable: true,
            },
            repositoryConfigPath: {
              type: 'string',
              nullable: true,
            },
            skipExcluded: {
              type: 'boolean',
              nullable: true,
            },
          },
        },
        advisor: {
          type: 'object',
          properties: {
            advisors: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            skipExcluded: {
              type: 'boolean',
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        scanner: {
          type: 'object',
          properties: {
            createMissingArchives: {
              type: 'boolean',
              nullable: true,
            },
            detectedLicenseMappings: {
              type: 'object',
              additionalProperties: {
                type: 'string',
              },
              nullable: true,
            },
            ignorePatterns: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            projectScanners: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            scanners: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            skipConcluded: {
              type: 'boolean',
              nullable: true,
            },
            skipExcluded: {
              type: 'boolean',
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        evaluator: {
          type: 'object',
          properties: {
            copyrightGarbageFile: {
              type: 'string',
              nullable: true,
            },
            licenseClassificationsFile: {
              type: 'string',
              nullable: true,
            },
            packageConfigurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            ruleSet: {
              type: 'string',
              nullable: true,
            },
          },
          nullable: true,
        },
        reporter: {
          type: 'object',
          properties: {
            copyrightGarbageFile: {
              type: 'string',
              nullable: true,
            },
            formats: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            licenseClassificationsFile: {
              type: 'string',
              nullable: true,
            },
            packageConfigurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            customLicenseTextDir: {
              type: 'string',
              nullable: true,
            },
            assetFiles: {
              type: 'array',
              items: {
                required: ['sourcePath'],
                type: 'object',
                properties: {
                  sourcePath: {
                    type: 'string',
                  },
                  targetFolder: {
                    type: 'string',
                    nullable: true,
                  },
                  targetName: {
                    type: 'string',
                    nullable: true,
                  },
                },
              },
            },
            assetDirectories: {
              type: 'array',
              items: {
                required: ['sourcePath'],
                type: 'object',
                properties: {
                  sourcePath: {
                    type: 'string',
                  },
                  targetFolder: {
                    type: 'string',
                    nullable: true,
                  },
                  targetName: {
                    type: 'string',
                    nullable: true,
                  },
                },
              },
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
            nameMappings: {
              type: 'object',
              additionalProperties: {
                required: ['namePrefix'],
                type: 'object',
                properties: {
                  namePrefix: {
                    type: 'string',
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        notifier: {
          type: 'object',
          properties: {
            notifierRules: {
              type: 'string',
              nullable: true,
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            mail: {
              type: 'object',
              properties: {
                recipientAddresses: {
                  type: 'array',
                  nullable: true,
                  items: {
                    type: 'string',
                  },
                },
                mailServerConfiguration: {
                  required: [
                    'fromAddress',
                    'hostName',
                    'password',
                    'port',
                    'useSsl',
                    'username',
                  ],
                  type: 'object',
                  properties: {
                    hostName: {
                      type: 'string',
                    },
                    port: {
                      type: 'number',
                    },
                    username: {
                      type: 'string',
                    },
                    password: {
                      type: 'string',
                    },
                    useSsl: {
                      type: 'boolean',
                    },
                    fromAddress: {
                      type: 'string',
                    },
                  },
                  nullable: true,
                },
              },
              nullable: true,
            },
            jira: {
              type: 'object',
              properties: {
                jiraRestClientConfiguration: {
                  required: ['password', 'serverUrl', 'username'],
                  type: 'object',
                  properties: {
                    serverUrl: {
                      type: 'string',
                    },
                    username: {
                      type: 'string',
                    },
                    password: {
                      type: 'string',
                    },
                  },
                  nullable: true,
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        parameters: {
          type: 'object',
          additionalProperties: {
            type: 'string',
          },
        },
      },
    },
    resolvedJobConfigs: {
      type: 'object',
      properties: {
        analyzer: {
          type: 'object',
          properties: {
            allowDynamicVersions: {
              type: 'boolean',
            },
            disabledPackageManagers: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            enabledPackageManagers: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            environmentConfig: {
              required: ['infrastructureServices'],
              type: 'object',
              properties: {
                infrastructureServices: {
                  type: 'array',
                  items: {
                    required: [
                      'name',
                      'passwordSecretRef',
                      'url',
                      'usernameSecretRef',
                    ],
                    type: 'object',
                    properties: {
                      name: {
                        type: 'string',
                      },
                      url: {
                        type: 'string',
                      },
                      description: {
                        type: 'string',
                        nullable: true,
                      },
                      usernameSecretRef: {
                        type: 'string',
                      },
                      passwordSecretRef: {
                        type: 'string',
                      },
                      excludeFromNetrc: {
                        type: 'boolean',
                      },
                    },
                  },
                },
                environmentDefinitions: {
                  type: 'object',
                  additionalProperties: {
                    type: 'array',
                    items: {
                      type: 'object',
                      additionalProperties: {
                        type: 'string',
                      },
                    },
                  },
                },
                environmentVariables: {
                  type: 'array',
                  items: {
                    required: ['name', 'secretName'],
                    type: 'object',
                    properties: {
                      name: {
                        type: 'string',
                      },
                      secretName: {
                        type: 'string',
                      },
                    },
                  },
                },
                strict: {
                  type: 'boolean',
                },
              },
              nullable: true,
            },
            packageCurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            packageManagerOptions: {
              type: 'object',
              additionalProperties: {
                type: 'object',
                properties: {
                  mustRunAfter: {
                    type: 'array',
                    nullable: true,
                    items: {
                      type: 'string',
                    },
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                    nullable: true,
                  },
                },
              },
              nullable: true,
            },
            repositoryConfigPath: {
              type: 'string',
              nullable: true,
            },
            skipExcluded: {
              type: 'boolean',
              nullable: true,
            },
          },
        },
        advisor: {
          type: 'object',
          properties: {
            advisors: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            skipExcluded: {
              type: 'boolean',
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        scanner: {
          type: 'object',
          properties: {
            createMissingArchives: {
              type: 'boolean',
              nullable: true,
            },
            detectedLicenseMappings: {
              type: 'object',
              additionalProperties: {
                type: 'string',
              },
              nullable: true,
            },
            ignorePatterns: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            projectScanners: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            scanners: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
            skipConcluded: {
              type: 'boolean',
              nullable: true,
            },
            skipExcluded: {
              type: 'boolean',
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        evaluator: {
          type: 'object',
          properties: {
            copyrightGarbageFile: {
              type: 'string',
              nullable: true,
            },
            licenseClassificationsFile: {
              type: 'string',
              nullable: true,
            },
            packageConfigurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            ruleSet: {
              type: 'string',
              nullable: true,
            },
          },
          nullable: true,
        },
        reporter: {
          type: 'object',
          properties: {
            copyrightGarbageFile: {
              type: 'string',
              nullable: true,
            },
            formats: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            licenseClassificationsFile: {
              type: 'string',
              nullable: true,
            },
            packageConfigurationProviders: {
              type: 'array',
              items: {
                required: ['type'],
                type: 'object',
                properties: {
                  type: {
                    type: 'string',
                  },
                  id: {
                    type: 'string',
                  },
                  enabled: {
                    type: 'boolean',
                  },
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            customLicenseTextDir: {
              type: 'string',
              nullable: true,
            },
            assetFiles: {
              type: 'array',
              items: {
                required: ['sourcePath'],
                type: 'object',
                properties: {
                  sourcePath: {
                    type: 'string',
                  },
                  targetFolder: {
                    type: 'string',
                    nullable: true,
                  },
                  targetName: {
                    type: 'string',
                    nullable: true,
                  },
                },
              },
            },
            assetDirectories: {
              type: 'array',
              items: {
                required: ['sourcePath'],
                type: 'object',
                properties: {
                  sourcePath: {
                    type: 'string',
                  },
                  targetFolder: {
                    type: 'string',
                    nullable: true,
                  },
                  targetName: {
                    type: 'string',
                    nullable: true,
                  },
                },
              },
            },
            config: {
              type: 'object',
              additionalProperties: {
                required: ['options', 'secrets'],
                type: 'object',
                properties: {
                  options: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                  secrets: {
                    type: 'object',
                    additionalProperties: {
                      type: 'string',
                    },
                  },
                },
              },
              nullable: true,
            },
            nameMappings: {
              type: 'object',
              additionalProperties: {
                required: ['namePrefix'],
                type: 'object',
                properties: {
                  namePrefix: {
                    type: 'string',
                  },
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        notifier: {
          type: 'object',
          properties: {
            notifierRules: {
              type: 'string',
              nullable: true,
            },
            resolutionsFile: {
              type: 'string',
              nullable: true,
            },
            mail: {
              type: 'object',
              properties: {
                recipientAddresses: {
                  type: 'array',
                  nullable: true,
                  items: {
                    type: 'string',
                  },
                },
                mailServerConfiguration: {
                  required: [
                    'fromAddress',
                    'hostName',
                    'password',
                    'port',
                    'useSsl',
                    'username',
                  ],
                  type: 'object',
                  properties: {
                    hostName: {
                      type: 'string',
                    },
                    port: {
                      type: 'number',
                    },
                    username: {
                      type: 'string',
                    },
                    password: {
                      type: 'string',
                    },
                    useSsl: {
                      type: 'boolean',
                    },
                    fromAddress: {
                      type: 'string',
                    },
                  },
                  nullable: true,
                },
              },
              nullable: true,
            },
            jira: {
              type: 'object',
              properties: {
                jiraRestClientConfiguration: {
                  required: ['password', 'serverUrl', 'username'],
                  type: 'object',
                  properties: {
                    serverUrl: {
                      type: 'string',
                    },
                    username: {
                      type: 'string',
                    },
                    password: {
                      type: 'string',
                    },
                  },
                  nullable: true,
                },
              },
              nullable: true,
            },
          },
          nullable: true,
        },
        parameters: {
          type: 'object',
          additionalProperties: {
            type: 'string',
          },
        },
      },
      nullable: true,
    },
    jobs: {
      type: 'object',
      properties: {
        analyzer: {
          required: ['configuration', 'createdAt', 'id', 'status'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            createdAt: {
              type: 'string',
            },
            startedAt: {
              type: 'string',
              nullable: true,
            },
            finishedAt: {
              type: 'string',
              nullable: true,
            },
            configuration: {
              type: 'object',
              properties: {
                allowDynamicVersions: {
                  type: 'boolean',
                },
                disabledPackageManagers: {
                  type: 'array',
                  nullable: true,
                  items: {
                    type: 'string',
                  },
                },
                enabledPackageManagers: {
                  type: 'array',
                  nullable: true,
                  items: {
                    type: 'string',
                  },
                },
                environmentConfig: {
                  required: ['infrastructureServices'],
                  type: 'object',
                  properties: {
                    infrastructureServices: {
                      type: 'array',
                      items: {
                        required: [
                          'name',
                          'passwordSecretRef',
                          'url',
                          'usernameSecretRef',
                        ],
                        type: 'object',
                        properties: {
                          name: {
                            type: 'string',
                          },
                          url: {
                            type: 'string',
                          },
                          description: {
                            type: 'string',
                            nullable: true,
                          },
                          usernameSecretRef: {
                            type: 'string',
                          },
                          passwordSecretRef: {
                            type: 'string',
                          },
                          excludeFromNetrc: {
                            type: 'boolean',
                          },
                        },
                      },
                    },
                    environmentDefinitions: {
                      type: 'object',
                      additionalProperties: {
                        type: 'array',
                        items: {
                          type: 'object',
                          additionalProperties: {
                            type: 'string',
                          },
                        },
                      },
                    },
                    environmentVariables: {
                      type: 'array',
                      items: {
                        required: ['name', 'secretName'],
                        type: 'object',
                        properties: {
                          name: {
                            type: 'string',
                          },
                          secretName: {
                            type: 'string',
                          },
                        },
                      },
                    },
                    strict: {
                      type: 'boolean',
                    },
                  },
                  nullable: true,
                },
                packageCurationProviders: {
                  type: 'array',
                  items: {
                    required: ['type'],
                    type: 'object',
                    properties: {
                      type: {
                        type: 'string',
                      },
                      id: {
                        type: 'string',
                      },
                      enabled: {
                        type: 'boolean',
                      },
                      options: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                      secrets: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                    },
                  },
                },
                packageManagerOptions: {
                  type: 'object',
                  additionalProperties: {
                    type: 'object',
                    properties: {
                      mustRunAfter: {
                        type: 'array',
                        nullable: true,
                        items: {
                          type: 'string',
                        },
                      },
                      options: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                        nullable: true,
                      },
                    },
                  },
                  nullable: true,
                },
                repositoryConfigPath: {
                  type: 'string',
                  nullable: true,
                },
                skipExcluded: {
                  type: 'boolean',
                  nullable: true,
                },
              },
            },
            status: {
              type: 'string',
              enum: ['CREATED', 'SCHEDULED', 'RUNNING', 'FAILED', 'FINISHED'],
            },
          },
          nullable: true,
        },
        advisor: {
          required: ['configuration', 'createdAt', 'id', 'status'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            createdAt: {
              type: 'string',
            },
            startedAt: {
              type: 'string',
              nullable: true,
            },
            finishedAt: {
              type: 'string',
              nullable: true,
            },
            configuration: {
              type: 'object',
              properties: {
                advisors: {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
                skipExcluded: {
                  type: 'boolean',
                },
                config: {
                  type: 'object',
                  additionalProperties: {
                    required: ['options', 'secrets'],
                    type: 'object',
                    properties: {
                      options: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                      secrets: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                    },
                  },
                  nullable: true,
                },
              },
            },
            status: {
              type: 'string',
              enum: ['CREATED', 'SCHEDULED', 'RUNNING', 'FAILED', 'FINISHED'],
            },
          },
          nullable: true,
        },
        scanner: {
          required: ['configuration', 'createdAt', 'id', 'status'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            createdAt: {
              type: 'string',
            },
            startedAt: {
              type: 'string',
              nullable: true,
            },
            finishedAt: {
              type: 'string',
              nullable: true,
            },
            configuration: {
              type: 'object',
              properties: {
                createMissingArchives: {
                  type: 'boolean',
                  nullable: true,
                },
                detectedLicenseMappings: {
                  type: 'object',
                  additionalProperties: {
                    type: 'string',
                  },
                  nullable: true,
                },
                ignorePatterns: {
                  type: 'array',
                  nullable: true,
                  items: {
                    type: 'string',
                  },
                },
                projectScanners: {
                  type: 'array',
                  nullable: true,
                  items: {
                    type: 'string',
                  },
                },
                scanners: {
                  type: 'array',
                  nullable: true,
                  items: {
                    type: 'string',
                  },
                },
                skipConcluded: {
                  type: 'boolean',
                  nullable: true,
                },
                skipExcluded: {
                  type: 'boolean',
                },
                config: {
                  type: 'object',
                  additionalProperties: {
                    required: ['options', 'secrets'],
                    type: 'object',
                    properties: {
                      options: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                      secrets: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                    },
                  },
                  nullable: true,
                },
              },
            },
            status: {
              type: 'string',
              enum: ['CREATED', 'SCHEDULED', 'RUNNING', 'FAILED', 'FINISHED'],
            },
          },
          nullable: true,
        },
        evaluator: {
          required: ['configuration', 'createdAt', 'id', 'status'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            createdAt: {
              type: 'string',
            },
            startedAt: {
              type: 'string',
              nullable: true,
            },
            finishedAt: {
              type: 'string',
              nullable: true,
            },
            configuration: {
              type: 'object',
              properties: {
                copyrightGarbageFile: {
                  type: 'string',
                  nullable: true,
                },
                licenseClassificationsFile: {
                  type: 'string',
                  nullable: true,
                },
                packageConfigurationProviders: {
                  type: 'array',
                  items: {
                    required: ['type'],
                    type: 'object',
                    properties: {
                      type: {
                        type: 'string',
                      },
                      id: {
                        type: 'string',
                      },
                      enabled: {
                        type: 'boolean',
                      },
                      options: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                      secrets: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                    },
                  },
                },
                resolutionsFile: {
                  type: 'string',
                  nullable: true,
                },
                ruleSet: {
                  type: 'string',
                  nullable: true,
                },
              },
            },
            status: {
              type: 'string',
              enum: ['CREATED', 'SCHEDULED', 'RUNNING', 'FAILED', 'FINISHED'],
            },
          },
          nullable: true,
        },
        reporter: {
          required: ['configuration', 'createdAt', 'id', 'status'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            createdAt: {
              type: 'string',
            },
            startedAt: {
              type: 'string',
              nullable: true,
            },
            finishedAt: {
              type: 'string',
              nullable: true,
            },
            configuration: {
              type: 'object',
              properties: {
                copyrightGarbageFile: {
                  type: 'string',
                  nullable: true,
                },
                formats: {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
                licenseClassificationsFile: {
                  type: 'string',
                  nullable: true,
                },
                packageConfigurationProviders: {
                  type: 'array',
                  items: {
                    required: ['type'],
                    type: 'object',
                    properties: {
                      type: {
                        type: 'string',
                      },
                      id: {
                        type: 'string',
                      },
                      enabled: {
                        type: 'boolean',
                      },
                      options: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                      secrets: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                    },
                  },
                },
                resolutionsFile: {
                  type: 'string',
                  nullable: true,
                },
                customLicenseTextDir: {
                  type: 'string',
                  nullable: true,
                },
                assetFiles: {
                  type: 'array',
                  items: {
                    required: ['sourcePath'],
                    type: 'object',
                    properties: {
                      sourcePath: {
                        type: 'string',
                      },
                      targetFolder: {
                        type: 'string',
                        nullable: true,
                      },
                      targetName: {
                        type: 'string',
                        nullable: true,
                      },
                    },
                  },
                },
                assetDirectories: {
                  type: 'array',
                  items: {
                    required: ['sourcePath'],
                    type: 'object',
                    properties: {
                      sourcePath: {
                        type: 'string',
                      },
                      targetFolder: {
                        type: 'string',
                        nullable: true,
                      },
                      targetName: {
                        type: 'string',
                        nullable: true,
                      },
                    },
                  },
                },
                config: {
                  type: 'object',
                  additionalProperties: {
                    required: ['options', 'secrets'],
                    type: 'object',
                    properties: {
                      options: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                      secrets: {
                        type: 'object',
                        additionalProperties: {
                          type: 'string',
                        },
                      },
                    },
                  },
                  nullable: true,
                },
                nameMappings: {
                  type: 'object',
                  additionalProperties: {
                    required: ['namePrefix'],
                    type: 'object',
                    properties: {
                      namePrefix: {
                        type: 'string',
                      },
                    },
                  },
                  nullable: true,
                },
              },
            },
            status: {
              type: 'string',
              enum: ['CREATED', 'SCHEDULED', 'RUNNING', 'FAILED', 'FINISHED'],
            },
            reportFilenames: {
              type: 'array',
              nullable: true,
              items: {
                type: 'string',
              },
            },
          },
          nullable: true,
        },
        notifier: {
          required: ['configuration', 'createdAt', 'id', 'status'],
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            createdAt: {
              type: 'string',
            },
            startedAt: {
              type: 'string',
              nullable: true,
            },
            finishedAt: {
              type: 'string',
              nullable: true,
            },
            configuration: {
              type: 'object',
              properties: {
                notifierRules: {
                  type: 'string',
                  nullable: true,
                },
                resolutionsFile: {
                  type: 'string',
                  nullable: true,
                },
                mail: {
                  type: 'object',
                  properties: {
                    recipientAddresses: {
                      type: 'array',
                      nullable: true,
                      items: {
                        type: 'string',
                      },
                    },
                    mailServerConfiguration: {
                      required: [
                        'fromAddress',
                        'hostName',
                        'password',
                        'port',
                        'useSsl',
                        'username',
                      ],
                      type: 'object',
                      properties: {
                        hostName: {
                          type: 'string',
                        },
                        port: {
                          type: 'number',
                        },
                        username: {
                          type: 'string',
                        },
                        password: {
                          type: 'string',
                        },
                        useSsl: {
                          type: 'boolean',
                        },
                        fromAddress: {
                          type: 'string',
                        },
                      },
                      nullable: true,
                    },
                  },
                  nullable: true,
                },
                jira: {
                  type: 'object',
                  properties: {
                    jiraRestClientConfiguration: {
                      required: ['password', 'serverUrl', 'username'],
                      type: 'object',
                      properties: {
                        serverUrl: {
                          type: 'string',
                        },
                        username: {
                          type: 'string',
                        },
                        password: {
                          type: 'string',
                        },
                      },
                      nullable: true,
                    },
                  },
                  nullable: true,
                },
              },
            },
            status: {
              type: 'string',
              enum: ['CREATED', 'SCHEDULED', 'RUNNING', 'FAILED', 'FINISHED'],
            },
          },
          nullable: true,
        },
      },
    },
    status: {
      type: 'string',
      enum: ['CREATED', 'ACTIVE', 'FINISHED', 'FAILED'],
    },
    labels: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
    },
    issues: {
      type: 'array',
      items: {
        required: ['message', 'severity', 'source', 'timestamp'],
        type: 'object',
        properties: {
          timestamp: {
            type: 'string',
          },
          source: {
            type: 'string',
          },
          message: {
            type: 'string',
          },
          severity: {
            type: 'string',
          },
        },
      },
    },
    jobConfigContext: {
      type: 'string',
      nullable: true,
    },
    resolvedJobConfigContext: {
      type: 'string',
      nullable: true,
    },
  },
} as const;
