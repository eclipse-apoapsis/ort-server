// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  GetLivenessResponse,
  GetReportByRunIdAndTokenData,
  GetReportByRunIdAndTokenResponse,
  GetReportByRunIdAndFileNameData,
  GetReportByRunIdAndFileNameResponse,
  GetOrganizationsData,
  GetOrganizationsResponse,
  PostOrganizationsData,
  PostOrganizationsResponse,
  GetOrganizationByIdData,
  GetOrganizationByIdResponse,
  DeleteOrganizationByIdData,
  DeleteOrganizationByIdResponse,
  PatchOrganizationByIdData,
  PatchOrganizationByIdResponse,
  GetOrganizationProductsData,
  GetOrganizationProductsResponse,
  PostProductData,
  PostProductResponse,
  GetProductByIdData,
  GetProductByIdResponse,
  DeleteProductByIdData,
  DeleteProductByIdResponse,
  PatchProductByIdData,
  PatchProductByIdResponse,
  GetSecretsByOrganizationIdData,
  GetSecretsByOrganizationIdResponse,
  PostSecretForOrganizationData,
  PostSecretForOrganizationResponse,
  GetSecretByOrganizationIdAndNameData,
  GetSecretByOrganizationIdAndNameResponse,
  DeleteSecretByOrganizationIdAndNameData,
  DeleteSecretByOrganizationIdAndNameResponse,
  PatchSecretByOrganizationIdAndNameData,
  PatchSecretByOrganizationIdAndNameResponse,
  GetSecretsByProductIdData,
  GetSecretsByProductIdResponse,
  PostSecretForProductData,
  PostSecretForProductResponse,
  GetSecretByProductIdAndNameData,
  GetSecretByProductIdAndNameResponse,
  DeleteSecretByProductIdAndNameData,
  DeleteSecretByProductIdAndNameResponse,
  PatchSecretByProductIdIdAndNameData,
  PatchSecretByProductIdIdAndNameResponse,
  GetSecretsByRepositoryIdData,
  GetSecretsByRepositoryIdResponse,
  PostSecretForRepositoryData,
  PostSecretForRepositoryResponse,
  GetSecretByRepositoryIdAndNameData,
  GetSecretByRepositoryIdAndNameResponse,
  DeleteSecretByRepositoryIdAndNameData,
  DeleteSecretByRepositoryIdAndNameResponse,
  PatchSecretByRepositoryIdIdAndNameData,
  PatchSecretByRepositoryIdIdAndNameResponse,
  GetInfrastructureServicesByOrganizationIdData,
  GetInfrastructureServicesByOrganizationIdResponse,
  PostInfrastructureServiceForOrganizationData,
  PostInfrastructureServiceForOrganizationResponse,
  DeleteInfrastructureServiceForOrganizationIdAndNameData,
  DeleteInfrastructureServiceForOrganizationIdAndNameResponse,
  PatchInfrastructureServiceForOrganizationIdAndNameData,
  PatchInfrastructureServiceForOrganizationIdAndNameResponse,
  GetRepositoriesByProductIdData,
  GetRepositoriesByProductIdResponse,
  CreateRepositoryData,
  CreateRepositoryResponse,
  GetRepositoryByIdData,
  GetRepositoryByIdResponse,
  DeleteRepositoryByIdData,
  DeleteRepositoryByIdResponse,
  PatchRepositoryByIdData,
  PatchRepositoryByIdResponse,
  GetOrtRunsData,
  GetOrtRunsResponse,
  PostOrtRunData,
  PostOrtRunResponse,
  GetOrtRunByIndexData,
  GetOrtRunByIndexResponse,
  GetLogsByRunIdData,
  GetLogsByRunIdResponse,
} from './types.gen';

export class HealthService {
  /**
   * Get the health of the ORT server.
   * @returns Liveness Success
   * @throws ApiError
   */
  public static getLiveness(): CancelablePromise<GetLivenessResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/liveness',
    });
  }
}

export class ReportsService {
  /**
   * Download a report of an ORT run using a token. This endpoint does not require authentication.
   * @param data The data for the request.
   * @param data.runId The ID of the ORT run.
   * @param data.token The token providing access to the report file to be downloaded.
   * @returns string Success. The response body contains the requested report file.
   * @throws ApiError
   */
  public static getReportByRunIdAndToken(
    data: GetReportByRunIdAndTokenData = {}
  ): CancelablePromise<GetReportByRunIdAndTokenResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/runs/{runId}/downloads/report/{token}',
      path: {
        runId: data.runId,
        token: data.token,
      },
      responseHeader: 'Content-Type',
      errors: {
        404: 'The provided token could not be resolved or has expired.',
      },
    });
  }

  /**
   * Download a report of an ORT run.
   * @param data The data for the request.
   * @param data.runId The ID of the ORT run.
   * @param data.fileName The name of the report file to be downloaded.
   * @returns string Success. The response body contains the requested report file.
   * @throws ApiError
   */
  public static getReportByRunIdAndFileName(
    data: GetReportByRunIdAndFileNameData = {}
  ): CancelablePromise<GetReportByRunIdAndFileNameResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/runs/{runId}/reporter/{fileName}',
      path: {
        runId: data.runId,
        fileName: data.fileName,
      },
      responseHeader: 'Content-Type',
      errors: {
        401: 'Invalid Token',
        404: 'The requested report file or the ORT run could not be resolved.',
      },
    });
  }
}

export class OrganizationsService {
  /**
   * Get all organizations.
   * @param data The data for the request.
   * @param data.limit The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   * @param data.offset The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   * @param data.sort Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   * @returns org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Organization_ Success
   * @throws ApiError
   */
  public static getOrganizations(
    data: GetOrganizationsData = {}
  ): CancelablePromise<GetOrganizationsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/organizations',
      query: {
        limit: data.limit,
        offset: data.offset,
        sort: data.sort,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Create an organization.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Organization Success
   * @throws ApiError
   */
  public static postOrganizations(
    data: PostOrganizationsData = {}
  ): CancelablePromise<PostOrganizationsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/organizations',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get details of an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @returns Organization Success
   * @throws ApiError
   */
  public static getOrganizationById(
    data: GetOrganizationByIdData = {}
  ): CancelablePromise<GetOrganizationByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/organizations/{organizationId}',
      path: {
        organizationId: data.organizationId,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Delete an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @returns void Success
   * @throws ApiError
   */
  public static deleteOrganizationById(
    data: DeleteOrganizationByIdData = {}
  ): CancelablePromise<DeleteOrganizationByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/organizations/{organizationId}',
      path: {
        organizationId: data.organizationId,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Update an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @param data.requestBody Set the values that should be updated. To delete a value, set it explicitly to null.
   * @returns Organization Success
   * @throws ApiError
   */
  public static patchOrganizationById(
    data: PatchOrganizationByIdData = {}
  ): CancelablePromise<PatchOrganizationByIdResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/organizations/{organizationId}',
      path: {
        organizationId: data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }
}

export class ProductsService {
  /**
   * Get all products of an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @param data.limit The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   * @param data.offset The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   * @param data.sort Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   * @returns org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Product_ Success
   * @throws ApiError
   */
  public static getOrganizationProducts(
    data: GetOrganizationProductsData = {}
  ): CancelablePromise<GetOrganizationProductsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/organizations/{organizationId}/products',
      path: {
        organizationId: data.organizationId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        sort: data.sort,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Create a product for an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @param data.requestBody
   * @returns Product Success
   * @throws ApiError
   */
  public static postProduct(
    data: PostProductData = {}
  ): CancelablePromise<PostProductResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/organizations/{organizationId}/products',
      path: {
        organizationId: data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get details of a product.
   * @param data The data for the request.
   * @param data.productId The product's ID.
   * @returns Product Success
   * @throws ApiError
   */
  public static getProductById(
    data: GetProductByIdData = {}
  ): CancelablePromise<GetProductByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/products/{productId}',
      path: {
        productId: data.productId,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Delete a product.
   * @param data The data for the request.
   * @param data.productId The product's ID.
   * @returns void Success
   * @throws ApiError
   */
  public static deleteProductById(
    data: DeleteProductByIdData = {}
  ): CancelablePromise<DeleteProductByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/products/{productId}',
      path: {
        productId: data.productId,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Update a product.
   * @param data The data for the request.
   * @param data.productId The product's ID.
   * @param data.requestBody Set the values that should be updated. To delete a value, set it explicitly to null.
   * @returns Product Success
   * @throws ApiError
   */
  public static patchProductById(
    data: PatchProductByIdData = {}
  ): CancelablePromise<PatchProductByIdResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/products/{productId}',
      path: {
        productId: data.productId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }
}

export class SecretsService {
  /**
   * Get all secrets of an organization.
   * @param data The data for the request.
   * @param data.organizationId The ID of an organization.
   * @param data.limit The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   * @param data.offset The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   * @param data.sort Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   * @returns org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_ Success
   * @throws ApiError
   */
  public static getSecretsByOrganizationId(
    data: GetSecretsByOrganizationIdData = {}
  ): CancelablePromise<GetSecretsByOrganizationIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/organizations/{organizationId}/secrets',
      path: {
        organizationId: data.organizationId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        sort: data.sort,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Create a secret for an organization.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Secret Success
   * @throws ApiError
   */
  public static postSecretForOrganization(
    data: PostSecretForOrganizationData = {}
  ): CancelablePromise<PostSecretForOrganizationResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/organizations/{organizationId}/secrets',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get details of a secret of an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @param data.secretName The secret's name.
   * @returns Secret Success
   * @throws ApiError
   */
  public static getSecretByOrganizationIdAndName(
    data: GetSecretByOrganizationIdAndNameData = {}
  ): CancelablePromise<GetSecretByOrganizationIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/organizations/{organizationId}/secrets/{secretName}',
      path: {
        organizationId: data.organizationId,
        secretName: data.secretName,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Delete a secret from an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @param data.secretName The secret's name.
   * @returns void Success
   * @throws ApiError
   */
  public static deleteSecretByOrganizationIdAndName(
    data: DeleteSecretByOrganizationIdAndNameData = {}
  ): CancelablePromise<DeleteSecretByOrganizationIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/organizations/{organizationId}/secrets/{secretName}',
      path: {
        organizationId: data.organizationId,
        secretName: data.secretName,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Update a secret of an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @param data.secretName The secret's name.
   * @param data.requestBody Set the values that should be updated. To delete a value, set it explicitly to null.
   * @returns Secret Success
   * @throws ApiError
   */
  public static patchSecretByOrganizationIdAndName(
    data: PatchSecretByOrganizationIdAndNameData = {}
  ): CancelablePromise<PatchSecretByOrganizationIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/organizations/{organizationId}/secrets/{secretName}',
      path: {
        organizationId: data.organizationId,
        secretName: data.secretName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get all secrets of a specific product.
   * @param data The data for the request.
   * @param data.productId The ID of a product.
   * @param data.limit The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   * @param data.offset The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   * @param data.sort Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   * @returns org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_ Success
   * @throws ApiError
   */
  public static getSecretsByProductId(
    data: GetSecretsByProductIdData = {}
  ): CancelablePromise<GetSecretsByProductIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/products/{productId}/secrets',
      path: {
        productId: data.productId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        sort: data.sort,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Create a secret for a product.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Secret Success
   * @throws ApiError
   */
  public static postSecretForProduct(
    data: PostSecretForProductData = {}
  ): CancelablePromise<PostSecretForProductResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/products/{productId}/secrets',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get details of a secret of a product.
   * @param data The data for the request.
   * @param data.productId The product's ID.
   * @param data.secretName The secret's name.
   * @returns Secret Success
   * @throws ApiError
   */
  public static getSecretByProductIdAndName(
    data: GetSecretByProductIdAndNameData = {}
  ): CancelablePromise<GetSecretByProductIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/products/{productId}/secrets/{secretName}',
      path: {
        productId: data.productId,
        secretName: data.secretName,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Delete a secret from a product.
   * @param data The data for the request.
   * @param data.productId The product's ID.
   * @param data.secretName The secret's name.
   * @returns void Success
   * @throws ApiError
   */
  public static deleteSecretByProductIdAndName(
    data: DeleteSecretByProductIdAndNameData = {}
  ): CancelablePromise<DeleteSecretByProductIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/products/{productId}/secrets/{secretName}',
      path: {
        productId: data.productId,
        secretName: data.secretName,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Update a secret of a product.
   * @param data The data for the request.
   * @param data.productId The product's ID.
   * @param data.secretName The secret's name.
   * @param data.requestBody Set the values that should be updated. To delete a value, set it explicitly to null.
   * @returns Secret Success
   * @throws ApiError
   */
  public static patchSecretByProductIdIdAndName(
    data: PatchSecretByProductIdIdAndNameData = {}
  ): CancelablePromise<PatchSecretByProductIdIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/products/{productId}/secrets/{secretName}',
      path: {
        productId: data.productId,
        secretName: data.secretName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get all secrets of a repository.
   * @param data The data for the request.
   * @param data.repositoryId The ID of a repository.
   * @param data.limit The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   * @param data.offset The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   * @param data.sort Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   * @returns org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_ Success
   * @throws ApiError
   */
  public static getSecretsByRepositoryId(
    data: GetSecretsByRepositoryIdData = {}
  ): CancelablePromise<GetSecretsByRepositoryIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/repositories/{repositoryId}/secrets',
      path: {
        repositoryId: data.repositoryId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        sort: data.sort,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Create a secret for a repository.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Secret Success
   * @throws ApiError
   */
  public static postSecretForRepository(
    data: PostSecretForRepositoryData = {}
  ): CancelablePromise<PostSecretForRepositoryResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/repositories/{repositoryId}/secrets',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get details of a secret of a repository.
   * @param data The data for the request.
   * @param data.repositoryId The repository's ID.
   * @param data.secretName The secret's name.
   * @returns Secret Success
   * @throws ApiError
   */
  public static getSecretByRepositoryIdAndName(
    data: GetSecretByRepositoryIdAndNameData = {}
  ): CancelablePromise<GetSecretByRepositoryIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/repositories/{repositoryId}/secrets/{secretName}',
      path: {
        repositoryId: data.repositoryId,
        secretName: data.secretName,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Delete a secret from a repository.
   * @param data The data for the request.
   * @param data.repositoryId The repository's ID.
   * @param data.secretName The secret's name.
   * @returns void Success
   * @throws ApiError
   */
  public static deleteSecretByRepositoryIdAndName(
    data: DeleteSecretByRepositoryIdAndNameData = {}
  ): CancelablePromise<DeleteSecretByRepositoryIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/repositories/{repositoryId}/secrets/{secretName}',
      path: {
        repositoryId: data.repositoryId,
        secretName: data.secretName,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Update a secret of a repository.
   * @param data The data for the request.
   * @param data.repositoryIdId The repository's ID.
   * @param data.secretName The secret's name.
   * @param data.requestBody Set the values that should be updated. To delete a value, set it explicitly to null.
   * @returns Secret Success
   * @throws ApiError
   */
  public static patchSecretByRepositoryIdIdAndName(
    data: PatchSecretByRepositoryIdIdAndNameData = {}
  ): CancelablePromise<PatchSecretByRepositoryIdIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/repositories/{repositoryId}/secrets/{secretName}',
      path: {
        repositoryIdId: data.repositoryIdId,
        secretName: data.secretName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }
}

export class InfrastructureServicesService {
  /**
   * List all infrastructure services of an organization.
   * @param data The data for the request.
   * @param data.organizationId The ID of an organization.
   * @param data.limit The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   * @param data.offset The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   * @param data.sort Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   * @returns org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_InfrastructureService_ Success
   * @throws ApiError
   */
  public static getInfrastructureServicesByOrganizationId(
    data: GetInfrastructureServicesByOrganizationIdData = {}
  ): CancelablePromise<GetInfrastructureServicesByOrganizationIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/organizations/{organizationId}/infrastructure-services',
      path: {
        organizationId: data.organizationId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        sort: data.sort,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Create an infrastructure service for an organization.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InfrastructureService Success
   * @throws ApiError
   */
  public static postInfrastructureServiceForOrganization(
    data: PostInfrastructureServiceForOrganizationData = {}
  ): CancelablePromise<PostInfrastructureServiceForOrganizationResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/organizations/{organizationId}/infrastructure-services',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Delete an infrastructure service from an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @param data.serviceName The name of the infrastructure service.
   * @returns void Success
   * @throws ApiError
   */
  public static deleteInfrastructureServiceForOrganizationIdAndName(
    data: DeleteInfrastructureServiceForOrganizationIdAndNameData = {}
  ): CancelablePromise<DeleteInfrastructureServiceForOrganizationIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/organizations/{organizationId}/infrastructure-services/{serviceName}',
      path: {
        organizationId: data.organizationId,
        serviceName: data.serviceName,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Update an infrastructure service for an organization.
   * @param data The data for the request.
   * @param data.organizationId The organization's ID.
   * @param data.serviceName The name of the infrastructure service.
   * @param data.requestBody Set the values that should be updated. To delete a value, set it explicitly to null.
   * @returns InfrastructureService Success
   * @throws ApiError
   */
  public static patchInfrastructureServiceForOrganizationIdAndName(
    data: PatchInfrastructureServiceForOrganizationIdAndNameData = {}
  ): CancelablePromise<PatchInfrastructureServiceForOrganizationIdAndNameResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/organizations/{organizationId}/infrastructure-services/{serviceName}',
      path: {
        organizationId: data.organizationId,
        serviceName: data.serviceName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }
}

export class RepositoriesService {
  /**
   * Get all repositories of a product.
   * @param data The data for the request.
   * @param data.productId The product's ID.
   * @param data.limit The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   * @param data.offset The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   * @param data.sort Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   * @returns org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Repository_ Success
   * @throws ApiError
   */
  public static getRepositoriesByProductId(
    data: GetRepositoriesByProductIdData = {}
  ): CancelablePromise<GetRepositoriesByProductIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/products/{productId}/repositories',
      path: {
        productId: data.productId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        sort: data.sort,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Create a repository for a product.
   * @param data The data for the request.
   * @param data.productId The product's ID.
   * @param data.requestBody
   * @returns Repository Success
   * @throws ApiError
   */
  public static createRepository(
    data: CreateRepositoryData = {}
  ): CancelablePromise<CreateRepositoryResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/products/{productId}/repositories',
      path: {
        productId: data.productId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get details of a repository.
   * @param data The data for the request.
   * @param data.repositoryId The repository's ID.
   * @returns Repository Success
   * @throws ApiError
   */
  public static getRepositoryById(
    data: GetRepositoryByIdData = {}
  ): CancelablePromise<GetRepositoryByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/repositories/{repositoryId}',
      path: {
        repositoryId: data.repositoryId,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Delete a repository.
   * @param data The data for the request.
   * @param data.repositoryId The repository's ID.
   * @returns void Success
   * @throws ApiError
   */
  public static deleteRepositoryById(
    data: DeleteRepositoryByIdData = {}
  ): CancelablePromise<DeleteRepositoryByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/repositories/{repositoryId}',
      path: {
        repositoryId: data.repositoryId,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Update a repository.
   * @param data The data for the request.
   * @param data.repositoryId The repository's ID.
   * @param data.requestBody Set the values that should be updated. To delete a value, set it explicitly to null.
   * @returns Repository Success
   * @throws ApiError
   */
  public static patchRepositoryById(
    data: PatchRepositoryByIdData = {}
  ): CancelablePromise<PatchRepositoryByIdResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/repositories/{repositoryId}',
      path: {
        repositoryId: data.repositoryId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get all ORT runs of a repository.
   * @param data The data for the request.
   * @param data.repositoryId The repository's ID.
   * @param data.limit The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   * @param data.offset The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   * @param data.sort Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   * @returns org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_OrtRunSummary_ Success
   * @throws ApiError
   */
  public static getOrtRuns(
    data: GetOrtRunsData = {}
  ): CancelablePromise<GetOrtRunsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/repositories/{repositoryId}/runs',
      path: {
        repositoryId: data.repositoryId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        sort: data.sort,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Create an ORT run for a repository.
   * @param data The data for the request.
   * @param data.repositoryId The repository's ID.
   * @param data.requestBody
   * @returns OrtRun Success
   * @throws ApiError
   */
  public static postOrtRun(
    data: PostOrtRunData = {}
  ): CancelablePromise<PostOrtRunResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/repositories/{repositoryId}/runs',
      path: {
        repositoryId: data.repositoryId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid Token',
      },
    });
  }

  /**
   * Get details of an ORT run of a repository.
   * @param data The data for the request.
   * @param data.repositoryId The repository's ID.
   * @param data.ortRunIndex The index of an ORT run.
   * @returns OrtRun Success
   * @throws ApiError
   */
  public static getOrtRunByIndex(
    data: GetOrtRunByIndexData = {}
  ): CancelablePromise<GetOrtRunByIndexResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/repositories/{repositoryId}/runs/{ortRunIndex}',
      path: {
        repositoryId: data.repositoryId,
        ortRunIndex: data.ortRunIndex,
      },
      errors: {
        401: 'Invalid Token',
      },
    });
  }
}

export class LogsService {
  /**
   * Download an archive with selected logs of an ORT run.
   * @param data The data for the request.
   * @param data.runId The ID of the ORT run.
   * @param data.level The log level; can be one of 'DEBUG', 'INFO', 'WARN', 'ERROR' (ignoring case).Only logs of this level or higher are retrieved. Defaults to 'INFO' if missing.
   * @param data.steps Defines the run steps for which logs are to be retrieved. This is a comma-separated string with the following allowed steps: 'CONFIG', 'ANALYZER', 'ADVISOR', 'SCANNER', 'EVALUATOR', 'REPORTER' (ignoring case). If missing, the logs for all steps are retrieved.
   * @returns unknown Success. The response body contains a Zip archive with the selected log files.
   * @throws ApiError
   */
  public static getLogsByRunId(
    data: GetLogsByRunIdData = {}
  ): CancelablePromise<GetLogsByRunIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/runs/{runId}/logs',
      path: {
        runId: data.runId,
      },
      query: {
        level: data.level,
        steps: data.steps,
      },
      errors: {
        400: 'Invalid values have been provided for the log level or steps parameters.',
        401: 'Invalid Token',
        404: 'The ORT run does not exist.',
      },
    });
  }
}
