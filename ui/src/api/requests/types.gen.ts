// This file is auto-generated by @hey-api/openapi-ts

export type Liveness = {
  message: string;
};

export type org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Organization_ =
  {
    data: Array<{
      id: number;
      name: string;
      description?: string | null;
    }>;
    options: {
      limit?: number | null;
      offset?: number | null;
      sortProperties?: Array<{
        name: string;
        direction: 'ASCENDING' | 'DESCENDING';
      }> | null;
    };
  };

export type CreateOrganization = {
  name: string;
  description?: string | null;
};

export type Organization = {
  id: number;
  name: string;
  description?: string | null;
};

export type UpdateOrganization = {
  name?: string;
  description?: string | null;
};

export type org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Product_ =
  {
    data: Array<{
      id: number;
      name: string;
      description?: string | null;
    }>;
    options: {
      limit?: number | null;
      offset?: number | null;
      sortProperties?: Array<{
        name: string;
        direction: 'ASCENDING' | 'DESCENDING';
      }> | null;
    };
  };

export type CreateProduct = {
  name: string;
  description?: string | null;
};

export type Product = {
  id: number;
  name: string;
  description?: string | null;
};

export type org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_ =
  {
    data: Array<{
      name: string;
      description: string | null;
    }>;
    options: {
      limit?: number | null;
      offset?: number | null;
      sortProperties?: Array<{
        name: string;
        direction: 'ASCENDING' | 'DESCENDING';
      }> | null;
    };
  };

export type Secret = {
  name: string;
  description: string | null;
};

export type UpdateSecret = {
  name?: string;
  value?: string;
  description?: string;
};

export type CreateSecret = {
  name: string;
  value: string;
  description: string | null;
};

export type org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_InfrastructureService_ =
  {
    data: Array<{
      name: string;
      url: string;
      description?: string | null;
      usernameSecretRef: string;
      passwordSecretRef: string;
      excludeFromNetrc?: boolean;
    }>;
    options: {
      limit?: number | null;
      offset?: number | null;
      sortProperties?: Array<{
        name: string;
        direction: 'ASCENDING' | 'DESCENDING';
      }> | null;
    };
  };

export type CreateInfrastructureService = {
  name: string;
  url: string;
  description?: string | null;
  usernameSecretRef: string;
  passwordSecretRef: string;
  excludeFromNetrc?: boolean;
};

export type InfrastructureService = {
  name: string;
  url: string;
  description?: string | null;
  usernameSecretRef: string;
  passwordSecretRef: string;
  excludeFromNetrc?: boolean;
};

export type UpdateInfrastructureService = {
  url?: string;
  description?: string | null;
  usernameSecretRef?: string;
  passwordSecretRef?: string;
  excludeFromNetrc?: boolean;
};

export type UpdateProduct = {
  name?: string;
  description?: string | null;
};

export type org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Repository_ =
  {
    data: Array<{
      id: number;
      type: 'GIT' | 'GIT_REPO' | 'MERCURIAL' | 'SUBVERSION' | 'CVS';
      url: string;
    }>;
    options: {
      limit?: number | null;
      offset?: number | null;
      sortProperties?: Array<{
        name: string;
        direction: 'ASCENDING' | 'DESCENDING';
      }> | null;
    };
  };

export type CreateRepository = {
  type: 'GIT' | 'GIT_REPO' | 'MERCURIAL' | 'SUBVERSION' | 'CVS';
  url: string;
};

export type Repository = {
  id: number;
  type: 'GIT' | 'GIT_REPO' | 'MERCURIAL' | 'SUBVERSION' | 'CVS';
  url: string;
};

export type UpdateRepository = {
  type?: 'GIT' | 'GIT_REPO' | 'MERCURIAL' | 'SUBVERSION' | 'CVS';
  url?: string;
};

export type org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_OrtRunSummary_ =
  {
    data: Array<{
      id: number;
      index: number;
      repositoryId: number;
      revision: string;
      path?: string | null;
      createdAt: string;
      finishedAt?: string | null;
      jobs: {
        analyzer?: {
          id: number;
          createdAt: string;
          startedAt?: string | null;
          finishedAt?: string | null;
          status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
        } | null;
        advisor?: {
          id: number;
          createdAt: string;
          startedAt?: string | null;
          finishedAt?: string | null;
          status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
        } | null;
        scanner?: {
          id: number;
          createdAt: string;
          startedAt?: string | null;
          finishedAt?: string | null;
          status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
        } | null;
        evaluator?: {
          id: number;
          createdAt: string;
          startedAt?: string | null;
          finishedAt?: string | null;
          status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
        } | null;
        reporter?: {
          id: number;
          createdAt: string;
          startedAt?: string | null;
          finishedAt?: string | null;
          status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
        } | null;
      };
      status: 'CREATED' | 'ACTIVE' | 'FINISHED' | 'FAILED';
      labels: {
        [key: string]: string;
      };
      jobConfigContext?: string | null;
      resolvedJobConfigContext?: string | null;
    }>;
    options: {
      limit?: number | null;
      offset?: number | null;
      sortProperties?: Array<{
        name: string;
        direction: 'ASCENDING' | 'DESCENDING';
      }> | null;
    };
  };

export type CreateOrtRun = {
  revision: string;
  path?: string | null;
  jobConfigs: {
    analyzer?: {
      allowDynamicVersions?: boolean;
      disabledPackageManagers?: Array<string> | null;
      enabledPackageManagers?: Array<string> | null;
      environmentConfig?: {
        infrastructureServices: Array<{
          name: string;
          url: string;
          description?: string | null;
          usernameSecretRef: string;
          passwordSecretRef: string;
          excludeFromNetrc?: boolean;
        }>;
        environmentDefinitions?: {
          [key: string]: Array<{
            [key: string]: string;
          }>;
        };
        environmentVariables?: Array<{
          name: string;
          secretName: string;
        }>;
        strict?: boolean;
      } | null;
      packageCurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      packageManagerOptions?: {
        [key: string]: {
          mustRunAfter?: Array<string> | null;
          options?: {
            [key: string]: string;
          } | null;
        };
      } | null;
      repositoryConfigPath?: string | null;
      skipExcluded?: boolean | null;
    };
    advisor?: {
      advisors?: Array<string>;
      skipExcluded?: boolean;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
    } | null;
    scanner?: {
      createMissingArchives?: boolean | null;
      detectedLicenseMappings?: {
        [key: string]: string;
      } | null;
      ignorePatterns?: Array<string> | null;
      projectScanners?: Array<string> | null;
      scanners?: Array<string> | null;
      skipConcluded?: boolean | null;
      skipExcluded?: boolean;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
    } | null;
    evaluator?: {
      copyrightGarbageFile?: string | null;
      licenseClassificationsFile?: string | null;
      packageConfigurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      resolutionsFile?: string | null;
      ruleSet?: string | null;
    } | null;
    reporter?: {
      copyrightGarbageFile?: string | null;
      formats?: Array<string>;
      licenseClassificationsFile?: string | null;
      packageConfigurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      resolutionsFile?: string | null;
      customLicenseTextDir?: string | null;
      assetFiles?: Array<{
        sourcePath: string;
        targetFolder?: string | null;
        targetName?: string | null;
      }>;
      assetDirectories?: Array<{
        sourcePath: string;
        targetFolder?: string | null;
        targetName?: string | null;
      }>;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
      nameMappings?: {
        [key: string]: {
          namePrefix: string;
        };
      } | null;
    } | null;
    notifier?: {
      notifierRules?: string | null;
      resolutionsFile?: string | null;
      mail?: {
        recipientAddresses?: Array<string> | null;
        mailServerConfiguration?: {
          hostName: string;
          port: number;
          username: string;
          password: string;
          useSsl: boolean;
          fromAddress: string;
        } | null;
      } | null;
      jira?: {
        jiraRestClientConfiguration?: {
          serverUrl: string;
          username: string;
          password: string;
        } | null;
      } | null;
    } | null;
    parameters?: {
      [key: string]: string;
    };
  };
  labels?: {
    [key: string]: string;
  } | null;
  jobConfigContext?: string | null;
};

export type OrtRun = {
  id: number;
  index: number;
  repositoryId: number;
  revision: string;
  path?: string | null;
  createdAt: string;
  finishedAt?: string | null;
  jobConfigs: {
    analyzer?: {
      allowDynamicVersions?: boolean;
      disabledPackageManagers?: Array<string> | null;
      enabledPackageManagers?: Array<string> | null;
      environmentConfig?: {
        infrastructureServices: Array<{
          name: string;
          url: string;
          description?: string | null;
          usernameSecretRef: string;
          passwordSecretRef: string;
          excludeFromNetrc?: boolean;
        }>;
        environmentDefinitions?: {
          [key: string]: Array<{
            [key: string]: string;
          }>;
        };
        environmentVariables?: Array<{
          name: string;
          secretName: string;
        }>;
        strict?: boolean;
      } | null;
      packageCurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      packageManagerOptions?: {
        [key: string]: {
          mustRunAfter?: Array<string> | null;
          options?: {
            [key: string]: string;
          } | null;
        };
      } | null;
      repositoryConfigPath?: string | null;
      skipExcluded?: boolean | null;
    };
    advisor?: {
      advisors?: Array<string>;
      skipExcluded?: boolean;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
    } | null;
    scanner?: {
      createMissingArchives?: boolean | null;
      detectedLicenseMappings?: {
        [key: string]: string;
      } | null;
      ignorePatterns?: Array<string> | null;
      projectScanners?: Array<string> | null;
      scanners?: Array<string> | null;
      skipConcluded?: boolean | null;
      skipExcluded?: boolean;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
    } | null;
    evaluator?: {
      copyrightGarbageFile?: string | null;
      licenseClassificationsFile?: string | null;
      packageConfigurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      resolutionsFile?: string | null;
      ruleSet?: string | null;
    } | null;
    reporter?: {
      copyrightGarbageFile?: string | null;
      formats?: Array<string>;
      licenseClassificationsFile?: string | null;
      packageConfigurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      resolutionsFile?: string | null;
      customLicenseTextDir?: string | null;
      assetFiles?: Array<{
        sourcePath: string;
        targetFolder?: string | null;
        targetName?: string | null;
      }>;
      assetDirectories?: Array<{
        sourcePath: string;
        targetFolder?: string | null;
        targetName?: string | null;
      }>;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
      nameMappings?: {
        [key: string]: {
          namePrefix: string;
        };
      } | null;
    } | null;
    notifier?: {
      notifierRules?: string | null;
      resolutionsFile?: string | null;
      mail?: {
        recipientAddresses?: Array<string> | null;
        mailServerConfiguration?: {
          hostName: string;
          port: number;
          username: string;
          password: string;
          useSsl: boolean;
          fromAddress: string;
        } | null;
      } | null;
      jira?: {
        jiraRestClientConfiguration?: {
          serverUrl: string;
          username: string;
          password: string;
        } | null;
      } | null;
    } | null;
    parameters?: {
      [key: string]: string;
    };
  };
  resolvedJobConfigs?: {
    analyzer?: {
      allowDynamicVersions?: boolean;
      disabledPackageManagers?: Array<string> | null;
      enabledPackageManagers?: Array<string> | null;
      environmentConfig?: {
        infrastructureServices: Array<{
          name: string;
          url: string;
          description?: string | null;
          usernameSecretRef: string;
          passwordSecretRef: string;
          excludeFromNetrc?: boolean;
        }>;
        environmentDefinitions?: {
          [key: string]: Array<{
            [key: string]: string;
          }>;
        };
        environmentVariables?: Array<{
          name: string;
          secretName: string;
        }>;
        strict?: boolean;
      } | null;
      packageCurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      packageManagerOptions?: {
        [key: string]: {
          mustRunAfter?: Array<string> | null;
          options?: {
            [key: string]: string;
          } | null;
        };
      } | null;
      repositoryConfigPath?: string | null;
      skipExcluded?: boolean | null;
    };
    advisor?: {
      advisors?: Array<string>;
      skipExcluded?: boolean;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
    } | null;
    scanner?: {
      createMissingArchives?: boolean | null;
      detectedLicenseMappings?: {
        [key: string]: string;
      } | null;
      ignorePatterns?: Array<string> | null;
      projectScanners?: Array<string> | null;
      scanners?: Array<string> | null;
      skipConcluded?: boolean | null;
      skipExcluded?: boolean;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
    } | null;
    evaluator?: {
      copyrightGarbageFile?: string | null;
      licenseClassificationsFile?: string | null;
      packageConfigurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      resolutionsFile?: string | null;
      ruleSet?: string | null;
    } | null;
    reporter?: {
      copyrightGarbageFile?: string | null;
      formats?: Array<string>;
      licenseClassificationsFile?: string | null;
      packageConfigurationProviders?: Array<{
        type: string;
        id?: string;
        enabled?: boolean;
        options?: {
          [key: string]: string;
        };
        secrets?: {
          [key: string]: string;
        };
      }>;
      resolutionsFile?: string | null;
      customLicenseTextDir?: string | null;
      assetFiles?: Array<{
        sourcePath: string;
        targetFolder?: string | null;
        targetName?: string | null;
      }>;
      assetDirectories?: Array<{
        sourcePath: string;
        targetFolder?: string | null;
        targetName?: string | null;
      }>;
      config?: {
        [key: string]: {
          options: {
            [key: string]: string;
          };
          secrets: {
            [key: string]: string;
          };
        };
      } | null;
      nameMappings?: {
        [key: string]: {
          namePrefix: string;
        };
      } | null;
    } | null;
    notifier?: {
      notifierRules?: string | null;
      resolutionsFile?: string | null;
      mail?: {
        recipientAddresses?: Array<string> | null;
        mailServerConfiguration?: {
          hostName: string;
          port: number;
          username: string;
          password: string;
          useSsl: boolean;
          fromAddress: string;
        } | null;
      } | null;
      jira?: {
        jiraRestClientConfiguration?: {
          serverUrl: string;
          username: string;
          password: string;
        } | null;
      } | null;
    } | null;
    parameters?: {
      [key: string]: string;
    };
  } | null;
  jobs: {
    analyzer?: {
      id: number;
      createdAt: string;
      startedAt?: string | null;
      finishedAt?: string | null;
      configuration: {
        allowDynamicVersions?: boolean;
        disabledPackageManagers?: Array<string> | null;
        enabledPackageManagers?: Array<string> | null;
        environmentConfig?: {
          infrastructureServices: Array<{
            name: string;
            url: string;
            description?: string | null;
            usernameSecretRef: string;
            passwordSecretRef: string;
            excludeFromNetrc?: boolean;
          }>;
          environmentDefinitions?: {
            [key: string]: Array<{
              [key: string]: string;
            }>;
          };
          environmentVariables?: Array<{
            name: string;
            secretName: string;
          }>;
          strict?: boolean;
        } | null;
        packageCurationProviders?: Array<{
          type: string;
          id?: string;
          enabled?: boolean;
          options?: {
            [key: string]: string;
          };
          secrets?: {
            [key: string]: string;
          };
        }>;
        packageManagerOptions?: {
          [key: string]: {
            mustRunAfter?: Array<string> | null;
            options?: {
              [key: string]: string;
            } | null;
          };
        } | null;
        repositoryConfigPath?: string | null;
        skipExcluded?: boolean | null;
      };
      status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
    } | null;
    advisor?: {
      id: number;
      createdAt: string;
      startedAt?: string | null;
      finishedAt?: string | null;
      configuration: {
        advisors?: Array<string>;
        skipExcluded?: boolean;
        config?: {
          [key: string]: {
            options: {
              [key: string]: string;
            };
            secrets: {
              [key: string]: string;
            };
          };
        } | null;
      };
      status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
    } | null;
    scanner?: {
      id: number;
      createdAt: string;
      startedAt?: string | null;
      finishedAt?: string | null;
      configuration: {
        createMissingArchives?: boolean | null;
        detectedLicenseMappings?: {
          [key: string]: string;
        } | null;
        ignorePatterns?: Array<string> | null;
        projectScanners?: Array<string> | null;
        scanners?: Array<string> | null;
        skipConcluded?: boolean | null;
        skipExcluded?: boolean;
        config?: {
          [key: string]: {
            options: {
              [key: string]: string;
            };
            secrets: {
              [key: string]: string;
            };
          };
        } | null;
      };
      status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
    } | null;
    evaluator?: {
      id: number;
      createdAt: string;
      startedAt?: string | null;
      finishedAt?: string | null;
      configuration: {
        copyrightGarbageFile?: string | null;
        licenseClassificationsFile?: string | null;
        packageConfigurationProviders?: Array<{
          type: string;
          id?: string;
          enabled?: boolean;
          options?: {
            [key: string]: string;
          };
          secrets?: {
            [key: string]: string;
          };
        }>;
        resolutionsFile?: string | null;
        ruleSet?: string | null;
      };
      status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
    } | null;
    reporter?: {
      id: number;
      createdAt: string;
      startedAt?: string | null;
      finishedAt?: string | null;
      configuration: {
        copyrightGarbageFile?: string | null;
        formats?: Array<string>;
        licenseClassificationsFile?: string | null;
        packageConfigurationProviders?: Array<{
          type: string;
          id?: string;
          enabled?: boolean;
          options?: {
            [key: string]: string;
          };
          secrets?: {
            [key: string]: string;
          };
        }>;
        resolutionsFile?: string | null;
        customLicenseTextDir?: string | null;
        assetFiles?: Array<{
          sourcePath: string;
          targetFolder?: string | null;
          targetName?: string | null;
        }>;
        assetDirectories?: Array<{
          sourcePath: string;
          targetFolder?: string | null;
          targetName?: string | null;
        }>;
        config?: {
          [key: string]: {
            options: {
              [key: string]: string;
            };
            secrets: {
              [key: string]: string;
            };
          };
        } | null;
        nameMappings?: {
          [key: string]: {
            namePrefix: string;
          };
        } | null;
      };
      status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
      reportFilenames?: Array<string> | null;
    } | null;
    notifier?: {
      id: number;
      createdAt: string;
      startedAt?: string | null;
      finishedAt?: string | null;
      configuration: {
        notifierRules?: string | null;
        resolutionsFile?: string | null;
        mail?: {
          recipientAddresses?: Array<string> | null;
          mailServerConfiguration?: {
            hostName: string;
            port: number;
            username: string;
            password: string;
            useSsl: boolean;
            fromAddress: string;
          } | null;
        } | null;
        jira?: {
          jiraRestClientConfiguration?: {
            serverUrl: string;
            username: string;
            password: string;
          } | null;
        } | null;
      };
      status: 'CREATED' | 'SCHEDULED' | 'RUNNING' | 'FAILED' | 'FINISHED';
    } | null;
  };
  status: 'CREATED' | 'ACTIVE' | 'FINISHED' | 'FAILED';
  labels: {
    [key: string]: string;
  };
  issues: Array<{
    timestamp: string;
    source: string;
    message: string;
    severity: string;
  }>;
  jobConfigContext?: string | null;
  resolvedJobConfigContext?: string | null;
};

export type GetLivenessResponse = Liveness;

export type GetReportByRunIdAndTokenData = {
  /**
   * The ID of the ORT run.
   */
  runId?: number;
  /**
   * The token providing access to the report file to be downloaded.
   */
  token?: string;
};

export type GetReportByRunIdAndTokenResponse = string;

export type GetReportByRunIdAndFileNameData = {
  /**
   * The name of the report file to be downloaded.
   */
  fileName?: string;
  /**
   * The ID of the ORT run.
   */
  runId?: number;
};

export type GetReportByRunIdAndFileNameResponse = string;

export type GetOrganizationsData = {
  /**
   * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   */
  limit?: number;
  /**
   * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   */
  offset?: number;
  /**
   * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   */
  sort?: string;
};

export type GetOrganizationsResponse =
  org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Organization_;

export type PostOrganizationsData = {
  requestBody?: CreateOrganization;
};

export type PostOrganizationsResponse = Organization;

export type GetOrganizationByIdData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
};

export type GetOrganizationByIdResponse = Organization;

export type DeleteOrganizationByIdData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
};

export type DeleteOrganizationByIdResponse = void;

export type PatchOrganizationByIdData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
  /**
   * Set the values that should be updated. To delete a value, set it explicitly to null.
   */
  requestBody?: UpdateOrganization;
};

export type PatchOrganizationByIdResponse = Organization;

export type GetOrganizationProductsData = {
  /**
   * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   */
  limit?: number;
  /**
   * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   */
  offset?: number;
  /**
   * The organization's ID.
   */
  organizationId?: number;
  /**
   * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   */
  sort?: string;
};

export type GetOrganizationProductsResponse =
  org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Product_;

export type PostProductData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
  requestBody?: CreateProduct;
};

export type PostProductResponse = Product;

export type GetProductByIdData = {
  /**
   * The product's ID.
   */
  productId?: number;
};

export type GetProductByIdResponse = Product;

export type DeleteProductByIdData = {
  /**
   * The product's ID.
   */
  productId?: number;
};

export type DeleteProductByIdResponse = void;

export type PatchProductByIdData = {
  /**
   * The product's ID.
   */
  productId?: number;
  /**
   * Set the values that should be updated. To delete a value, set it explicitly to null.
   */
  requestBody?: UpdateProduct;
};

export type PatchProductByIdResponse = Product;

export type GetSecretsByOrganizationIdData = {
  /**
   * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   */
  limit?: number;
  /**
   * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   */
  offset?: number;
  /**
   * The ID of an organization.
   */
  organizationId?: number;
  /**
   * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   */
  sort?: string;
};

export type GetSecretsByOrganizationIdResponse =
  org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_;

export type PostSecretForOrganizationData = {
  requestBody?: CreateSecret;
};

export type PostSecretForOrganizationResponse = Secret;

export type GetSecretByOrganizationIdAndNameData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type GetSecretByOrganizationIdAndNameResponse = Secret;

export type DeleteSecretByOrganizationIdAndNameData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type DeleteSecretByOrganizationIdAndNameResponse = void;

export type PatchSecretByOrganizationIdAndNameData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
  /**
   * Set the values that should be updated. To delete a value, set it explicitly to null.
   */
  requestBody?: UpdateSecret;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type PatchSecretByOrganizationIdAndNameResponse = Secret;

export type GetSecretsByProductIdData = {
  /**
   * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   */
  limit?: number;
  /**
   * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   */
  offset?: number;
  /**
   * The ID of a product.
   */
  productId?: number;
  /**
   * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   */
  sort?: string;
};

export type GetSecretsByProductIdResponse =
  org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_;

export type PostSecretForProductData = {
  requestBody?: CreateSecret;
};

export type PostSecretForProductResponse = Secret;

export type GetSecretByProductIdAndNameData = {
  /**
   * The product's ID.
   */
  productId?: number;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type GetSecretByProductIdAndNameResponse = Secret;

export type DeleteSecretByProductIdAndNameData = {
  /**
   * The product's ID.
   */
  productId?: number;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type DeleteSecretByProductIdAndNameResponse = void;

export type PatchSecretByProductIdIdAndNameData = {
  /**
   * The product's ID.
   */
  productId?: number;
  /**
   * Set the values that should be updated. To delete a value, set it explicitly to null.
   */
  requestBody?: UpdateSecret;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type PatchSecretByProductIdIdAndNameResponse = Secret;

export type GetSecretsByRepositoryIdData = {
  /**
   * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   */
  limit?: number;
  /**
   * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   */
  offset?: number;
  /**
   * The ID of a repository.
   */
  repositoryId?: number;
  /**
   * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   */
  sort?: string;
};

export type GetSecretsByRepositoryIdResponse =
  org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_;

export type PostSecretForRepositoryData = {
  requestBody?: CreateSecret;
};

export type PostSecretForRepositoryResponse = Secret;

export type GetSecretByRepositoryIdAndNameData = {
  /**
   * The repository's ID.
   */
  repositoryId?: number;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type GetSecretByRepositoryIdAndNameResponse = Secret;

export type DeleteSecretByRepositoryIdAndNameData = {
  /**
   * The repository's ID.
   */
  repositoryId?: number;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type DeleteSecretByRepositoryIdAndNameResponse = void;

export type PatchSecretByRepositoryIdIdAndNameData = {
  /**
   * The repository's ID.
   */
  repositoryIdId?: number;
  /**
   * Set the values that should be updated. To delete a value, set it explicitly to null.
   */
  requestBody?: UpdateSecret;
  /**
   * The secret's name.
   */
  secretName?: string;
};

export type PatchSecretByRepositoryIdIdAndNameResponse = Secret;

export type GetInfrastructureServicesByOrganizationIdData = {
  /**
   * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   */
  limit?: number;
  /**
   * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   */
  offset?: number;
  /**
   * The ID of an organization.
   */
  organizationId?: number;
  /**
   * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   */
  sort?: string;
};

export type GetInfrastructureServicesByOrganizationIdResponse =
  org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_InfrastructureService_;

export type PostInfrastructureServiceForOrganizationData = {
  requestBody?: CreateInfrastructureService;
};

export type PostInfrastructureServiceForOrganizationResponse =
  InfrastructureService;

export type DeleteInfrastructureServiceForOrganizationIdAndNameData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
  /**
   * The name of the infrastructure service.
   */
  serviceName?: string;
};

export type DeleteInfrastructureServiceForOrganizationIdAndNameResponse = void;

export type PatchInfrastructureServiceForOrganizationIdAndNameData = {
  /**
   * The organization's ID.
   */
  organizationId?: number;
  /**
   * Set the values that should be updated. To delete a value, set it explicitly to null.
   */
  requestBody?: UpdateInfrastructureService;
  /**
   * The name of the infrastructure service.
   */
  serviceName?: string;
};

export type PatchInfrastructureServiceForOrganizationIdAndNameResponse =
  InfrastructureService;

export type GetRepositoriesByProductIdData = {
  /**
   * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   */
  limit?: number;
  /**
   * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   */
  offset?: number;
  /**
   * The product's ID.
   */
  productId?: number;
  /**
   * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   */
  sort?: string;
};

export type GetRepositoriesByProductIdResponse =
  org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Repository_;

export type CreateRepositoryData = {
  /**
   * The product's ID.
   */
  productId?: number;
  requestBody?: CreateRepository;
};

export type CreateRepositoryResponse = Repository;

export type GetRepositoryByIdData = {
  /**
   * The repository's ID.
   */
  repositoryId?: number;
};

export type GetRepositoryByIdResponse = Repository;

export type DeleteRepositoryByIdData = {
  /**
   * The repository's ID.
   */
  repositoryId?: number;
};

export type DeleteRepositoryByIdResponse = void;

export type PatchRepositoryByIdData = {
  /**
   * The repository's ID.
   */
  repositoryId?: number;
  /**
   * Set the values that should be updated. To delete a value, set it explicitly to null.
   */
  requestBody?: UpdateRepository;
};

export type PatchRepositoryByIdResponse = Repository;

export type GetOrtRunsData = {
  /**
   * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
   */
  limit?: number;
  /**
   * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
   */
  offset?: number;
  /**
   * The repository's ID.
   */
  repositoryId?: number;
  /**
   * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
   */
  sort?: string;
};

export type GetOrtRunsResponse =
  org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_OrtRunSummary_;

export type PostOrtRunData = {
  /**
   * The repository's ID.
   */
  repositoryId?: number;
  requestBody?: CreateOrtRun;
};

export type PostOrtRunResponse = OrtRun;

export type GetOrtRunByIndexData = {
  /**
   * The index of an ORT run.
   */
  ortRunIndex?: number;
  /**
   * The repository's ID.
   */
  repositoryId?: number;
};

export type GetOrtRunByIndexResponse = OrtRun;

export type GetLogsByRunIdData = {
  /**
   * The log level; can be one of 'DEBUG', 'INFO', 'WARN', 'ERROR' (ignoring case).Only logs of this level or higher are retrieved. Defaults to 'INFO' if missing.
   */
  level?: string;
  /**
   * The ID of the ORT run.
   */
  runId?: number;
  /**
   * Defines the run steps for which logs are to be retrieved. This is a comma-separated string with the following allowed steps: 'CONFIG', 'ANALYZER', 'ADVISOR', 'SCANNER', 'EVALUATOR', 'REPORTER' (ignoring case). If missing, the logs for all steps are retrieved.
   */
  steps?: string;
};

export type GetLogsByRunIdResponse = unknown;

export type $OpenApiTs = {
  '/api/v1/liveness': {
    get: {
      res: {
        /**
         * Success
         */
        200: Liveness;
      };
    };
  };
  '/api/v1/runs/{runId}/downloads/report/{token}': {
    get: {
      req: {
        /**
         * The ID of the ORT run.
         */
        runId?: number;
        /**
         * The token providing access to the report file to be downloaded.
         */
        token?: string;
      };
      res: {
        /**
         * Success. The response body contains the requested report file.
         */
        200: string;
        /**
         * The provided token could not be resolved or has expired.
         */
        404: unknown;
      };
    };
  };
  '/api/v1/runs/{runId}/reporter/{fileName}': {
    get: {
      req: {
        /**
         * The name of the report file to be downloaded.
         */
        fileName?: string;
        /**
         * The ID of the ORT run.
         */
        runId?: number;
      };
      res: {
        /**
         * Success. The response body contains the requested report file.
         */
        200: string;
        /**
         * Invalid Token
         */
        401: unknown;
        /**
         * The requested report file or the ORT run could not be resolved.
         */
        404: unknown;
      };
    };
  };
  '/api/v1/organizations': {
    get: {
      req: {
        /**
         * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
         */
        limit?: number;
        /**
         * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
         */
        offset?: number;
        /**
         * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
         */
        sort?: string;
      };
      res: {
        /**
         * Success
         */
        200: org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Organization_;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    post: {
      req: {
        requestBody?: CreateOrganization;
      };
      res: {
        /**
         * Success
         */
        201: Organization;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/organizations/{organizationId}': {
    get: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
      };
      res: {
        /**
         * Success
         */
        200: Organization;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    delete: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
      };
      res: {
        /**
         * Success
         */
        204: void;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    patch: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
        /**
         * Set the values that should be updated. To delete a value, set it explicitly to null.
         */
        requestBody?: UpdateOrganization;
      };
      res: {
        /**
         * Success
         */
        200: Organization;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/organizations/{organizationId}/products': {
    get: {
      req: {
        /**
         * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
         */
        limit?: number;
        /**
         * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
         */
        offset?: number;
        /**
         * The organization's ID.
         */
        organizationId?: number;
        /**
         * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
         */
        sort?: string;
      };
      res: {
        /**
         * Success
         */
        200: org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Product_;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    post: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
        requestBody?: CreateProduct;
      };
      res: {
        /**
         * Success
         */
        201: Product;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/products/{productId}': {
    get: {
      req: {
        /**
         * The product's ID.
         */
        productId?: number;
      };
      res: {
        /**
         * Success
         */
        200: Product;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    delete: {
      req: {
        /**
         * The product's ID.
         */
        productId?: number;
      };
      res: {
        /**
         * Success
         */
        204: void;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    patch: {
      req: {
        /**
         * The product's ID.
         */
        productId?: number;
        /**
         * Set the values that should be updated. To delete a value, set it explicitly to null.
         */
        requestBody?: UpdateProduct;
      };
      res: {
        /**
         * Success
         */
        200: Product;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/organizations/{organizationId}/secrets': {
    get: {
      req: {
        /**
         * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
         */
        limit?: number;
        /**
         * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
         */
        offset?: number;
        /**
         * The ID of an organization.
         */
        organizationId?: number;
        /**
         * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
         */
        sort?: string;
      };
      res: {
        /**
         * Success
         */
        200: org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    post: {
      req: {
        requestBody?: CreateSecret;
      };
      res: {
        /**
         * Success
         */
        201: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/organizations/{organizationId}/secrets/{secretName}': {
    get: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        200: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    delete: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        204: void;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    patch: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
        /**
         * Set the values that should be updated. To delete a value, set it explicitly to null.
         */
        requestBody?: UpdateSecret;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        200: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/products/{productId}/secrets': {
    get: {
      req: {
        /**
         * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
         */
        limit?: number;
        /**
         * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
         */
        offset?: number;
        /**
         * The ID of a product.
         */
        productId?: number;
        /**
         * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
         */
        sort?: string;
      };
      res: {
        /**
         * Success
         */
        200: org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    post: {
      req: {
        requestBody?: CreateSecret;
      };
      res: {
        /**
         * Success
         */
        201: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/products/{productId}/secrets/{secretName}': {
    get: {
      req: {
        /**
         * The product's ID.
         */
        productId?: number;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        200: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    delete: {
      req: {
        /**
         * The product's ID.
         */
        productId?: number;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        204: void;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    patch: {
      req: {
        /**
         * The product's ID.
         */
        productId?: number;
        /**
         * Set the values that should be updated. To delete a value, set it explicitly to null.
         */
        requestBody?: UpdateSecret;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        200: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/repositories/{repositoryId}/secrets': {
    get: {
      req: {
        /**
         * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
         */
        limit?: number;
        /**
         * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
         */
        offset?: number;
        /**
         * The ID of a repository.
         */
        repositoryId?: number;
        /**
         * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
         */
        sort?: string;
      };
      res: {
        /**
         * Success
         */
        200: org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Secret_;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    post: {
      req: {
        requestBody?: CreateSecret;
      };
      res: {
        /**
         * Success
         */
        201: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/repositories/{repositoryId}/secrets/{secretName}': {
    get: {
      req: {
        /**
         * The repository's ID.
         */
        repositoryId?: number;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        200: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    delete: {
      req: {
        /**
         * The repository's ID.
         */
        repositoryId?: number;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        204: void;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    patch: {
      req: {
        /**
         * The repository's ID.
         */
        repositoryIdId?: number;
        /**
         * Set the values that should be updated. To delete a value, set it explicitly to null.
         */
        requestBody?: UpdateSecret;
        /**
         * The secret's name.
         */
        secretName?: string;
      };
      res: {
        /**
         * Success
         */
        200: Secret;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/organizations/{organizationId}/infrastructure-services': {
    get: {
      req: {
        /**
         * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
         */
        limit?: number;
        /**
         * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
         */
        offset?: number;
        /**
         * The ID of an organization.
         */
        organizationId?: number;
        /**
         * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
         */
        sort?: string;
      };
      res: {
        /**
         * Success
         */
        200: org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_InfrastructureService_;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    post: {
      req: {
        requestBody?: CreateInfrastructureService;
      };
      res: {
        /**
         * Success
         */
        201: InfrastructureService;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/organizations/{organizationId}/infrastructure-services/{serviceName}': {
    delete: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
        /**
         * The name of the infrastructure service.
         */
        serviceName?: string;
      };
      res: {
        /**
         * Success
         */
        204: void;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    patch: {
      req: {
        /**
         * The organization's ID.
         */
        organizationId?: number;
        /**
         * Set the values that should be updated. To delete a value, set it explicitly to null.
         */
        requestBody?: UpdateInfrastructureService;
        /**
         * The name of the infrastructure service.
         */
        serviceName?: string;
      };
      res: {
        /**
         * Success
         */
        200: InfrastructureService;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/products/{productId}/repositories': {
    get: {
      req: {
        /**
         * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
         */
        limit?: number;
        /**
         * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
         */
        offset?: number;
        /**
         * The product's ID.
         */
        productId?: number;
        /**
         * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
         */
        sort?: string;
      };
      res: {
        /**
         * Success
         */
        200: org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_Repository_;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    post: {
      req: {
        /**
         * The product's ID.
         */
        productId?: number;
        requestBody?: CreateRepository;
      };
      res: {
        /**
         * Success
         */
        201: Repository;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/repositories/{repositoryId}': {
    get: {
      req: {
        /**
         * The repository's ID.
         */
        repositoryId?: number;
      };
      res: {
        /**
         * Success
         */
        200: Repository;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    delete: {
      req: {
        /**
         * The repository's ID.
         */
        repositoryId?: number;
      };
      res: {
        /**
         * Success
         */
        204: void;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    patch: {
      req: {
        /**
         * The repository's ID.
         */
        repositoryId?: number;
        /**
         * Set the values that should be updated. To delete a value, set it explicitly to null.
         */
        requestBody?: UpdateRepository;
      };
      res: {
        /**
         * Success
         */
        200: Repository;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/repositories/{repositoryId}/runs': {
    get: {
      req: {
        /**
         * The maximum number of items to retrieve. If not specified at most 20 items are retrieved.
         */
        limit?: number;
        /**
         * The offset of the first item in the result. Together with 'limit', this can be used to implement paging.
         */
        offset?: number;
        /**
         * The repository's ID.
         */
        repositoryId?: number;
        /**
         * Comma-separated list of fields by which the result is sorted. The listed fields must be supported by the endpoint. Putting a minus ('-') before a field name, reverts the sort order for this field. If not specified, a default sort field and sort order is used.
         */
        sort?: string;
      };
      res: {
        /**
         * Success
         */
        200: org_eclipse_apoapsis_ortserver_api_v1_model_PagedResponse_org_eclipse_apoapsis_ortserver_api_v1_model_OrtRunSummary_;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
    post: {
      req: {
        /**
         * The repository's ID.
         */
        repositoryId?: number;
        requestBody?: CreateOrtRun;
      };
      res: {
        /**
         * Success
         */
        200: OrtRun;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/repositories/{repositoryId}/runs/{ortRunIndex}': {
    get: {
      req: {
        /**
         * The index of an ORT run.
         */
        ortRunIndex?: number;
        /**
         * The repository's ID.
         */
        repositoryId?: number;
      };
      res: {
        /**
         * Success
         */
        200: OrtRun;
        /**
         * Invalid Token
         */
        401: unknown;
      };
    };
  };
  '/api/v1/runs/{runId}/logs': {
    get: {
      req: {
        /**
         * The log level; can be one of 'DEBUG', 'INFO', 'WARN', 'ERROR' (ignoring case).Only logs of this level or higher are retrieved. Defaults to 'INFO' if missing.
         */
        level?: string;
        /**
         * The ID of the ORT run.
         */
        runId?: number;
        /**
         * Defines the run steps for which logs are to be retrieved. This is a comma-separated string with the following allowed steps: 'CONFIG', 'ANALYZER', 'ADVISOR', 'SCANNER', 'EVALUATOR', 'REPORTER' (ignoring case). If missing, the logs for all steps are retrieved.
         */
        steps?: string;
      };
      res: {
        /**
         * Success. The response body contains a Zip archive with the selected log files.
         */
        200: unknown;
        /**
         * Invalid values have been provided for the log level or steps parameters.
         */
        400: unknown;
        /**
         * Invalid Token
         */
        401: unknown;
        /**
         * The ORT run does not exist.
         */
        404: unknown;
      };
    };
  };
};
