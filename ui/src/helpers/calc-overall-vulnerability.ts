/*
 * Copyright (C) 2024 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import { VulnerabilityRating } from '@/api/requests';
import { vulnerabilityRatings } from '@/helpers/get-status-class';

/**
 * Calculate the overall vulnerability rating based on the individual ratings.
 *
 * @param ratings An array of individual vulnerability ratings.
 * These ratings can include strings representing the rating, or null/undefined values.
 * Note that some ratings returned by the vulnerability services are not
 * included in the CVSS specification, so these are ignored for now.
 *
 * @returns The highest vulnerability rating from the valid ratings.
 * If no valid ratings are found, returns 'NONE'.
 *
 * @description
 * This function filters out invalid ratings (including null, undefined, and ratings not included in VulnerabilityRatings).
 * It then determines the highest rating based on the numerical value associated with each valid rating.
 */
export function calcOverallVulnerability(
  ratings: (string | null | undefined)[]
): VulnerabilityRating {
  // Filter out undefined, null, and invalid ratings
  const filteredRatings = ratings.filter(
    (rating): rating is VulnerabilityRating =>
      rating !== undefined && rating !== null && rating in vulnerabilityRatings
  );

  // If there are no valid ratings, default to 'NONE'
  if (!filteredRatings[0]) {
    return 'NONE';
  }

  // Find the rating with the highest value
  const maxRating = filteredRatings.reduce((max, rating) => {
    return vulnerabilityRatings[rating] > vulnerabilityRatings[max]
      ? rating
      : max;
  }, filteredRatings[0]);

  return maxRating;
}
