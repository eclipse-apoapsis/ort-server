/*
 * Copyright (C) 2024 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import { getRouteApi, Link } from '@tanstack/react-router';
import {
  createColumnHelper,
  getCoreRowModel,
  getExpandedRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  Row,
  useReactTable,
} from '@tanstack/react-table';
import { ChevronDown, ChevronUp } from 'lucide-react';
import { useMemo } from 'react';

import { VulnerabilityWithIdentifier } from '@/api/requests';
import { DataTable } from '@/components/data-table/data-table';
import { MarkdownRenderer } from '@/components/markdown-renderer';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { calcOverallVulnerability } from '@/helpers/calc-overall-vulnerability';
import { getVulnerabilityRatingBackgroundColor } from '@/helpers/get-status-class';
import { identifierToString } from '@/helpers/identifier-to-string';
import { compareVulnerabilityRating } from '@/helpers/sorting-functions';
import { VulnerabilityWithRepositoryCount } from '@/hooks/use-vulnerabilities-by-product-suspense';

const defaultPageSize = 10;

const columnHelper = createColumnHelper<VulnerabilityWithRepositoryCount>();

const columns = [
  columnHelper.display({
    id: 'moreInfo',
    header: 'Details',
    size: 50,
    cell: ({ row }) => {
      return row.getCanExpand() ? (
        <Button
          variant='outline'
          size='sm'
          {...{
            onClick: row.getToggleExpandedHandler(),
            style: { cursor: 'pointer' },
          }}
        >
          {row.getIsExpanded() ? (
            <ChevronUp className='h-4 w-4' />
          ) : (
            <ChevronDown className='h-4 w-4' />
          )}
        </Button>
      ) : (
        'No info'
      );
    },
    enableSorting: false,
  }),
  columnHelper.accessor(
    (vuln) => {
      const ratings = vuln.vulnerability.references.map(
        (reference) => reference.severity
      );
      return calcOverallVulnerability(ratings);
    },
    {
      id: 'rating',
      header: 'Rating',
      cell: ({ row }) => {
        return (
          <Badge
            className={`${getVulnerabilityRatingBackgroundColor(row.getValue('rating'))}`}
          >
            {row.getValue('rating')}
          </Badge>
        );
      },
      sortingFn: (rowA, rowB) => {
        return compareVulnerabilityRating(
          rowA.getValue('rating'),
          rowB.getValue('rating')
        );
      },
    }
  ),
  columnHelper.accessor(
    (vuln) => {
      return vuln.repositoryCount;
    },
    {
      id: 'count',
      header: 'Repositories',
      cell: ({ row }) => {
        return <div>{row.getValue('count')}</div>;
      },
    }
  ),
  columnHelper.accessor(
    (vuln) => {
      return identifierToString(vuln.identifier);
    },
    {
      id: 'package',
      header: 'Package',
      cell: ({ row }) => {
        return <div className='font-semibold'>{row.getValue('package')}</div>;
      },
    }
  ),
  columnHelper.accessor('vulnerability.externalId', {
    id: 'externalId',
    header: 'External ID',
    cell: ({ row }) => (
      <Badge className='whitespace-nowrap bg-blue-300'>
        {row.getValue('externalId')}
      </Badge>
    ),
  }),
  columnHelper.accessor(
    (row) => {
      return row.vulnerability.summary;
    },
    {
      id: 'summary',
      header: 'Summary',
      cell: ({ row }) => {
        return (
          <div className='italic text-muted-foreground'>
            {row.getValue('summary')}
          </div>
        );
      },
      enableSorting: false,
    }
  ),
];

const renderSubComponent = ({
  row,
}: {
  row: Row<VulnerabilityWithIdentifier>;
}) => {
  const vulnerability = row.original.vulnerability;

  return (
    <div className='flex flex-col gap-4'>
      <div className='text-lg font-semibold'>Description</div>
      <MarkdownRenderer
        markdown={vulnerability.description || 'No description.'}
      />
      <div className='mt-2 text-lg font-semibold'>
        Links to vulnerability references
      </div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Severity</TableHead>
            <TableHead>Scoring system</TableHead>
            <TableHead>Score</TableHead>
            <TableHead>Vector</TableHead>
            <TableHead>Link</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerability.references.map((reference, index) => (
            <TableRow key={index}>
              <TableCell>{reference.severity || '-'}</TableCell>
              <TableCell>{reference.scoringSystem || '-'}</TableCell>
              <TableCell>{reference.score || '-'}</TableCell>
              <TableCell>{reference.vector || '-'}</TableCell>
              <TableCell>
                {
                  <Link
                    className='break-all font-semibold text-blue-400 hover:underline'
                    to={reference.url}
                    target='_blank'
                  >
                    {reference.url}
                  </Link>
                }
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

type ProductVulnerabilitiesTableProps = {
  vulnerabilities: VulnerabilityWithRepositoryCount[];
};

const routeApi = getRouteApi(
  '/_layout/organizations/$orgId/products/$productId/vulnerabilities/'
);

export const ProductVulnerabilitiesTable = ({
  vulnerabilities,
}: ProductVulnerabilitiesTableProps) => {
  const search = routeApi.useSearch();

  // All of these need to be memoized to prevent unnecessary re-renders
  // and (at least for Firefox) the browser freezing up.

  const pageIndex = useMemo(
    () => (search.page ? search.page - 1 : 0),
    [search.page]
  );

  const pageSize = useMemo(
    () => (search.pageSize ? search.pageSize : defaultPageSize),
    [search.pageSize]
  );

  const sortBy = useMemo(
    () => (search.sortBy ? [search.sortBy] : undefined),
    [search.sortBy]
  );

  const table = useReactTable({
    data: vulnerabilities,
    columns,
    state: {
      pagination: {
        pageIndex,
        pageSize,
      },
      sorting: sortBy,
    },
    getCoreRowModel: getCoreRowModel(),
    getExpandedRowModel: getExpandedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getRowCanExpand: () => true,
    enableMultiSort: false,
  });

  return (
    <DataTable
      table={table}
      renderSubComponent={renderSubComponent}
      setCurrentPageOptions={(currentPage) => {
        return {
          search: { ...search, page: currentPage },
        };
      }}
      setPageSizeOptions={(size) => {
        return {
          search: { ...search, page: 1, pageSize: size },
        };
      }}
      setSortingOptions={(sortBy) => {
        return {
          search: {
            ...search,
            sortBy: sortBy,
          },
        };
      }}
    />
  );
};
