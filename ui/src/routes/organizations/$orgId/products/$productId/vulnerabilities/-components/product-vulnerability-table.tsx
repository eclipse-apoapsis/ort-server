/*
 * Copyright (C) 2024 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import { getRouteApi, Link } from '@tanstack/react-router';
import {
  createColumnHelper,
  getCoreRowModel,
  getExpandedRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  Row,
  useReactTable,
} from '@tanstack/react-table';
import { ChevronDown, ChevronUp } from 'lucide-react';
import { useEffect, useMemo } from 'react';

import { useProductsServiceGetApiV1ProductsByProductIdVulnerabilities } from '@/api/queries';
import { ProductVulnerability, VulnerabilityRating } from '@/api/requests';
import { DataTable } from '@/components/data-table/data-table';
import { LoadingIndicator } from '@/components/loading-indicator';
import { MarkdownRenderer } from '@/components/markdown-renderer';
import { ToastError } from '@/components/toast-error';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { getVulnerabilityRatingBackgroundColor } from '@/helpers/get-status-class';
import { updateColumnSorting } from '@/helpers/handle-multisort';
import { identifierToString } from '@/helpers/identifier-to-string';
import { compareVulnerabilityRating } from '@/helpers/sorting-functions';
import { ALL_ITEMS } from '@/lib/constants';
import { toast } from '@/lib/toast';
import { vulnerabilityRatingSchema } from '@/schemas';

const defaultPageSize = 10;

const columnHelper = createColumnHelper<ProductVulnerability>();

const renderSubComponent = ({ row }: { row: Row<ProductVulnerability> }) => {
  const vulnerability = row.original.vulnerability;

  return (
    <div className='flex flex-col gap-4'>
      <div className='text-lg font-semibold'>Description</div>
      <MarkdownRenderer
        markdown={vulnerability.description || 'No description.'}
      />
      <div className='mt-2 text-lg font-semibold'>
        Links to vulnerability references
      </div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Severity</TableHead>
            <TableHead>Scoring system</TableHead>
            <TableHead>Score</TableHead>
            <TableHead>Vector</TableHead>
            <TableHead>Link</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerability.references
            .sort((refA, refB) => (refB.score ?? 0) - (refA.score ?? 0))
            .map((reference, index) => (
              <TableRow key={index}>
                <TableCell>{reference.severity || '-'}</TableCell>
                <TableCell>{reference.scoringSystem || '-'}</TableCell>
                <TableCell>{reference.score || '-'}</TableCell>
                <TableCell>{reference.vector || '-'}</TableCell>
                <TableCell>
                  {
                    <Link
                      className='font-semibold break-all text-blue-400 hover:underline'
                      to={reference.url}
                      target='_blank'
                    >
                      {reference.url}
                    </Link>
                  }
                </TableCell>
              </TableRow>
            ))}
        </TableBody>
      </Table>
    </div>
  );
};

const routeApi = getRouteApi(
  '/organizations/$orgId/products/$productId/vulnerabilities/'
);

export const ProductVulnerabilityTable = ({
  setUnfilteredRowCount,
  setFilteredRowCount,
}: {
  setUnfilteredRowCount?: (count: number) => void; // Callback function to access the unfiltered row count.
  setFilteredRowCount?: (count: number) => void; // Callback function to access the filtered row count.
}) => {
  const params = routeApi.useParams();
  const search = routeApi.useSearch();
  const navigate = routeApi.useNavigate();

  const {
    data: vulnerabilities,
    isPending,
    isError,
    error,
  } = useProductsServiceGetApiV1ProductsByProductIdVulnerabilities({
    productId: Number.parseInt(params.productId),
    limit: ALL_ITEMS,
  });

  // Prevent infinite rerenders by providing a stable reference to columns via memoization.
  // https://tanstack.com/table/latest/docs/faq#solution-1-stable-references-with-usememo-or-usestate
  const columns = useMemo(
    () => [
      columnHelper.display({
        id: 'moreInfo',
        header: 'Details',
        size: 50,
        cell: ({ row }) => {
          return row.getCanExpand() ? (
            <Button
              variant='outline'
              size='sm'
              {...{
                onClick: row.getToggleExpandedHandler(),
                style: { cursor: 'pointer' },
              }}
            >
              {row.getIsExpanded() ? (
                <ChevronUp className='h-4 w-4' />
              ) : (
                <ChevronDown className='h-4 w-4' />
              )}
            </Button>
          ) : (
            'No info'
          );
        },
        enableSorting: false,
        enableColumnFilter: false,
      }),
      columnHelper.accessor('rating', {
        id: 'rating',
        header: 'Rating',
        cell: ({ getValue }) => {
          return (
            <Badge
              className={`${getVulnerabilityRatingBackgroundColor(getValue())}`}
            >
              {getValue()}
            </Badge>
          );
        },
        filterFn: (row, _columnId, filterValue): boolean => {
          return filterValue.includes(row.original.rating);
        },
        sortingFn: (rowA, rowB) => {
          return compareVulnerabilityRating(
            rowA.getValue('rating'),
            rowB.getValue('rating')
          );
        },
        meta: {
          filter: {
            filterVariant: 'select',
            selectOptions: vulnerabilityRatingSchema.options.map((rating) => ({
              label: rating,
              value: rating,
            })),
            setSelected: (ratings: VulnerabilityRating[]) => {
              navigate({
                search: {
                  ...search,
                  page: 1,
                  rating: ratings.length === 0 ? undefined : ratings,
                },
              });
            },
          },
        },
      }),
      columnHelper.accessor('repositoriesCount', {
        id: 'count',
        header: 'Repositories',
        cell: ({ row }) => {
          return <div>{row.getValue('count')}</div>;
        },
        enableColumnFilter: false,
      }),
      columnHelper.accessor(
        (vuln) => {
          return identifierToString(vuln.identifier);
        },
        {
          id: 'packageIdentifier',
          header: 'Package ID',
          cell: ({ getValue }) => {
            return <div className='font-semibold'>{getValue()}</div>;
          },
          meta: {
            filter: {
              filterVariant: 'text',
              setFilterValue: (value: string | undefined) => {
                navigate({
                  search: { ...search, page: 1, pkgId: value },
                });
              },
            },
          },
        }
      ),
      columnHelper.accessor('vulnerability.externalId', {
        id: 'externalId',
        header: 'External ID',
        cell: ({ row }) => (
          <Badge className='bg-blue-300 whitespace-nowrap'>
            {row.getValue('externalId')}
          </Badge>
        ),
        enableColumnFilter: false,
      }),
      columnHelper.accessor('vulnerability.summary', {
        id: 'summary',
        header: 'Summary',
        cell: ({ row }) => {
          return (
            <div className='text-muted-foreground italic'>
              {row.original.vulnerability.summary}
            </div>
          );
        },
        enableSorting: false,
        enableColumnFilter: false,
      }),
    ],
    [navigate, search]
  );

  // All of these need to be memoized to prevent unnecessary re-renders
  // and (at least for Firefox) the browser freezing up.

  const pageIndex = useMemo(
    () => (search.page ? search.page - 1 : 0),
    [search.page]
  );

  const pageSize = useMemo(
    () => (search.pageSize ? search.pageSize : defaultPageSize),
    [search.pageSize]
  );

  const packageIdentifier = useMemo(
    () => (search.pkgId ? search.pkgId : undefined),
    [search.pkgId]
  );

  const rating = useMemo(
    () => (search.rating ? search.rating : undefined),
    [search.rating]
  );

  const columnFilters = useMemo(() => {
    const filters = [];
    if (packageIdentifier) {
      filters.push({ id: 'packageIdentifier', value: packageIdentifier });
    }
    if (rating) {
      filters.push({ id: 'rating', value: rating });
    }
    return filters;
  }, [packageIdentifier, rating]);

  const sortBy = useMemo(
    () => (search.sortBy ? search.sortBy : undefined),
    [search.sortBy]
  );

  const table = useReactTable({
    data: vulnerabilities?.data || [],
    columns,
    state: {
      pagination: {
        pageIndex,
        pageSize,
      },
      columnFilters,
      sorting: sortBy,
    },
    getCoreRowModel: getCoreRowModel(),
    getExpandedRowModel: getExpandedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getRowCanExpand: () => true,
  });

  const unfilteredRowsLength = table.getPreFilteredRowModel().rows.length;
  const filteredRowsLength = table.getFilteredRowModel().rows.length;

  useEffect(() => {
    if (setUnfilteredRowCount) {
      setUnfilteredRowCount(unfilteredRowsLength);
    }
    if (setFilteredRowCount) {
      setFilteredRowCount(filteredRowsLength);
    }
  }, [
    unfilteredRowsLength,
    filteredRowsLength,
    setUnfilteredRowCount,
    setFilteredRowCount,
  ]);

  if (isPending) {
    return <LoadingIndicator />;
  }

  if (isError) {
    toast.error('Unable to load data', {
      description: <ToastError error={error} />,
      duration: Infinity,
      cancel: {
        label: 'Dismiss',
        onClick: () => {},
      },
    });
    return;
  }

  return (
    <DataTable
      table={table}
      renderSubComponent={renderSubComponent}
      setCurrentPageOptions={(currentPage) => {
        return {
          search: { ...search, page: currentPage },
        };
      }}
      setPageSizeOptions={(size) => {
        return {
          search: { ...search, page: 1, pageSize: size },
        };
      }}
      setSortingOptions={(sortBy) => {
        return {
          search: {
            ...search,
            sortBy: updateColumnSorting(search.sortBy, sortBy),
          },
        };
      }}
    />
  );
};
